
/home/mirek/git/DP-IQRF-WIFI-br-na/DP/build/DP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectab       00000140  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .fcf          00000010  00000400  00000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004cbc  00000410  00000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .stack        00000800  1fff8000  1fff8000  00028000  2**0
                  ALLOC
  4 .data         000002c8  1fff8800  000050cc  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000021e  1fff8ac8  00005394  00018ac8  2**2
                  ALLOC
  6 .m_usb_data   00000354  40100000  40100000  00020000  2**9
                  ALLOC
  7 .data_RAM2    00000000  40100354  40100354  00018ac8  2**2
                  CONTENTS
  8 .noinit_RAM2  00000000  40100354  40100354  00018ac8  2**2
                  CONTENTS
  9 .ARM.attributes 0000002e  00000000  00000000  00018ac8  2**0
                  CONTENTS, READONLY
 10 .comment      0000007c  00000000  00000000  00018af6  2**0
                  CONTENTS, READONLY
 11 .debug_line   000043cd  00000000  00000000  00018b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000aad2  00000000  00000000  0001cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b77  00000000  00000000  00027a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f0  00000000  00000000  00029bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ebfb  00000000  00000000  0002a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000633f5  00000000  00000000  00038cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00001160  00000000  00000000  0009c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <__udivsi3>:
     410:	2200      	movs	r2, #0
     412:	0843      	lsrs	r3, r0, #1
     414:	428b      	cmp	r3, r1
     416:	d374      	bcc.n	502 <__udivsi3+0xf2>
     418:	0903      	lsrs	r3, r0, #4
     41a:	428b      	cmp	r3, r1
     41c:	d35f      	bcc.n	4de <__udivsi3+0xce>
     41e:	0a03      	lsrs	r3, r0, #8
     420:	428b      	cmp	r3, r1
     422:	d344      	bcc.n	4ae <__udivsi3+0x9e>
     424:	0b03      	lsrs	r3, r0, #12
     426:	428b      	cmp	r3, r1
     428:	d328      	bcc.n	47c <__udivsi3+0x6c>
     42a:	0c03      	lsrs	r3, r0, #16
     42c:	428b      	cmp	r3, r1
     42e:	d30d      	bcc.n	44c <__udivsi3+0x3c>
     430:	22ff      	movs	r2, #255	; 0xff
     432:	0209      	lsls	r1, r1, #8
     434:	ba12      	rev	r2, r2
     436:	0c03      	lsrs	r3, r0, #16
     438:	428b      	cmp	r3, r1
     43a:	d302      	bcc.n	442 <__udivsi3+0x32>
     43c:	1212      	asrs	r2, r2, #8
     43e:	0209      	lsls	r1, r1, #8
     440:	d065      	beq.n	50e <__udivsi3+0xfe>
     442:	0b03      	lsrs	r3, r0, #12
     444:	428b      	cmp	r3, r1
     446:	d319      	bcc.n	47c <__udivsi3+0x6c>
     448:	e000      	b.n	44c <__udivsi3+0x3c>
     44a:	0a09      	lsrs	r1, r1, #8
     44c:	0bc3      	lsrs	r3, r0, #15
     44e:	428b      	cmp	r3, r1
     450:	d301      	bcc.n	456 <__udivsi3+0x46>
     452:	03cb      	lsls	r3, r1, #15
     454:	1ac0      	subs	r0, r0, r3
     456:	4152      	adcs	r2, r2
     458:	0b83      	lsrs	r3, r0, #14
     45a:	428b      	cmp	r3, r1
     45c:	d301      	bcc.n	462 <__udivsi3+0x52>
     45e:	038b      	lsls	r3, r1, #14
     460:	1ac0      	subs	r0, r0, r3
     462:	4152      	adcs	r2, r2
     464:	0b43      	lsrs	r3, r0, #13
     466:	428b      	cmp	r3, r1
     468:	d301      	bcc.n	46e <__udivsi3+0x5e>
     46a:	034b      	lsls	r3, r1, #13
     46c:	1ac0      	subs	r0, r0, r3
     46e:	4152      	adcs	r2, r2
     470:	0b03      	lsrs	r3, r0, #12
     472:	428b      	cmp	r3, r1
     474:	d301      	bcc.n	47a <__udivsi3+0x6a>
     476:	030b      	lsls	r3, r1, #12
     478:	1ac0      	subs	r0, r0, r3
     47a:	4152      	adcs	r2, r2
     47c:	0ac3      	lsrs	r3, r0, #11
     47e:	428b      	cmp	r3, r1
     480:	d301      	bcc.n	486 <__udivsi3+0x76>
     482:	02cb      	lsls	r3, r1, #11
     484:	1ac0      	subs	r0, r0, r3
     486:	4152      	adcs	r2, r2
     488:	0a83      	lsrs	r3, r0, #10
     48a:	428b      	cmp	r3, r1
     48c:	d301      	bcc.n	492 <__udivsi3+0x82>
     48e:	028b      	lsls	r3, r1, #10
     490:	1ac0      	subs	r0, r0, r3
     492:	4152      	adcs	r2, r2
     494:	0a43      	lsrs	r3, r0, #9
     496:	428b      	cmp	r3, r1
     498:	d301      	bcc.n	49e <__udivsi3+0x8e>
     49a:	024b      	lsls	r3, r1, #9
     49c:	1ac0      	subs	r0, r0, r3
     49e:	4152      	adcs	r2, r2
     4a0:	0a03      	lsrs	r3, r0, #8
     4a2:	428b      	cmp	r3, r1
     4a4:	d301      	bcc.n	4aa <__udivsi3+0x9a>
     4a6:	020b      	lsls	r3, r1, #8
     4a8:	1ac0      	subs	r0, r0, r3
     4aa:	4152      	adcs	r2, r2
     4ac:	d2cd      	bcs.n	44a <__udivsi3+0x3a>
     4ae:	09c3      	lsrs	r3, r0, #7
     4b0:	428b      	cmp	r3, r1
     4b2:	d301      	bcc.n	4b8 <__udivsi3+0xa8>
     4b4:	01cb      	lsls	r3, r1, #7
     4b6:	1ac0      	subs	r0, r0, r3
     4b8:	4152      	adcs	r2, r2
     4ba:	0983      	lsrs	r3, r0, #6
     4bc:	428b      	cmp	r3, r1
     4be:	d301      	bcc.n	4c4 <__udivsi3+0xb4>
     4c0:	018b      	lsls	r3, r1, #6
     4c2:	1ac0      	subs	r0, r0, r3
     4c4:	4152      	adcs	r2, r2
     4c6:	0943      	lsrs	r3, r0, #5
     4c8:	428b      	cmp	r3, r1
     4ca:	d301      	bcc.n	4d0 <__udivsi3+0xc0>
     4cc:	014b      	lsls	r3, r1, #5
     4ce:	1ac0      	subs	r0, r0, r3
     4d0:	4152      	adcs	r2, r2
     4d2:	0903      	lsrs	r3, r0, #4
     4d4:	428b      	cmp	r3, r1
     4d6:	d301      	bcc.n	4dc <__udivsi3+0xcc>
     4d8:	010b      	lsls	r3, r1, #4
     4da:	1ac0      	subs	r0, r0, r3
     4dc:	4152      	adcs	r2, r2
     4de:	08c3      	lsrs	r3, r0, #3
     4e0:	428b      	cmp	r3, r1
     4e2:	d301      	bcc.n	4e8 <__udivsi3+0xd8>
     4e4:	00cb      	lsls	r3, r1, #3
     4e6:	1ac0      	subs	r0, r0, r3
     4e8:	4152      	adcs	r2, r2
     4ea:	0883      	lsrs	r3, r0, #2
     4ec:	428b      	cmp	r3, r1
     4ee:	d301      	bcc.n	4f4 <__udivsi3+0xe4>
     4f0:	008b      	lsls	r3, r1, #2
     4f2:	1ac0      	subs	r0, r0, r3
     4f4:	4152      	adcs	r2, r2
     4f6:	0843      	lsrs	r3, r0, #1
     4f8:	428b      	cmp	r3, r1
     4fa:	d301      	bcc.n	500 <__udivsi3+0xf0>
     4fc:	004b      	lsls	r3, r1, #1
     4fe:	1ac0      	subs	r0, r0, r3
     500:	4152      	adcs	r2, r2
     502:	1a41      	subs	r1, r0, r1
     504:	d200      	bcs.n	508 <__udivsi3+0xf8>
     506:	4601      	mov	r1, r0
     508:	4152      	adcs	r2, r2
     50a:	4610      	mov	r0, r2
     50c:	4770      	bx	lr
     50e:	e7ff      	b.n	510 <__udivsi3+0x100>
     510:	b501      	push	{r0, lr}
     512:	2000      	movs	r0, #0
     514:	f000 f8f0 	bl	6f8 <__aeabi_idiv0>
     518:	bd02      	pop	{r1, pc}
     51a:	46c0      	nop			; (mov r8, r8)

0000051c <__aeabi_uidivmod>:
     51c:	2900      	cmp	r1, #0
     51e:	d0f7      	beq.n	510 <__udivsi3+0x100>
     520:	e776      	b.n	410 <__udivsi3>
     522:	4770      	bx	lr

00000524 <__divsi3>:
     524:	4603      	mov	r3, r0
     526:	430b      	orrs	r3, r1
     528:	d47f      	bmi.n	62a <__divsi3+0x106>
     52a:	2200      	movs	r2, #0
     52c:	0843      	lsrs	r3, r0, #1
     52e:	428b      	cmp	r3, r1
     530:	d374      	bcc.n	61c <__divsi3+0xf8>
     532:	0903      	lsrs	r3, r0, #4
     534:	428b      	cmp	r3, r1
     536:	d35f      	bcc.n	5f8 <__divsi3+0xd4>
     538:	0a03      	lsrs	r3, r0, #8
     53a:	428b      	cmp	r3, r1
     53c:	d344      	bcc.n	5c8 <__divsi3+0xa4>
     53e:	0b03      	lsrs	r3, r0, #12
     540:	428b      	cmp	r3, r1
     542:	d328      	bcc.n	596 <__divsi3+0x72>
     544:	0c03      	lsrs	r3, r0, #16
     546:	428b      	cmp	r3, r1
     548:	d30d      	bcc.n	566 <__divsi3+0x42>
     54a:	22ff      	movs	r2, #255	; 0xff
     54c:	0209      	lsls	r1, r1, #8
     54e:	ba12      	rev	r2, r2
     550:	0c03      	lsrs	r3, r0, #16
     552:	428b      	cmp	r3, r1
     554:	d302      	bcc.n	55c <__divsi3+0x38>
     556:	1212      	asrs	r2, r2, #8
     558:	0209      	lsls	r1, r1, #8
     55a:	d065      	beq.n	628 <__divsi3+0x104>
     55c:	0b03      	lsrs	r3, r0, #12
     55e:	428b      	cmp	r3, r1
     560:	d319      	bcc.n	596 <__divsi3+0x72>
     562:	e000      	b.n	566 <__divsi3+0x42>
     564:	0a09      	lsrs	r1, r1, #8
     566:	0bc3      	lsrs	r3, r0, #15
     568:	428b      	cmp	r3, r1
     56a:	d301      	bcc.n	570 <__divsi3+0x4c>
     56c:	03cb      	lsls	r3, r1, #15
     56e:	1ac0      	subs	r0, r0, r3
     570:	4152      	adcs	r2, r2
     572:	0b83      	lsrs	r3, r0, #14
     574:	428b      	cmp	r3, r1
     576:	d301      	bcc.n	57c <__divsi3+0x58>
     578:	038b      	lsls	r3, r1, #14
     57a:	1ac0      	subs	r0, r0, r3
     57c:	4152      	adcs	r2, r2
     57e:	0b43      	lsrs	r3, r0, #13
     580:	428b      	cmp	r3, r1
     582:	d301      	bcc.n	588 <__divsi3+0x64>
     584:	034b      	lsls	r3, r1, #13
     586:	1ac0      	subs	r0, r0, r3
     588:	4152      	adcs	r2, r2
     58a:	0b03      	lsrs	r3, r0, #12
     58c:	428b      	cmp	r3, r1
     58e:	d301      	bcc.n	594 <__divsi3+0x70>
     590:	030b      	lsls	r3, r1, #12
     592:	1ac0      	subs	r0, r0, r3
     594:	4152      	adcs	r2, r2
     596:	0ac3      	lsrs	r3, r0, #11
     598:	428b      	cmp	r3, r1
     59a:	d301      	bcc.n	5a0 <__divsi3+0x7c>
     59c:	02cb      	lsls	r3, r1, #11
     59e:	1ac0      	subs	r0, r0, r3
     5a0:	4152      	adcs	r2, r2
     5a2:	0a83      	lsrs	r3, r0, #10
     5a4:	428b      	cmp	r3, r1
     5a6:	d301      	bcc.n	5ac <__divsi3+0x88>
     5a8:	028b      	lsls	r3, r1, #10
     5aa:	1ac0      	subs	r0, r0, r3
     5ac:	4152      	adcs	r2, r2
     5ae:	0a43      	lsrs	r3, r0, #9
     5b0:	428b      	cmp	r3, r1
     5b2:	d301      	bcc.n	5b8 <__divsi3+0x94>
     5b4:	024b      	lsls	r3, r1, #9
     5b6:	1ac0      	subs	r0, r0, r3
     5b8:	4152      	adcs	r2, r2
     5ba:	0a03      	lsrs	r3, r0, #8
     5bc:	428b      	cmp	r3, r1
     5be:	d301      	bcc.n	5c4 <__divsi3+0xa0>
     5c0:	020b      	lsls	r3, r1, #8
     5c2:	1ac0      	subs	r0, r0, r3
     5c4:	4152      	adcs	r2, r2
     5c6:	d2cd      	bcs.n	564 <__divsi3+0x40>
     5c8:	09c3      	lsrs	r3, r0, #7
     5ca:	428b      	cmp	r3, r1
     5cc:	d301      	bcc.n	5d2 <__divsi3+0xae>
     5ce:	01cb      	lsls	r3, r1, #7
     5d0:	1ac0      	subs	r0, r0, r3
     5d2:	4152      	adcs	r2, r2
     5d4:	0983      	lsrs	r3, r0, #6
     5d6:	428b      	cmp	r3, r1
     5d8:	d301      	bcc.n	5de <__divsi3+0xba>
     5da:	018b      	lsls	r3, r1, #6
     5dc:	1ac0      	subs	r0, r0, r3
     5de:	4152      	adcs	r2, r2
     5e0:	0943      	lsrs	r3, r0, #5
     5e2:	428b      	cmp	r3, r1
     5e4:	d301      	bcc.n	5ea <__divsi3+0xc6>
     5e6:	014b      	lsls	r3, r1, #5
     5e8:	1ac0      	subs	r0, r0, r3
     5ea:	4152      	adcs	r2, r2
     5ec:	0903      	lsrs	r3, r0, #4
     5ee:	428b      	cmp	r3, r1
     5f0:	d301      	bcc.n	5f6 <__divsi3+0xd2>
     5f2:	010b      	lsls	r3, r1, #4
     5f4:	1ac0      	subs	r0, r0, r3
     5f6:	4152      	adcs	r2, r2
     5f8:	08c3      	lsrs	r3, r0, #3
     5fa:	428b      	cmp	r3, r1
     5fc:	d301      	bcc.n	602 <__divsi3+0xde>
     5fe:	00cb      	lsls	r3, r1, #3
     600:	1ac0      	subs	r0, r0, r3
     602:	4152      	adcs	r2, r2
     604:	0883      	lsrs	r3, r0, #2
     606:	428b      	cmp	r3, r1
     608:	d301      	bcc.n	60e <__divsi3+0xea>
     60a:	008b      	lsls	r3, r1, #2
     60c:	1ac0      	subs	r0, r0, r3
     60e:	4152      	adcs	r2, r2
     610:	0843      	lsrs	r3, r0, #1
     612:	428b      	cmp	r3, r1
     614:	d301      	bcc.n	61a <__divsi3+0xf6>
     616:	004b      	lsls	r3, r1, #1
     618:	1ac0      	subs	r0, r0, r3
     61a:	4152      	adcs	r2, r2
     61c:	1a41      	subs	r1, r0, r1
     61e:	d200      	bcs.n	622 <__divsi3+0xfe>
     620:	4601      	mov	r1, r0
     622:	4152      	adcs	r2, r2
     624:	4610      	mov	r0, r2
     626:	4770      	bx	lr
     628:	e05d      	b.n	6e6 <__divsi3+0x1c2>
     62a:	0fca      	lsrs	r2, r1, #31
     62c:	d000      	beq.n	630 <__divsi3+0x10c>
     62e:	4249      	negs	r1, r1
     630:	1003      	asrs	r3, r0, #32
     632:	d300      	bcc.n	636 <__divsi3+0x112>
     634:	4240      	negs	r0, r0
     636:	4053      	eors	r3, r2
     638:	2200      	movs	r2, #0
     63a:	469c      	mov	ip, r3
     63c:	0903      	lsrs	r3, r0, #4
     63e:	428b      	cmp	r3, r1
     640:	d32d      	bcc.n	69e <__divsi3+0x17a>
     642:	0a03      	lsrs	r3, r0, #8
     644:	428b      	cmp	r3, r1
     646:	d312      	bcc.n	66e <__divsi3+0x14a>
     648:	22fc      	movs	r2, #252	; 0xfc
     64a:	0189      	lsls	r1, r1, #6
     64c:	ba12      	rev	r2, r2
     64e:	0a03      	lsrs	r3, r0, #8
     650:	428b      	cmp	r3, r1
     652:	d30c      	bcc.n	66e <__divsi3+0x14a>
     654:	0189      	lsls	r1, r1, #6
     656:	1192      	asrs	r2, r2, #6
     658:	428b      	cmp	r3, r1
     65a:	d308      	bcc.n	66e <__divsi3+0x14a>
     65c:	0189      	lsls	r1, r1, #6
     65e:	1192      	asrs	r2, r2, #6
     660:	428b      	cmp	r3, r1
     662:	d304      	bcc.n	66e <__divsi3+0x14a>
     664:	0189      	lsls	r1, r1, #6
     666:	d03a      	beq.n	6de <__divsi3+0x1ba>
     668:	1192      	asrs	r2, r2, #6
     66a:	e000      	b.n	66e <__divsi3+0x14a>
     66c:	0989      	lsrs	r1, r1, #6
     66e:	09c3      	lsrs	r3, r0, #7
     670:	428b      	cmp	r3, r1
     672:	d301      	bcc.n	678 <__divsi3+0x154>
     674:	01cb      	lsls	r3, r1, #7
     676:	1ac0      	subs	r0, r0, r3
     678:	4152      	adcs	r2, r2
     67a:	0983      	lsrs	r3, r0, #6
     67c:	428b      	cmp	r3, r1
     67e:	d301      	bcc.n	684 <__divsi3+0x160>
     680:	018b      	lsls	r3, r1, #6
     682:	1ac0      	subs	r0, r0, r3
     684:	4152      	adcs	r2, r2
     686:	0943      	lsrs	r3, r0, #5
     688:	428b      	cmp	r3, r1
     68a:	d301      	bcc.n	690 <__divsi3+0x16c>
     68c:	014b      	lsls	r3, r1, #5
     68e:	1ac0      	subs	r0, r0, r3
     690:	4152      	adcs	r2, r2
     692:	0903      	lsrs	r3, r0, #4
     694:	428b      	cmp	r3, r1
     696:	d301      	bcc.n	69c <__divsi3+0x178>
     698:	010b      	lsls	r3, r1, #4
     69a:	1ac0      	subs	r0, r0, r3
     69c:	4152      	adcs	r2, r2
     69e:	08c3      	lsrs	r3, r0, #3
     6a0:	428b      	cmp	r3, r1
     6a2:	d301      	bcc.n	6a8 <__divsi3+0x184>
     6a4:	00cb      	lsls	r3, r1, #3
     6a6:	1ac0      	subs	r0, r0, r3
     6a8:	4152      	adcs	r2, r2
     6aa:	0883      	lsrs	r3, r0, #2
     6ac:	428b      	cmp	r3, r1
     6ae:	d301      	bcc.n	6b4 <__divsi3+0x190>
     6b0:	008b      	lsls	r3, r1, #2
     6b2:	1ac0      	subs	r0, r0, r3
     6b4:	4152      	adcs	r2, r2
     6b6:	d2d9      	bcs.n	66c <__divsi3+0x148>
     6b8:	0843      	lsrs	r3, r0, #1
     6ba:	428b      	cmp	r3, r1
     6bc:	d301      	bcc.n	6c2 <__divsi3+0x19e>
     6be:	004b      	lsls	r3, r1, #1
     6c0:	1ac0      	subs	r0, r0, r3
     6c2:	4152      	adcs	r2, r2
     6c4:	1a41      	subs	r1, r0, r1
     6c6:	d200      	bcs.n	6ca <__divsi3+0x1a6>
     6c8:	4601      	mov	r1, r0
     6ca:	4663      	mov	r3, ip
     6cc:	4152      	adcs	r2, r2
     6ce:	105b      	asrs	r3, r3, #1
     6d0:	4610      	mov	r0, r2
     6d2:	d301      	bcc.n	6d8 <__divsi3+0x1b4>
     6d4:	4240      	negs	r0, r0
     6d6:	2b00      	cmp	r3, #0
     6d8:	d500      	bpl.n	6dc <__divsi3+0x1b8>
     6da:	4249      	negs	r1, r1
     6dc:	4770      	bx	lr
     6de:	4663      	mov	r3, ip
     6e0:	105b      	asrs	r3, r3, #1
     6e2:	d300      	bcc.n	6e6 <__divsi3+0x1c2>
     6e4:	4240      	negs	r0, r0
     6e6:	b501      	push	{r0, lr}
     6e8:	2000      	movs	r0, #0
     6ea:	f000 f805 	bl	6f8 <__aeabi_idiv0>
     6ee:	bd02      	pop	{r1, pc}

000006f0 <__aeabi_idivmod>:
     6f0:	2900      	cmp	r1, #0
     6f2:	d0f8      	beq.n	6e6 <__divsi3+0x1c2>
     6f4:	e716      	b.n	524 <__divsi3>
     6f6:	4770      	bx	lr

000006f8 <__aeabi_idiv0>:
     6f8:	4770      	bx	lr
     6fa:	46c0      	nop			; (mov r8, r8)

000006fc <Reset_Handler>:
     6fc:	f000 f828 	bl	750 <SystemInit>
     700:	480b      	ldr	r0, [pc, #44]	; (730 <stop+0x4>)
     702:	490c      	ldr	r1, [pc, #48]	; (734 <stop+0x8>)
     704:	4a0c      	ldr	r2, [pc, #48]	; (738 <stop+0xc>)
     706:	1a12      	subs	r2, r2, r0
     708:	f003 fbfa 	bl	3f00 <memcpy>
     70c:	480b      	ldr	r0, [pc, #44]	; (73c <stop+0x10>)
     70e:	2100      	movs	r1, #0
     710:	4a0b      	ldr	r2, [pc, #44]	; (740 <stop+0x14>)
     712:	1a12      	subs	r2, r2, r0
     714:	f003 fbfb 	bl	3f0e <memset>
     718:	480a      	ldr	r0, [pc, #40]	; (744 <stop+0x18>)
     71a:	21a5      	movs	r1, #165	; 0xa5
     71c:	4a0a      	ldr	r2, [pc, #40]	; (748 <stop+0x1c>)
     71e:	1a12      	subs	r2, r2, r0
     720:	f003 fbf5 	bl	3f0e <memset>
     724:	f000 f8b4 	bl	890 <SystemCoreClockUpdate>
     728:	f004 fa42 	bl	4bb0 <main>

0000072c <stop>:
     72c:	e7fe      	b.n	72c <stop>
     72e:	0000      	.short	0x0000
     730:	1fff8800 	.word	0x1fff8800
     734:	000050cc 	.word	0x000050cc
     738:	1fff8ac8 	.word	0x1fff8ac8
     73c:	1fff8ac8 	.word	0x1fff8ac8
     740:	1fff8ce6 	.word	0x1fff8ce6
     744:	1fff8000 	.word	0x1fff8000
     748:	1fff8800 	.word	0x1fff8800

0000074c <ADC0_IRQHandler>:
     74c:	be00      	bkpt	0x0000
     74e:	e7fd      	b.n	74c <ADC0_IRQHandler>

00000750 <SystemInit>:
#include "MKL28Z7.h"

volatile uint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;

void SystemInit(void)
{
     750:	b580      	push	{r7, lr}
     752:	af00      	add	r7, sp, #0
	WDOG0->TOVAL = WDOG_TOVAL_VAL_BOOT;
     754:	4b44      	ldr	r3, [pc, #272]	; (868 <STACK_SIZE+0x68>)
     756:	22fa      	movs	r2, #250	; 0xfa
     758:	0092      	lsls	r2, r2, #2
     75a:	609a      	str	r2, [r3, #8]
	WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_PRES_VAL_BOOT | WDOG_CS_CLK_VAL_BOOT |
     75c:	4b42      	ldr	r3, [pc, #264]	; (868 <STACK_SIZE+0x68>)
     75e:	4a43      	ldr	r2, [pc, #268]	; (86c <STACK_SIZE+0x6c>)
     760:	601a      	str	r2, [r3, #0]
				WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;

	SCG->SOSCDIV = SCG_SOSCDIV_DIV3_VAL | SCG_SOSCDIV_DIV1_VAL;
     762:	4943      	ldr	r1, [pc, #268]	; (870 <STACK_SIZE+0x70>)
     764:	2382      	movs	r3, #130	; 0x82
     766:	005b      	lsls	r3, r3, #1
     768:	2280      	movs	r2, #128	; 0x80
     76a:	0252      	lsls	r2, r2, #9
     76c:	50ca      	str	r2, [r1, r3]
	SCG->SOSCCFG = SCG_SOSCCFG_SCXP_VAL | SCG_SOSCCFG_RANGE_VAL | SCG_SOSCCFG_EREFS_MASK;
     76e:	4a40      	ldr	r2, [pc, #256]	; (870 <STACK_SIZE+0x70>)
     770:	2384      	movs	r3, #132	; 0x84
     772:	005b      	lsls	r3, r3, #1
     774:	493f      	ldr	r1, [pc, #252]	; (874 <STACK_SIZE+0x74>)
     776:	50d1      	str	r1, [r2, r3]
	SCG->SOSCCSR = SCG_SOSCCSR_SOSCERCLKEN_MASK |
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <STACK_SIZE+0x70>)
     77a:	2380      	movs	r3, #128	; 0x80
     77c:	005b      	lsls	r3, r3, #1
     77e:	210f      	movs	r1, #15
     780:	50d1      	str	r1, [r2, r3]
					SCG_SOSCCSR_SOSCLPEN_MASK |
					SCG_SOSCCSR_SOSCSTEN_MASK	 |
					SCG_SOSCCSR_SOSCEN_MASK;
	while (!(SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK));
     782:	46c0      	nop			; (mov r8, r8)
     784:	4a3a      	ldr	r2, [pc, #232]	; (870 <STACK_SIZE+0x70>)
     786:	2380      	movs	r3, #128	; 0x80
     788:	005b      	lsls	r3, r3, #1
     78a:	58d2      	ldr	r2, [r2, r3]
     78c:	2380      	movs	r3, #128	; 0x80
     78e:	045b      	lsls	r3, r3, #17
     790:	4013      	ands	r3, r2
     792:	d0f7      	beq.n	784 <SystemInit+0x34>


	SCG->FIRCDIV = SCG_FIRCDIV_DIV3_VAL | SCG_FIRCDIV_DIV1_VAL;
     794:	4a36      	ldr	r2, [pc, #216]	; (870 <STACK_SIZE+0x70>)
     796:	23c1      	movs	r3, #193	; 0xc1
     798:	009b      	lsls	r3, r3, #2
     79a:	4937      	ldr	r1, [pc, #220]	; (878 <STACK_SIZE+0x78>)
     79c:	50d1      	str	r1, [r2, r3]
	SCG->FIRCCFG = SCG_FIRCCFG_RANGE_VAL;
     79e:	4a34      	ldr	r2, [pc, #208]	; (870 <STACK_SIZE+0x70>)
     7a0:	23c2      	movs	r3, #194	; 0xc2
     7a2:	009b      	lsls	r3, r3, #2
     7a4:	2100      	movs	r1, #0
     7a6:	50d1      	str	r1, [r2, r3]
	SCG->FIRCCSR = SCG_FIRCCSR_FIRCLPEN_MASK |
     7a8:	4a31      	ldr	r2, [pc, #196]	; (870 <STACK_SIZE+0x70>)
     7aa:	23c0      	movs	r3, #192	; 0xc0
     7ac:	009b      	lsls	r3, r3, #2
     7ae:	2107      	movs	r1, #7
     7b0:	50d1      	str	r1, [r2, r3]
					SCG_FIRCCSR_FIRCSTEN_MASK |
					SCG_FIRCCSR_FIRCEN_MASK;
	while (!(SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK));
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	4a2e      	ldr	r2, [pc, #184]	; (870 <STACK_SIZE+0x70>)
     7b6:	23c0      	movs	r3, #192	; 0xc0
     7b8:	009b      	lsls	r3, r3, #2
     7ba:	58d2      	ldr	r2, [r2, r3]
     7bc:	2380      	movs	r3, #128	; 0x80
     7be:	045b      	lsls	r3, r3, #17
     7c0:	4013      	ands	r3, r2
     7c2:	d0f7      	beq.n	7b4 <SystemInit+0x64>

	SCG->SPLLDIV = SCG_SPLLDIV_DIV3_VAL | SCG_SPLLDIV_DIV1_VAL;
     7c4:	492a      	ldr	r1, [pc, #168]	; (870 <STACK_SIZE+0x70>)
     7c6:	4a2d      	ldr	r2, [pc, #180]	; (87c <STACK_SIZE+0x7c>)
     7c8:	23c0      	movs	r3, #192	; 0xc0
     7ca:	029b      	lsls	r3, r3, #10
     7cc:	508b      	str	r3, [r1, r2]
	SCG->SPLLCFG = SCG_SPLLCFG_MULT_VAL | SCG_SPLLCFG_PREDIV_VAL | SCG_SPLLCFG_SOURCE_MASK;
     7ce:	4a28      	ldr	r2, [pc, #160]	; (870 <STACK_SIZE+0x70>)
     7d0:	23c1      	movs	r3, #193	; 0xc1
     7d2:	00db      	lsls	r3, r3, #3
     7d4:	492a      	ldr	r1, [pc, #168]	; (880 <STACK_SIZE+0x80>)
     7d6:	50d1      	str	r1, [r2, r3]
	SCG->SPLLCSR = SCG_SPLLCSR_SPLLERR_MASK |
     7d8:	4a25      	ldr	r2, [pc, #148]	; (870 <STACK_SIZE+0x70>)
     7da:	23c0      	movs	r3, #192	; 0xc0
     7dc:	00db      	lsls	r3, r3, #3
     7de:	4929      	ldr	r1, [pc, #164]	; (884 <STACK_SIZE+0x84>)
     7e0:	50d1      	str	r1, [r2, r3]
					SCG_SPLLCSR_SPLLCMRE_MASK |
					SCG_SPLLCSR_SPLLCM_MASK |
					SCG_SPLLCSR_SPLLSTEN_MASK |
					SCG_SPLLCSR_SPLLEN_MASK;
	while (!(SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK));
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	4a22      	ldr	r2, [pc, #136]	; (870 <STACK_SIZE+0x70>)
     7e6:	23c0      	movs	r3, #192	; 0xc0
     7e8:	00db      	lsls	r3, r3, #3
     7ea:	58d2      	ldr	r2, [r2, r3]
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	045b      	lsls	r3, r3, #17
     7f0:	4013      	ands	r3, r2
     7f2:	d0f7      	beq.n	7e4 <SystemInit+0x94>
	//0300 0001
	SCG->RCCR = SCG_CCRCSR_SCS_VAL_SPLL | SCG_CCRCSR_DIVCORE_RUN_VAL | SCG_CCRCSR_DIVSLOW_RUN_VAL;
     7f4:	4b1e      	ldr	r3, [pc, #120]	; (870 <STACK_SIZE+0x70>)
     7f6:	4a24      	ldr	r2, [pc, #144]	; (888 <STACK_SIZE+0x88>)
     7f8:	615a      	str	r2, [r3, #20]
	while ((SCG->CSR & SCG_CSR_SCS_MASK) != SCG_CCRCSR_SCS_VAL_SPLL );
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	4b1c      	ldr	r3, [pc, #112]	; (870 <STACK_SIZE+0x70>)
     7fe:	691a      	ldr	r2, [r3, #16]
     800:	23f0      	movs	r3, #240	; 0xf0
     802:	051b      	lsls	r3, r3, #20
     804:	401a      	ands	r2, r3
     806:	23c0      	movs	r3, #192	; 0xc0
     808:	04db      	lsls	r3, r3, #19
     80a:	429a      	cmp	r2, r3
     80c:	d1f6      	bne.n	7fc <SystemInit+0xac>

	SCG->SIRCCSR = 0;
     80e:	4a18      	ldr	r2, [pc, #96]	; (870 <STACK_SIZE+0x70>)
     810:	2380      	movs	r3, #128	; 0x80
     812:	009b      	lsls	r3, r3, #2
     814:	2100      	movs	r1, #0
     816:	50d1      	str	r1, [r2, r3]
	while (SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK);
     818:	46c0      	nop			; (mov r8, r8)
     81a:	4a15      	ldr	r2, [pc, #84]	; (870 <STACK_SIZE+0x70>)
     81c:	2380      	movs	r3, #128	; 0x80
     81e:	009b      	lsls	r3, r3, #2
     820:	58d2      	ldr	r2, [r2, r3]
     822:	2380      	movs	r3, #128	; 0x80
     824:	045b      	lsls	r3, r3, #17
     826:	4013      	ands	r3, r2
     828:	d1f7      	bne.n	81a <STACK_SIZE+0x1a>
	SCG->SIRCDIV = SCG_SIRCDIV_DIV3_VAL | SCG_SIRCDIV_DIV1_VAL;
     82a:	4911      	ldr	r1, [pc, #68]	; (870 <STACK_SIZE+0x70>)
     82c:	2381      	movs	r3, #129	; 0x81
     82e:	009b      	lsls	r3, r3, #2
     830:	2280      	movs	r2, #128	; 0x80
     832:	0252      	lsls	r2, r2, #9
     834:	50ca      	str	r2, [r1, r3]
	SCG->SIRCCFG = SCG_SIRCCFG_RANGE_VAL;
     836:	4a0e      	ldr	r2, [pc, #56]	; (870 <STACK_SIZE+0x70>)
     838:	2382      	movs	r3, #130	; 0x82
     83a:	009b      	lsls	r3, r3, #2
     83c:	2101      	movs	r1, #1
     83e:	50d1      	str	r1, [r2, r3]
	SCG->SIRCCSR = SCG_SIRCCSR_SIRCLPEN_MASK |
     840:	4a0b      	ldr	r2, [pc, #44]	; (870 <STACK_SIZE+0x70>)
     842:	2380      	movs	r3, #128	; 0x80
     844:	009b      	lsls	r3, r3, #2
     846:	2107      	movs	r1, #7
     848:	50d1      	str	r1, [r2, r3]
					SCG_SIRCCSR_SIRCSTEN_MASK |
					SCG_SIRCCSR_SIRCEN_MASK;
	while (!(SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK));
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	4a08      	ldr	r2, [pc, #32]	; (870 <STACK_SIZE+0x70>)
     84e:	2380      	movs	r3, #128	; 0x80
     850:	009b      	lsls	r3, r3, #2
     852:	58d2      	ldr	r2, [r2, r3]
     854:	2380      	movs	r3, #128	; 0x80
     856:	045b      	lsls	r3, r3, #17
     858:	4013      	ands	r3, r2
     85a:	d0f7      	beq.n	84c <STACK_SIZE+0x4c>

	SCG->VCCR = SCG_CCRCSR_SCS_VAL_SIRC | SCG_CCRCSR_DIVCORE_VLPR_VAL | SCG_CCRCSR_DIVSLOW_VLPR_VAL;
     85c:	4b04      	ldr	r3, [pc, #16]	; (870 <STACK_SIZE+0x70>)
     85e:	4a0b      	ldr	r2, [pc, #44]	; (88c <STACK_SIZE+0x8c>)
     860:	619a      	str	r2, [r3, #24]
}
     862:	46c0      	nop			; (mov r8, r8)
     864:	46bd      	mov	sp, r7
     866:	bd80      	pop	{r7, pc}
     868:	40076000 	.word	0x40076000
     86c:	000021a0 	.word	0x000021a0
     870:	4007b000 	.word	0x4007b000
     874:	00000c14 	.word	0x00000c14
     878:	00010001 	.word	0x00010001
     87c:	00000604 	.word	0x00000604
     880:	00080301 	.word	0x00080301
     884:	04030003 	.word	0x04030003
     888:	06010002 	.word	0x06010002
     88c:	02000003 	.word	0x02000003

00000890 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
     890:	b580      	push	{r7, lr}
     892:	b084      	sub	sp, #16
     894:	af00      	add	r7, sp, #0
	uint32_t SCGOUTClock;                                 /* Variable to store output clock frequency of the SCG module */
	  uint16_t Divider, prediv, multi;
	  Divider = ((SCG->CSR & SCG_CSR_DIVCORE_MASK) >> SCG_CSR_DIVCORE_SHIFT) + 1;
     896:	4b41      	ldr	r3, [pc, #260]	; (99c <SystemCoreClockUpdate+0x10c>)
     898:	691b      	ldr	r3, [r3, #16]
     89a:	0c1b      	lsrs	r3, r3, #16
     89c:	b29b      	uxth	r3, r3
     89e:	220f      	movs	r2, #15
     8a0:	4013      	ands	r3, r2
     8a2:	b29a      	uxth	r2, r3
     8a4:	230a      	movs	r3, #10
     8a6:	18fb      	adds	r3, r7, r3
     8a8:	3201      	adds	r2, #1
     8aa:	801a      	strh	r2, [r3, #0]

	  switch ((SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) {
     8ac:	4b3b      	ldr	r3, [pc, #236]	; (99c <SystemCoreClockUpdate+0x10c>)
     8ae:	691b      	ldr	r3, [r3, #16]
     8b0:	0e1b      	lsrs	r3, r3, #24
     8b2:	220f      	movs	r2, #15
     8b4:	4013      	ands	r3, r2
     8b6:	2b02      	cmp	r3, #2
     8b8:	d00b      	beq.n	8d2 <SystemCoreClockUpdate+0x42>
     8ba:	d802      	bhi.n	8c2 <SystemCoreClockUpdate+0x32>
     8bc:	2b01      	cmp	r3, #1
     8be:	d005      	beq.n	8cc <SystemCoreClockUpdate+0x3c>
	      prediv = ((SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT) + 1;
	      multi = ((SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT) + 16;
	      SCGOUTClock = SCGOUTClock * multi / (prediv * 2);
	      break;
	    default:
	      return;
     8c0:	e069      	b.n	996 <SystemCoreClockUpdate+0x106>
	  switch ((SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) {
     8c2:	2b03      	cmp	r3, #3
     8c4:	d011      	beq.n	8ea <SystemCoreClockUpdate+0x5a>
     8c6:	2b06      	cmp	r3, #6
     8c8:	d01c      	beq.n	904 <SystemCoreClockUpdate+0x74>
	      return;
     8ca:	e064      	b.n	996 <SystemCoreClockUpdate+0x106>
	      SCGOUTClock = CPU_INT_SLOW_CLK_HZ;
     8cc:	4b34      	ldr	r3, [pc, #208]	; (9a0 <SystemCoreClockUpdate+0x110>)
     8ce:	60fb      	str	r3, [r7, #12]
	      break;
     8d0:	e056      	b.n	980 <SystemCoreClockUpdate+0xf0>
	      SCGOUTClock = (((SCG->SIRCCFG & SCG_SIRCCFG_RANGE_MASK) >> SCG_SIRCCFG_RANGE_SHIFT) ? 8000000 : 2000000);
     8d2:	4a32      	ldr	r2, [pc, #200]	; (99c <SystemCoreClockUpdate+0x10c>)
     8d4:	2382      	movs	r3, #130	; 0x82
     8d6:	009b      	lsls	r3, r3, #2
     8d8:	58d3      	ldr	r3, [r2, r3]
     8da:	2201      	movs	r2, #1
     8dc:	4013      	ands	r3, r2
     8de:	d001      	beq.n	8e4 <SystemCoreClockUpdate+0x54>
     8e0:	4b30      	ldr	r3, [pc, #192]	; (9a4 <SystemCoreClockUpdate+0x114>)
     8e2:	e000      	b.n	8e6 <SystemCoreClockUpdate+0x56>
     8e4:	4b30      	ldr	r3, [pc, #192]	; (9a8 <SystemCoreClockUpdate+0x118>)
     8e6:	60fb      	str	r3, [r7, #12]
	      break;
     8e8:	e04a      	b.n	980 <SystemCoreClockUpdate+0xf0>
	      SCGOUTClock = 48000000 + ((SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT) * 4000000;
     8ea:	4a2c      	ldr	r2, [pc, #176]	; (99c <SystemCoreClockUpdate+0x10c>)
     8ec:	23c2      	movs	r3, #194	; 0xc2
     8ee:	009b      	lsls	r3, r3, #2
     8f0:	58d3      	ldr	r3, [r2, r3]
     8f2:	2203      	movs	r2, #3
     8f4:	4013      	ands	r3, r2
     8f6:	4a2a      	ldr	r2, [pc, #168]	; (9a0 <SystemCoreClockUpdate+0x110>)
     8f8:	4353      	muls	r3, r2
     8fa:	4a2c      	ldr	r2, [pc, #176]	; (9ac <SystemCoreClockUpdate+0x11c>)
     8fc:	4694      	mov	ip, r2
     8fe:	4463      	add	r3, ip
     900:	60fb      	str	r3, [r7, #12]
	      break;
     902:	e03d      	b.n	980 <SystemCoreClockUpdate+0xf0>
	      if ((SCG->SPLLCFG & SCG_SPLLCFG_SOURCE_MASK) >> SCG_SPLLCFG_SOURCE_SHIFT) {
     904:	4a25      	ldr	r2, [pc, #148]	; (99c <SystemCoreClockUpdate+0x10c>)
     906:	23c1      	movs	r3, #193	; 0xc1
     908:	00db      	lsls	r3, r3, #3
     90a:	58d3      	ldr	r3, [r2, r3]
     90c:	2201      	movs	r2, #1
     90e:	4013      	ands	r3, r2
     910:	d00c      	beq.n	92c <SystemCoreClockUpdate+0x9c>
	        SCGOUTClock = 48000000 + ((SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT) * 4000000;
     912:	4a22      	ldr	r2, [pc, #136]	; (99c <SystemCoreClockUpdate+0x10c>)
     914:	23c2      	movs	r3, #194	; 0xc2
     916:	009b      	lsls	r3, r3, #2
     918:	58d3      	ldr	r3, [r2, r3]
     91a:	2203      	movs	r2, #3
     91c:	4013      	ands	r3, r2
     91e:	4a20      	ldr	r2, [pc, #128]	; (9a0 <SystemCoreClockUpdate+0x110>)
     920:	4353      	muls	r3, r2
     922:	4a22      	ldr	r2, [pc, #136]	; (9ac <SystemCoreClockUpdate+0x11c>)
     924:	4694      	mov	ip, r2
     926:	4463      	add	r3, ip
     928:	60fb      	str	r3, [r7, #12]
     92a:	e001      	b.n	930 <SystemCoreClockUpdate+0xa0>
	        SCGOUTClock = CPU_INT_SLOW_CLK_HZ;
     92c:	4b1c      	ldr	r3, [pc, #112]	; (9a0 <SystemCoreClockUpdate+0x110>)
     92e:	60fb      	str	r3, [r7, #12]
	      prediv = ((SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT) + 1;
     930:	4a1a      	ldr	r2, [pc, #104]	; (99c <SystemCoreClockUpdate+0x10c>)
     932:	23c1      	movs	r3, #193	; 0xc1
     934:	00db      	lsls	r3, r3, #3
     936:	58d3      	ldr	r3, [r2, r3]
     938:	0a1b      	lsrs	r3, r3, #8
     93a:	b29b      	uxth	r3, r3
     93c:	2207      	movs	r2, #7
     93e:	4013      	ands	r3, r2
     940:	b29a      	uxth	r2, r3
     942:	2308      	movs	r3, #8
     944:	18fb      	adds	r3, r7, r3
     946:	3201      	adds	r2, #1
     948:	801a      	strh	r2, [r3, #0]
	      multi = ((SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT) + 16;
     94a:	4a14      	ldr	r2, [pc, #80]	; (99c <SystemCoreClockUpdate+0x10c>)
     94c:	23c1      	movs	r3, #193	; 0xc1
     94e:	00db      	lsls	r3, r3, #3
     950:	58d3      	ldr	r3, [r2, r3]
     952:	0c1b      	lsrs	r3, r3, #16
     954:	b29b      	uxth	r3, r3
     956:	221f      	movs	r2, #31
     958:	4013      	ands	r3, r2
     95a:	b29a      	uxth	r2, r3
     95c:	1dbb      	adds	r3, r7, #6
     95e:	3210      	adds	r2, #16
     960:	801a      	strh	r2, [r3, #0]
	      SCGOUTClock = SCGOUTClock * multi / (prediv * 2);
     962:	1dbb      	adds	r3, r7, #6
     964:	881b      	ldrh	r3, [r3, #0]
     966:	68fa      	ldr	r2, [r7, #12]
     968:	435a      	muls	r2, r3
     96a:	2308      	movs	r3, #8
     96c:	18fb      	adds	r3, r7, r3
     96e:	881b      	ldrh	r3, [r3, #0]
     970:	005b      	lsls	r3, r3, #1
     972:	0019      	movs	r1, r3
     974:	0010      	movs	r0, r2
     976:	f7ff fd4b 	bl	410 <__udivsi3>
     97a:	0003      	movs	r3, r0
     97c:	60fb      	str	r3, [r7, #12]
	      break;
     97e:	46c0      	nop			; (mov r8, r8)
	  }

	  SystemCoreClock = (SCGOUTClock / Divider);
     980:	230a      	movs	r3, #10
     982:	18fb      	adds	r3, r7, r3
     984:	881b      	ldrh	r3, [r3, #0]
     986:	0019      	movs	r1, r3
     988:	68f8      	ldr	r0, [r7, #12]
     98a:	f7ff fd41 	bl	410 <__udivsi3>
     98e:	0003      	movs	r3, r0
     990:	001a      	movs	r2, r3
     992:	4b07      	ldr	r3, [pc, #28]	; (9b0 <SystemCoreClockUpdate+0x120>)
     994:	601a      	str	r2, [r3, #0]
}
     996:	46bd      	mov	sp, r7
     998:	b004      	add	sp, #16
     99a:	bd80      	pop	{r7, pc}
     99c:	4007b000 	.word	0x4007b000
     9a0:	003d0900 	.word	0x003d0900
     9a4:	007a1200 	.word	0x007a1200
     9a8:	001e8480 	.word	0x001e8480
     9ac:	02dc6c00 	.word	0x02dc6c00
     9b0:	1fff8800 	.word	0x1fff8800

000009b4 <USB_DeviceKhciEndpointTransfer>:
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceKhciEndpointTransfer(
    usb_device_khci_state_struct_t *khciState, uint8_t endpoint, uint8_t direction, uint8_t *buffer, uint32_t length)
{
     9b4:	b590      	push	{r4, r7, lr}
     9b6:	b087      	sub	sp, #28
     9b8:	af00      	add	r7, sp, #0
     9ba:	60f8      	str	r0, [r7, #12]
     9bc:	0008      	movs	r0, r1
     9be:	0011      	movs	r1, r2
     9c0:	607b      	str	r3, [r7, #4]
     9c2:	230b      	movs	r3, #11
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	1c02      	adds	r2, r0, #0
     9c8:	701a      	strb	r2, [r3, #0]
     9ca:	230a      	movs	r3, #10
     9cc:	18fb      	adds	r3, r7, r3
     9ce:	1c0a      	adds	r2, r1, #0
     9d0:	701a      	strb	r2, [r3, #0]
    uint32_t index = ((uint32_t)endpoint << 1U) | (uint32_t)direction;
     9d2:	230b      	movs	r3, #11
     9d4:	18fb      	adds	r3, r7, r3
     9d6:	781b      	ldrb	r3, [r3, #0]
     9d8:	005a      	lsls	r2, r3, #1
     9da:	230a      	movs	r3, #10
     9dc:	18fb      	adds	r3, r7, r3
     9de:	781b      	ldrb	r3, [r3, #0]
     9e0:	4313      	orrs	r3, r2
     9e2:	617b      	str	r3, [r7, #20]
    USB_OSA_SR_ALLOC();

    /* Enter critical */
    USB_OSA_ENTER_CRITICAL();
     9e4:	2310      	movs	r3, #16
     9e6:	18fb      	adds	r3, r7, r3
     9e8:	0018      	movs	r0, r3
     9ea:	f002 f8cb 	bl	2b84 <USB_OsaEnterCritical>

    /* Flag the endpoint is busy. */
    khciState->endpointState[index].stateUnion.stateBitField.transferring = 1U;
     9ee:	68fa      	ldr	r2, [r7, #12]
     9f0:	697b      	ldr	r3, [r7, #20]
     9f2:	2128      	movs	r1, #40	; 0x28
     9f4:	011b      	lsls	r3, r3, #4
     9f6:	18d3      	adds	r3, r2, r3
     9f8:	185b      	adds	r3, r3, r1
     9fa:	795a      	ldrb	r2, [r3, #5]
     9fc:	2140      	movs	r1, #64	; 0x40
     9fe:	430a      	orrs	r2, r1
     a00:	715a      	strb	r2, [r3, #5]

    /* Add the data buffer address to the BDT. */
    USB_KHCI_BDT_SET_ADDRESS((uint32_t)khciState->bdt, endpoint, direction,
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	0a5b      	lsrs	r3, r3, #9
     a08:	025a      	lsls	r2, r3, #9
     a0a:	230b      	movs	r3, #11
     a0c:	18fb      	adds	r3, r7, r3
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	0159      	lsls	r1, r3, #5
     a12:	23f0      	movs	r3, #240	; 0xf0
     a14:	005b      	lsls	r3, r3, #1
     a16:	400b      	ands	r3, r1
     a18:	431a      	orrs	r2, r3
     a1a:	230a      	movs	r3, #10
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	781b      	ldrb	r3, [r3, #0]
     a20:	011b      	lsls	r3, r3, #4
     a22:	2110      	movs	r1, #16
     a24:	400b      	ands	r3, r1
     a26:	431a      	orrs	r2, r3
     a28:	68f9      	ldr	r1, [r7, #12]
     a2a:	697b      	ldr	r3, [r7, #20]
     a2c:	2028      	movs	r0, #40	; 0x28
     a2e:	011b      	lsls	r3, r3, #4
     a30:	18cb      	adds	r3, r1, r3
     a32:	181b      	adds	r3, r3, r0
     a34:	795b      	ldrb	r3, [r3, #5]
     a36:	06db      	lsls	r3, r3, #27
     a38:	0fdb      	lsrs	r3, r3, #31
     a3a:	b2db      	uxtb	r3, r3
     a3c:	00db      	lsls	r3, r3, #3
     a3e:	4313      	orrs	r3, r2
     a40:	3304      	adds	r3, #4
     a42:	687a      	ldr	r2, [r7, #4]
     a44:	601a      	str	r2, [r3, #0]
                             khciState->endpointState[index].stateUnion.stateBitField.bdtOdd, (uint32_t)buffer);

    /* Change the BDT control field to start the transfer. */
    USB_KHCI_BDT_SET_CONTROL(
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	685b      	ldr	r3, [r3, #4]
     a4a:	0a5b      	lsrs	r3, r3, #9
     a4c:	025a      	lsls	r2, r3, #9
     a4e:	230b      	movs	r3, #11
     a50:	18fb      	adds	r3, r7, r3
     a52:	781b      	ldrb	r3, [r3, #0]
     a54:	0159      	lsls	r1, r3, #5
     a56:	23f0      	movs	r3, #240	; 0xf0
     a58:	005b      	lsls	r3, r3, #1
     a5a:	400b      	ands	r3, r1
     a5c:	431a      	orrs	r2, r3
     a5e:	230a      	movs	r3, #10
     a60:	18fb      	adds	r3, r7, r3
     a62:	781b      	ldrb	r3, [r3, #0]
     a64:	011b      	lsls	r3, r3, #4
     a66:	2110      	movs	r1, #16
     a68:	400b      	ands	r3, r1
     a6a:	431a      	orrs	r2, r3
     a6c:	68f9      	ldr	r1, [r7, #12]
     a6e:	697b      	ldr	r3, [r7, #20]
     a70:	2028      	movs	r0, #40	; 0x28
     a72:	011b      	lsls	r3, r3, #4
     a74:	18cb      	adds	r3, r1, r3
     a76:	181b      	adds	r3, r3, r0
     a78:	795b      	ldrb	r3, [r3, #5]
     a7a:	06db      	lsls	r3, r3, #27
     a7c:	0fdb      	lsrs	r3, r3, #31
     a7e:	b2db      	uxtb	r3, r3
     a80:	00db      	lsls	r3, r3, #3
     a82:	4313      	orrs	r3, r2
     a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a86:	0412      	lsls	r2, r2, #16
     a88:	4912      	ldr	r1, [pc, #72]	; (ad4 <USB_DeviceKhciEndpointTransfer+0x120>)
     a8a:	4011      	ands	r1, r2
     a8c:	68f8      	ldr	r0, [r7, #12]
     a8e:	697a      	ldr	r2, [r7, #20]
     a90:	2428      	movs	r4, #40	; 0x28
     a92:	0112      	lsls	r2, r2, #4
     a94:	1882      	adds	r2, r0, r2
     a96:	1912      	adds	r2, r2, r4
     a98:	7952      	ldrb	r2, [r2, #5]
     a9a:	0712      	lsls	r2, r2, #28
     a9c:	0fd2      	lsrs	r2, r2, #31
     a9e:	b2d2      	uxtb	r2, r2
     aa0:	0192      	lsls	r2, r2, #6
     aa2:	430a      	orrs	r2, r1
     aa4:	2188      	movs	r1, #136	; 0x88
     aa6:	430a      	orrs	r2, r1
     aa8:	601a      	str	r2, [r3, #0]
        (uint32_t)khciState->bdt, endpoint, direction, khciState->endpointState[index].stateUnion.stateBitField.bdtOdd,
        USB_LONG_TO_LITTLE_ENDIAN(USB_KHCI_BDT_BC(length) | USB_KHCI_BDT_OWN | USB_KHCI_BDT_DTS |
                                  USB_KHCI_BDT_DATA01(khciState->endpointState[index].stateUnion.stateBitField.data0)));

    /* Exit critical */
    USB_OSA_EXIT_CRITICAL();
     aaa:	693b      	ldr	r3, [r7, #16]
     aac:	0018      	movs	r0, r3
     aae:	f002 f879 	bl	2ba4 <USB_OsaExitCritical>

    /* Clear the token busy state */
    khciState->registerBase->CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
     ab2:	68fb      	ldr	r3, [r7, #12]
     ab4:	689a      	ldr	r2, [r3, #8]
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	689b      	ldr	r3, [r3, #8]
     aba:	2194      	movs	r1, #148	; 0x94
     abc:	5c5b      	ldrb	r3, [r3, r1]
     abe:	b2db      	uxtb	r3, r3
     ac0:	2120      	movs	r1, #32
     ac2:	438b      	bics	r3, r1
     ac4:	b2d9      	uxtb	r1, r3
     ac6:	2394      	movs	r3, #148	; 0x94
     ac8:	54d1      	strb	r1, [r2, r3]
    return kStatus_USB_Success;
     aca:	2300      	movs	r3, #0
}
     acc:	0018      	movs	r0, r3
     ace:	46bd      	mov	sp, r7
     ad0:	b007      	add	sp, #28
     ad2:	bd90      	pop	{r4, r7, pc}
     ad4:	03ff0000 	.word	0x03ff0000

00000ad8 <USB_DeviceKhciPrimeNextSetup>:
 *
 * @param khciState       Pointer of the device KHCI state structure.
 *
 */
static void USB_DeviceKhciPrimeNextSetup(usb_device_khci_state_struct_t *khciState)
{
     ad8:	b580      	push	{r7, lr}
     ada:	b084      	sub	sp, #16
     adc:	af02      	add	r7, sp, #8
     ade:	6078      	str	r0, [r7, #4]
/* Update the endpoint state */
/* Save the buffer address used to receive the setup packet. */

    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].transferBuffer =
        (uint8_t *)&khciState->setupPacketBuffer[0] +
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	330c      	adds	r3, #12
     ae4:	001a      	movs	r2, r3
        khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].stateUnion.stateBitField.bdtOdd *
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	212d      	movs	r1, #45	; 0x2d
     aea:	5c5b      	ldrb	r3, [r3, r1]
     aec:	06db      	lsls	r3, r3, #27
     aee:	0fdb      	lsrs	r3, r3, #31
     af0:	b2db      	uxtb	r3, r3
     af2:	00db      	lsls	r3, r3, #3
        (uint8_t *)&khciState->setupPacketBuffer[0] +
     af4:	18d2      	adds	r2, r2, r3
    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].transferBuffer =
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	621a      	str	r2, [r3, #32]
            USB_SETUP_PACKET_SIZE;

    /* Clear the transferred length. */
    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].transferDone = 0U;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	2200      	movs	r2, #0
     afe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Save the data length expected to get from a host. */
    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].transferLength = USB_SETUP_PACKET_SIZE;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2208      	movs	r2, #8
     b04:	625a      	str	r2, [r3, #36]	; 0x24
    /* Save the data buffer DMA align flag. */
    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].stateUnion.stateBitField.dmaAlign = 1U;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	222c      	movs	r2, #44	; 0x2c
     b0a:	189b      	adds	r3, r3, r2
     b0c:	785a      	ldrb	r2, [r3, #1]
     b0e:	2120      	movs	r1, #32
     b10:	430a      	orrs	r2, r1
     b12:	705a      	strb	r2, [r3, #1]
    /* Set the DATA0/1 to DATA0. */
    khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].stateUnion.stateBitField.data0 = 0U;
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	222c      	movs	r2, #44	; 0x2c
     b18:	189b      	adds	r3, r3, r2
     b1a:	785a      	ldrb	r2, [r3, #1]
     b1c:	2108      	movs	r1, #8
     b1e:	438a      	bics	r2, r1
     b20:	705a      	strb	r2, [r3, #1]

    USB_DeviceKhciEndpointTransfer(khciState, USB_CONTROL_ENDPOINT, USB_OUT,
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	6a1a      	ldr	r2, [r3, #32]
     b26:	6878      	ldr	r0, [r7, #4]
     b28:	2308      	movs	r3, #8
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	0013      	movs	r3, r2
     b2e:	2200      	movs	r2, #0
     b30:	2100      	movs	r1, #0
     b32:	f7ff ff3f 	bl	9b4 <USB_DeviceKhciEndpointTransfer>
                                   khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].transferBuffer,
                                   USB_SETUP_PACKET_SIZE);
}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	46bd      	mov	sp, r7
     b3a:	b002      	add	sp, #8
     b3c:	bd80      	pop	{r7, pc}

00000b3e <USB_DeviceKhciSetDefaultState>:
 *
 * @param khciState       Pointer of the device KHCI state structure.
 *
 */
static void USB_DeviceKhciSetDefaultState(usb_device_khci_state_struct_t *khciState)
{
     b3e:	b580      	push	{r7, lr}
     b40:	b084      	sub	sp, #16
     b42:	af00      	add	r7, sp, #0
     b44:	6078      	str	r0, [r7, #4]
    uint8_t interruptFlag;

    /* Clear the error state register */
    khciState->registerBase->ERRSTAT = 0xFFU;
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	689b      	ldr	r3, [r3, #8]
     b4a:	2288      	movs	r2, #136	; 0x88
     b4c:	21ff      	movs	r1, #255	; 0xff
     b4e:	5499      	strb	r1, [r3, r2]

    /* Setting this bit to 1U resets all the BDT ODD ping/pong fields to 0U, which then specifies the EVEN BDT bank. */
    khciState->registerBase->CTL |= USB_CTL_ODDRST_MASK;
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	689a      	ldr	r2, [r3, #8]
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	689b      	ldr	r3, [r3, #8]
     b58:	2194      	movs	r1, #148	; 0x94
     b5a:	5c5b      	ldrb	r3, [r3, r1]
     b5c:	b2db      	uxtb	r3, r3
     b5e:	2102      	movs	r1, #2
     b60:	430b      	orrs	r3, r1
     b62:	b2d9      	uxtb	r1, r3
     b64:	2394      	movs	r3, #148	; 0x94
     b66:	54d1      	strb	r1, [r2, r3]

    /* Clear the device address */
    khciState->registerBase->ADDR = 0U;
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	689b      	ldr	r3, [r3, #8]
     b6c:	2298      	movs	r2, #152	; 0x98
     b6e:	2100      	movs	r1, #0
     b70:	5499      	strb	r1, [r3, r2]

    /* Clear the endpoint state and disable the endpoint */
    for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
     b72:	230f      	movs	r3, #15
     b74:	18fb      	adds	r3, r7, r3
     b76:	2200      	movs	r2, #0
     b78:	701a      	strb	r2, [r3, #0]
     b7a:	e063      	b.n	c44 <USB_DeviceKhciSetDefaultState+0x106>
    {
        USB_KHCI_BDT_SET_CONTROL((uint32_t)khciState->bdt, count, USB_OUT, 0U, 0U);
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	685b      	ldr	r3, [r3, #4]
     b80:	0a5b      	lsrs	r3, r3, #9
     b82:	025a      	lsls	r2, r3, #9
     b84:	230f      	movs	r3, #15
     b86:	18fb      	adds	r3, r7, r3
     b88:	781b      	ldrb	r3, [r3, #0]
     b8a:	0159      	lsls	r1, r3, #5
     b8c:	23f0      	movs	r3, #240	; 0xf0
     b8e:	005b      	lsls	r3, r3, #1
     b90:	400b      	ands	r3, r1
     b92:	4313      	orrs	r3, r2
     b94:	2200      	movs	r2, #0
     b96:	601a      	str	r2, [r3, #0]
        USB_KHCI_BDT_SET_CONTROL((uint32_t)khciState->bdt, count, USB_OUT, 1U, 0U);
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	685b      	ldr	r3, [r3, #4]
     b9c:	0a5b      	lsrs	r3, r3, #9
     b9e:	025a      	lsls	r2, r3, #9
     ba0:	230f      	movs	r3, #15
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	0159      	lsls	r1, r3, #5
     ba8:	23f0      	movs	r3, #240	; 0xf0
     baa:	005b      	lsls	r3, r3, #1
     bac:	400b      	ands	r3, r1
     bae:	4313      	orrs	r3, r2
     bb0:	2208      	movs	r2, #8
     bb2:	4313      	orrs	r3, r2
     bb4:	2200      	movs	r2, #0
     bb6:	601a      	str	r2, [r3, #0]
        USB_KHCI_BDT_SET_CONTROL((uint32_t)khciState->bdt, count, USB_IN, 0U, 0U);
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	685b      	ldr	r3, [r3, #4]
     bbc:	0a5b      	lsrs	r3, r3, #9
     bbe:	025a      	lsls	r2, r3, #9
     bc0:	230f      	movs	r3, #15
     bc2:	18fb      	adds	r3, r7, r3
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	0159      	lsls	r1, r3, #5
     bc8:	23f0      	movs	r3, #240	; 0xf0
     bca:	005b      	lsls	r3, r3, #1
     bcc:	400b      	ands	r3, r1
     bce:	4313      	orrs	r3, r2
     bd0:	2210      	movs	r2, #16
     bd2:	4313      	orrs	r3, r2
     bd4:	2200      	movs	r2, #0
     bd6:	601a      	str	r2, [r3, #0]
        USB_KHCI_BDT_SET_CONTROL((uint32_t)khciState->bdt, count, USB_IN, 1U, 0U);
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	685b      	ldr	r3, [r3, #4]
     bdc:	0a5b      	lsrs	r3, r3, #9
     bde:	025a      	lsls	r2, r3, #9
     be0:	230f      	movs	r3, #15
     be2:	18fb      	adds	r3, r7, r3
     be4:	781b      	ldrb	r3, [r3, #0]
     be6:	0159      	lsls	r1, r3, #5
     be8:	23f0      	movs	r3, #240	; 0xf0
     bea:	005b      	lsls	r3, r3, #1
     bec:	400b      	ands	r3, r1
     bee:	4313      	orrs	r3, r2
     bf0:	2218      	movs	r2, #24
     bf2:	4313      	orrs	r3, r2
     bf4:	2200      	movs	r2, #0
     bf6:	601a      	str	r2, [r3, #0]

        khciState->endpointState[((uint32_t)count << 1U) | USB_OUT].stateUnion.state = 0U;
     bf8:	230f      	movs	r3, #15
     bfa:	18fb      	adds	r3, r7, r3
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	005b      	lsls	r3, r3, #1
     c00:	687a      	ldr	r2, [r7, #4]
     c02:	011b      	lsls	r3, r3, #4
     c04:	18d3      	adds	r3, r2, r3
     c06:	332c      	adds	r3, #44	; 0x2c
     c08:	2200      	movs	r2, #0
     c0a:	601a      	str	r2, [r3, #0]
        khciState->endpointState[((uint32_t)count << 1U) | USB_IN].stateUnion.state = 0U;
     c0c:	230f      	movs	r3, #15
     c0e:	18fb      	adds	r3, r7, r3
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	005b      	lsls	r3, r3, #1
     c14:	2201      	movs	r2, #1
     c16:	4313      	orrs	r3, r2
     c18:	687a      	ldr	r2, [r7, #4]
     c1a:	011b      	lsls	r3, r3, #4
     c1c:	18d3      	adds	r3, r2, r3
     c1e:	332c      	adds	r3, #44	; 0x2c
     c20:	2200      	movs	r2, #0
     c22:	601a      	str	r2, [r3, #0]
        khciState->registerBase->ENDPOINT[count].ENDPT = 0x00U;
     c24:	687b      	ldr	r3, [r7, #4]
     c26:	689b      	ldr	r3, [r3, #8]
     c28:	220f      	movs	r2, #15
     c2a:	18ba      	adds	r2, r7, r2
     c2c:	7812      	ldrb	r2, [r2, #0]
     c2e:	3230      	adds	r2, #48	; 0x30
     c30:	0092      	lsls	r2, r2, #2
     c32:	2100      	movs	r1, #0
     c34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
     c36:	230f      	movs	r3, #15
     c38:	18fb      	adds	r3, r7, r3
     c3a:	781a      	ldrb	r2, [r3, #0]
     c3c:	230f      	movs	r3, #15
     c3e:	18fb      	adds	r3, r7, r3
     c40:	3201      	adds	r2, #1
     c42:	701a      	strb	r2, [r3, #0]
     c44:	230f      	movs	r3, #15
     c46:	18fb      	adds	r3, r7, r3
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	2b03      	cmp	r3, #3
     c4c:	d996      	bls.n	b7c <USB_DeviceKhciSetDefaultState+0x3e>
    }
    khciState->isDmaAlignBufferInusing = 0U;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	22a0      	movs	r2, #160	; 0xa0
     c52:	2100      	movs	r1, #0
     c54:	5499      	strb	r1, [r3, r2]

    /* Clear the BDT odd reset flag */
    khciState->registerBase->CTL &= ~USB_CTL_ODDRST_MASK;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	689a      	ldr	r2, [r3, #8]
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	689b      	ldr	r3, [r3, #8]
     c5e:	2194      	movs	r1, #148	; 0x94
     c60:	5c5b      	ldrb	r3, [r3, r1]
     c62:	b2db      	uxtb	r3, r3
     c64:	2102      	movs	r1, #2
     c66:	438b      	bics	r3, r1
     c68:	b2d9      	uxtb	r1, r3
     c6a:	2394      	movs	r3, #148	; 0x94
     c6c:	54d1      	strb	r1, [r2, r3]

    /* Enable all error */
    khciState->registerBase->ERREN = 0xFFU;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	689b      	ldr	r3, [r3, #8]
     c72:	228c      	movs	r2, #140	; 0x8c
     c74:	21ff      	movs	r1, #255	; 0xff
     c76:	5499      	strb	r1, [r3, r2]

    /* Enable reset, sof, token, stall interrupt */
    interruptFlag = kUSB_KhciInterruptReset | kUSB_KhciInterruptTokenDone | kUSB_KhciInterruptStall;
     c78:	230e      	movs	r3, #14
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	2289      	movs	r2, #137	; 0x89
     c7e:	701a      	strb	r2, [r3, #0]

    /* Write the interrupt enable register */
    khciState->registerBase->INTEN = interruptFlag;
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	689b      	ldr	r3, [r3, #8]
     c84:	220e      	movs	r2, #14
     c86:	18ba      	adds	r2, r7, r2
     c88:	2184      	movs	r1, #132	; 0x84
     c8a:	7812      	ldrb	r2, [r2, #0]
     c8c:	545a      	strb	r2, [r3, r1]

    /* Clear reset flag */
    khciState->isResetting = 0U;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	22a1      	movs	r2, #161	; 0xa1
     c92:	2100      	movs	r1, #0
     c94:	5499      	strb	r1, [r3, r2]

    khciState->registerBase->CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	689a      	ldr	r2, [r3, #8]
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	689b      	ldr	r3, [r3, #8]
     c9e:	2194      	movs	r1, #148	; 0x94
     ca0:	5c5b      	ldrb	r3, [r3, r1]
     ca2:	b2db      	uxtb	r3, r3
     ca4:	2120      	movs	r1, #32
     ca6:	438b      	bics	r3, r1
     ca8:	b2d9      	uxtb	r1, r3
     caa:	2394      	movs	r3, #148	; 0x94
     cac:	54d1      	strb	r1, [r2, r3]
}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	b004      	add	sp, #16
     cb4:	bd80      	pop	{r7, pc}
	...

00000cb8 <USB_DeviceKhciEndpointInit>:
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceKhciEndpointInit(usb_device_khci_state_struct_t *khciState,
                                               usb_device_endpoint_init_struct_t *epInit)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b084      	sub	sp, #16
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	6039      	str	r1, [r7, #0]
    uint16_t maxPacketSize = epInit->maxPacketSize;
     cc2:	230e      	movs	r3, #14
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	683a      	ldr	r2, [r7, #0]
     cc8:	8812      	ldrh	r2, [r2, #0]
     cca:	801a      	strh	r2, [r3, #0]
    uint8_t endpoint = (epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK);
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	789a      	ldrb	r2, [r3, #2]
     cd0:	230d      	movs	r3, #13
     cd2:	18fb      	adds	r3, r7, r3
     cd4:	210f      	movs	r1, #15
     cd6:	400a      	ands	r2, r1
     cd8:	701a      	strb	r2, [r3, #0]
    uint8_t direction = (epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
     cda:	683b      	ldr	r3, [r7, #0]
     cdc:	789a      	ldrb	r2, [r3, #2]
     cde:	230c      	movs	r3, #12
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	09d2      	lsrs	r2, r2, #7
     ce4:	701a      	strb	r2, [r3, #0]
                        USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | (uint8_t)direction;
     ce6:	230d      	movs	r3, #13
     ce8:	18fb      	adds	r3, r7, r3
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	18db      	adds	r3, r3, r3
     cee:	b2d9      	uxtb	r1, r3
     cf0:	230b      	movs	r3, #11
     cf2:	18fb      	adds	r3, r7, r3
     cf4:	220c      	movs	r2, #12
     cf6:	18ba      	adds	r2, r7, r2
     cf8:	7812      	ldrb	r2, [r2, #0]
     cfa:	430a      	orrs	r2, r1
     cfc:	701a      	strb	r2, [r3, #0]

    /* Make the endpoint max packet size align with USB Specification 2.0. */
    if (USB_ENDPOINT_ISOCHRONOUS == epInit->transferType)
     cfe:	683b      	ldr	r3, [r7, #0]
     d00:	78db      	ldrb	r3, [r3, #3]
     d02:	2b01      	cmp	r3, #1
     d04:	d10a      	bne.n	d1c <USB_DeviceKhciEndpointInit+0x64>
    {
        if (maxPacketSize > USB_DEVICE_MAX_FS_ISO_MAX_PACKET_SIZE)
     d06:	230e      	movs	r3, #14
     d08:	18fb      	adds	r3, r7, r3
     d0a:	881b      	ldrh	r3, [r3, #0]
     d0c:	4a53      	ldr	r2, [pc, #332]	; (e5c <USB_DeviceKhciEndpointInit+0x1a4>)
     d0e:	4293      	cmp	r3, r2
     d10:	d923      	bls.n	d5a <USB_DeviceKhciEndpointInit+0xa2>
        {
            maxPacketSize = USB_DEVICE_MAX_FS_ISO_MAX_PACKET_SIZE;
     d12:	230e      	movs	r3, #14
     d14:	18fb      	adds	r3, r7, r3
     d16:	4a51      	ldr	r2, [pc, #324]	; (e5c <USB_DeviceKhciEndpointInit+0x1a4>)
     d18:	801a      	strh	r2, [r3, #0]
     d1a:	e01e      	b.n	d5a <USB_DeviceKhciEndpointInit+0xa2>
        }
    }
    else
    {
        if (maxPacketSize > USB_DEVICE_MAX_FS_NONE_ISO_MAX_PACKET_SIZE)
     d1c:	230e      	movs	r3, #14
     d1e:	18fb      	adds	r3, r7, r3
     d20:	881b      	ldrh	r3, [r3, #0]
     d22:	2b40      	cmp	r3, #64	; 0x40
     d24:	d903      	bls.n	d2e <USB_DeviceKhciEndpointInit+0x76>
        {
            maxPacketSize = USB_DEVICE_MAX_FS_NONE_ISO_MAX_PACKET_SIZE;
     d26:	230e      	movs	r3, #14
     d28:	18fb      	adds	r3, r7, r3
     d2a:	2240      	movs	r2, #64	; 0x40
     d2c:	801a      	strh	r2, [r3, #0]
        }
        /* Enable an endpoint to perform handshaking during a transaction to this endpoint. */
        khciState->registerBase->ENDPOINT[endpoint].ENDPT |= USB_ENDPT_EPHSHK_MASK;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	689a      	ldr	r2, [r3, #8]
     d32:	230d      	movs	r3, #13
     d34:	18fb      	adds	r3, r7, r3
     d36:	7819      	ldrb	r1, [r3, #0]
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	689b      	ldr	r3, [r3, #8]
     d3c:	200d      	movs	r0, #13
     d3e:	1838      	adds	r0, r7, r0
     d40:	7800      	ldrb	r0, [r0, #0]
     d42:	3030      	adds	r0, #48	; 0x30
     d44:	0080      	lsls	r0, r0, #2
     d46:	5cc3      	ldrb	r3, [r0, r3]
     d48:	b2db      	uxtb	r3, r3
     d4a:	2001      	movs	r0, #1
     d4c:	4303      	orrs	r3, r0
     d4e:	b2d8      	uxtb	r0, r3
     d50:	000b      	movs	r3, r1
     d52:	3330      	adds	r3, #48	; 0x30
     d54:	009b      	lsls	r3, r3, #2
     d56:	1c01      	adds	r1, r0, #0
     d58:	5499      	strb	r1, [r3, r2]
    }
    /* Set the endpoint idle */
    khciState->endpointState[index].stateUnion.stateBitField.transferring = 0U;
     d5a:	230b      	movs	r3, #11
     d5c:	18fb      	adds	r3, r7, r3
     d5e:	781b      	ldrb	r3, [r3, #0]
     d60:	687a      	ldr	r2, [r7, #4]
     d62:	2128      	movs	r1, #40	; 0x28
     d64:	011b      	lsls	r3, r3, #4
     d66:	18d3      	adds	r3, r2, r3
     d68:	185b      	adds	r3, r3, r1
     d6a:	795a      	ldrb	r2, [r3, #5]
     d6c:	2140      	movs	r1, #64	; 0x40
     d6e:	438a      	bics	r2, r1
     d70:	715a      	strb	r2, [r3, #5]
    /* Save the max packet size of the endpoint */
    khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize = maxPacketSize;
     d72:	230b      	movs	r3, #11
     d74:	18fb      	adds	r3, r7, r3
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	220e      	movs	r2, #14
     d7a:	18ba      	adds	r2, r7, r2
     d7c:	8812      	ldrh	r2, [r2, #0]
     d7e:	0592      	lsls	r2, r2, #22
     d80:	0d92      	lsrs	r2, r2, #22
     d82:	b292      	uxth	r2, r2
     d84:	6879      	ldr	r1, [r7, #4]
     d86:	2028      	movs	r0, #40	; 0x28
     d88:	011b      	lsls	r3, r3, #4
     d8a:	18cb      	adds	r3, r1, r3
     d8c:	181b      	adds	r3, r3, r0
     d8e:	0592      	lsls	r2, r2, #22
     d90:	0d90      	lsrs	r0, r2, #22
     d92:	889a      	ldrh	r2, [r3, #4]
     d94:	0a92      	lsrs	r2, r2, #10
     d96:	0292      	lsls	r2, r2, #10
     d98:	1c11      	adds	r1, r2, #0
     d9a:	1c02      	adds	r2, r0, #0
     d9c:	430a      	orrs	r2, r1
     d9e:	809a      	strh	r2, [r3, #4]
    /* Set the data toggle to DATA0 */
    khciState->endpointState[index].stateUnion.stateBitField.data0 = 0U;
     da0:	230b      	movs	r3, #11
     da2:	18fb      	adds	r3, r7, r3
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	687a      	ldr	r2, [r7, #4]
     da8:	2128      	movs	r1, #40	; 0x28
     daa:	011b      	lsls	r3, r3, #4
     dac:	18d3      	adds	r3, r2, r3
     dae:	185b      	adds	r3, r3, r1
     db0:	795a      	ldrb	r2, [r3, #5]
     db2:	2108      	movs	r1, #8
     db4:	438a      	bics	r2, r1
     db6:	715a      	strb	r2, [r3, #5]
    /* Clear the endpoint stalled state */
    khciState->endpointState[index].stateUnion.stateBitField.stalled = 0U;
     db8:	230b      	movs	r3, #11
     dba:	18fb      	adds	r3, r7, r3
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	687a      	ldr	r2, [r7, #4]
     dc0:	2128      	movs	r1, #40	; 0x28
     dc2:	011b      	lsls	r3, r3, #4
     dc4:	18d3      	adds	r3, r2, r3
     dc6:	185b      	adds	r3, r3, r1
     dc8:	795a      	ldrb	r2, [r3, #5]
     dca:	2104      	movs	r1, #4
     dcc:	438a      	bics	r2, r1
     dce:	715a      	strb	r2, [r3, #5]
    /* Set the ZLT field */
    khciState->endpointState[index].stateUnion.stateBitField.zlt = epInit->zlt;
     dd0:	230b      	movs	r3, #11
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	683a      	ldr	r2, [r7, #0]
     dd8:	7912      	ldrb	r2, [r2, #4]
     dda:	1c11      	adds	r1, r2, #0
     ddc:	2201      	movs	r2, #1
     dde:	400a      	ands	r2, r1
     de0:	b2d2      	uxtb	r2, r2
     de2:	6879      	ldr	r1, [r7, #4]
     de4:	2028      	movs	r0, #40	; 0x28
     de6:	011b      	lsls	r3, r3, #4
     de8:	18cb      	adds	r3, r1, r3
     dea:	181b      	adds	r3, r3, r0
     dec:	01d0      	lsls	r0, r2, #7
     dee:	795a      	ldrb	r2, [r3, #5]
     df0:	217f      	movs	r1, #127	; 0x7f
     df2:	400a      	ands	r2, r1
     df4:	1c11      	adds	r1, r2, #0
     df6:	1c02      	adds	r2, r0, #0
     df8:	430a      	orrs	r2, r1
     dfa:	715a      	strb	r2, [r3, #5]
    /* Enable the endpoint. */
    khciState->registerBase->ENDPOINT[endpoint].ENDPT |=
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	689a      	ldr	r2, [r3, #8]
     e00:	230d      	movs	r3, #13
     e02:	18fb      	adds	r3, r7, r3
     e04:	7819      	ldrb	r1, [r3, #0]
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	689b      	ldr	r3, [r3, #8]
     e0a:	200d      	movs	r0, #13
     e0c:	1838      	adds	r0, r7, r0
     e0e:	7800      	ldrb	r0, [r0, #0]
     e10:	3030      	adds	r0, #48	; 0x30
     e12:	0080      	lsls	r0, r0, #2
     e14:	5cc3      	ldrb	r3, [r0, r3]
     e16:	b2d8      	uxtb	r0, r3
     e18:	230c      	movs	r3, #12
     e1a:	18fb      	adds	r3, r7, r3
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	2b01      	cmp	r3, #1
     e20:	d101      	bne.n	e26 <USB_DeviceKhciEndpointInit+0x16e>
     e22:	2304      	movs	r3, #4
     e24:	e000      	b.n	e28 <USB_DeviceKhciEndpointInit+0x170>
     e26:	2308      	movs	r3, #8
     e28:	4303      	orrs	r3, r0
     e2a:	b2d8      	uxtb	r0, r3
     e2c:	000b      	movs	r3, r1
     e2e:	3330      	adds	r3, #48	; 0x30
     e30:	009b      	lsls	r3, r3, #2
     e32:	1c01      	adds	r1, r0, #0
     e34:	5499      	strb	r1, [r3, r2]
        (USB_IN == direction) ? USB_ENDPT_EPTXEN_MASK : USB_ENDPT_EPRXEN_MASK;

    /* Prime a transfer to receive next setup packet when the endpoint is control out endpoint. */
    if ((USB_CONTROL_ENDPOINT == endpoint) && (USB_OUT == direction))
     e36:	230d      	movs	r3, #13
     e38:	18fb      	adds	r3, r7, r3
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d108      	bne.n	e52 <USB_DeviceKhciEndpointInit+0x19a>
     e40:	230c      	movs	r3, #12
     e42:	18fb      	adds	r3, r7, r3
     e44:	781b      	ldrb	r3, [r3, #0]
     e46:	2b00      	cmp	r3, #0
     e48:	d103      	bne.n	e52 <USB_DeviceKhciEndpointInit+0x19a>
    {
        USB_DeviceKhciPrimeNextSetup(khciState);
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	0018      	movs	r0, r3
     e4e:	f7ff fe43 	bl	ad8 <USB_DeviceKhciPrimeNextSetup>
    }

    return kStatus_USB_Success;
     e52:	2300      	movs	r3, #0
}
     e54:	0018      	movs	r0, r3
     e56:	46bd      	mov	sp, r7
     e58:	b004      	add	sp, #16
     e5a:	bd80      	pop	{r7, pc}
     e5c:	000003ff 	.word	0x000003ff

00000e60 <USB_DeviceKhciEndpointDeinit>:
 * @param ep               The endpoint address, Bit7, 0U - USB_OUT, 1U - USB_IN.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceKhciEndpointDeinit(usb_device_khci_state_struct_t *khciState, uint8_t ep)
{
     e60:	b580      	push	{r7, lr}
     e62:	b084      	sub	sp, #16
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	000a      	movs	r2, r1
     e6a:	1cfb      	adds	r3, r7, #3
     e6c:	701a      	strb	r2, [r3, #0]
    uint8_t endpoint = (ep & USB_ENDPOINT_NUMBER_MASK);
     e6e:	230f      	movs	r3, #15
     e70:	18fb      	adds	r3, r7, r3
     e72:	1cfa      	adds	r2, r7, #3
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	210f      	movs	r1, #15
     e78:	400a      	ands	r2, r1
     e7a:	701a      	strb	r2, [r3, #0]
    uint8_t direction =
     e7c:	230e      	movs	r3, #14
     e7e:	18fb      	adds	r3, r7, r3
     e80:	1cfa      	adds	r2, r7, #3
     e82:	7812      	ldrb	r2, [r2, #0]
     e84:	09d2      	lsrs	r2, r2, #7
     e86:	701a      	strb	r2, [r3, #0]
        (ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | (uint8_t)direction;
     e88:	230f      	movs	r3, #15
     e8a:	18fb      	adds	r3, r7, r3
     e8c:	781b      	ldrb	r3, [r3, #0]
     e8e:	18db      	adds	r3, r3, r3
     e90:	b2d9      	uxtb	r1, r3
     e92:	230d      	movs	r3, #13
     e94:	18fb      	adds	r3, r7, r3
     e96:	220e      	movs	r2, #14
     e98:	18ba      	adds	r2, r7, r2
     e9a:	7812      	ldrb	r2, [r2, #0]
     e9c:	430a      	orrs	r2, r1
     e9e:	701a      	strb	r2, [r3, #0]

    /* Cancel the transfer of the endpoint */
    USB_DeviceKhciCancel(khciState, ep);
     ea0:	1cfb      	adds	r3, r7, #3
     ea2:	781a      	ldrb	r2, [r3, #0]
     ea4:	687b      	ldr	r3, [r7, #4]
     ea6:	0011      	movs	r1, r2
     ea8:	0018      	movs	r0, r3
     eaa:	f000 feda 	bl	1c62 <USB_DeviceKhciCancel>

    /* Disable the endpoint */
    khciState->registerBase->ENDPOINT[endpoint].ENDPT = 0x00U;
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	689b      	ldr	r3, [r3, #8]
     eb2:	220f      	movs	r2, #15
     eb4:	18ba      	adds	r2, r7, r2
     eb6:	7812      	ldrb	r2, [r2, #0]
     eb8:	3230      	adds	r2, #48	; 0x30
     eba:	0092      	lsls	r2, r2, #2
     ebc:	2100      	movs	r1, #0
     ebe:	54d1      	strb	r1, [r2, r3]
    /* Clear the max packet size */
    khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize = 0U;
     ec0:	230d      	movs	r3, #13
     ec2:	18fb      	adds	r3, r7, r3
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	687a      	ldr	r2, [r7, #4]
     ec8:	2128      	movs	r1, #40	; 0x28
     eca:	011b      	lsls	r3, r3, #4
     ecc:	18d3      	adds	r3, r2, r3
     ece:	185b      	adds	r3, r3, r1
     ed0:	889a      	ldrh	r2, [r3, #4]
     ed2:	0a92      	lsrs	r2, r2, #10
     ed4:	0292      	lsls	r2, r2, #10
     ed6:	809a      	strh	r2, [r3, #4]

    return kStatus_USB_Success;
     ed8:	2300      	movs	r3, #0
}
     eda:	0018      	movs	r0, r3
     edc:	46bd      	mov	sp, r7
     ede:	b004      	add	sp, #16
     ee0:	bd80      	pop	{r7, pc}

00000ee2 <USB_DeviceKhciEndpointStall>:
 * @param ep               The endpoint address, Bit7, 0U - USB_OUT, 1U - USB_IN.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceKhciEndpointStall(usb_device_khci_state_struct_t *khciState, uint8_t ep)
{
     ee2:	b580      	push	{r7, lr}
     ee4:	b084      	sub	sp, #16
     ee6:	af00      	add	r7, sp, #0
     ee8:	6078      	str	r0, [r7, #4]
     eea:	000a      	movs	r2, r1
     eec:	1cfb      	adds	r3, r7, #3
     eee:	701a      	strb	r2, [r3, #0]
    uint8_t endpoint = ep & USB_ENDPOINT_NUMBER_MASK;
     ef0:	230f      	movs	r3, #15
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	1cfa      	adds	r2, r7, #3
     ef6:	7812      	ldrb	r2, [r2, #0]
     ef8:	210f      	movs	r1, #15
     efa:	400a      	ands	r2, r1
     efc:	701a      	strb	r2, [r3, #0]
    uint8_t direction =
     efe:	230e      	movs	r3, #14
     f00:	18fb      	adds	r3, r7, r3
     f02:	1cfa      	adds	r2, r7, #3
     f04:	7812      	ldrb	r2, [r2, #0]
     f06:	09d2      	lsrs	r2, r2, #7
     f08:	701a      	strb	r2, [r3, #0]
        (ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | (uint8_t)direction;
     f0a:	230f      	movs	r3, #15
     f0c:	18fb      	adds	r3, r7, r3
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	18db      	adds	r3, r3, r3
     f12:	b2d9      	uxtb	r1, r3
     f14:	230d      	movs	r3, #13
     f16:	18fb      	adds	r3, r7, r3
     f18:	220e      	movs	r2, #14
     f1a:	18ba      	adds	r2, r7, r2
     f1c:	7812      	ldrb	r2, [r2, #0]
     f1e:	430a      	orrs	r2, r1
     f20:	701a      	strb	r2, [r3, #0]

    /* Cancel the transfer of the endpoint */
    USB_DeviceKhciCancel(khciState, ep);
     f22:	1cfb      	adds	r3, r7, #3
     f24:	781a      	ldrb	r2, [r3, #0]
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	0011      	movs	r1, r2
     f2a:	0018      	movs	r0, r3
     f2c:	f000 fe99 	bl	1c62 <USB_DeviceKhciCancel>

    /* Set endpoint stall flag. */
    khciState->endpointState[index].stateUnion.stateBitField.stalled = 1U;
     f30:	230d      	movs	r3, #13
     f32:	18fb      	adds	r3, r7, r3
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	687a      	ldr	r2, [r7, #4]
     f38:	2128      	movs	r1, #40	; 0x28
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	18d3      	adds	r3, r2, r3
     f3e:	185b      	adds	r3, r3, r1
     f40:	795a      	ldrb	r2, [r3, #5]
     f42:	2104      	movs	r1, #4
     f44:	430a      	orrs	r2, r1
     f46:	715a      	strb	r2, [r3, #5]

    /* Set endpoint stall in BDT. And then if the host send a IN/OUT tanscation, the device will response a STALL state.
     */
    USB_KHCI_BDT_SET_CONTROL(
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	0a5b      	lsrs	r3, r3, #9
     f4e:	025a      	lsls	r2, r3, #9
     f50:	230f      	movs	r3, #15
     f52:	18fb      	adds	r3, r7, r3
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	0159      	lsls	r1, r3, #5
     f58:	23f0      	movs	r3, #240	; 0xf0
     f5a:	005b      	lsls	r3, r3, #1
     f5c:	400b      	ands	r3, r1
     f5e:	431a      	orrs	r2, r3
     f60:	230e      	movs	r3, #14
     f62:	18fb      	adds	r3, r7, r3
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	011b      	lsls	r3, r3, #4
     f68:	2110      	movs	r1, #16
     f6a:	400b      	ands	r3, r1
     f6c:	431a      	orrs	r2, r3
     f6e:	230d      	movs	r3, #13
     f70:	18fb      	adds	r3, r7, r3
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	6879      	ldr	r1, [r7, #4]
     f76:	2028      	movs	r0, #40	; 0x28
     f78:	011b      	lsls	r3, r3, #4
     f7a:	18cb      	adds	r3, r1, r3
     f7c:	181b      	adds	r3, r3, r0
     f7e:	795b      	ldrb	r3, [r3, #5]
     f80:	06db      	lsls	r3, r3, #27
     f82:	0fdb      	lsrs	r3, r3, #31
     f84:	b2db      	uxtb	r3, r3
     f86:	00db      	lsls	r3, r3, #3
     f88:	4313      	orrs	r3, r2
     f8a:	220d      	movs	r2, #13
     f8c:	18ba      	adds	r2, r7, r2
     f8e:	7812      	ldrb	r2, [r2, #0]
     f90:	6879      	ldr	r1, [r7, #4]
     f92:	2028      	movs	r0, #40	; 0x28
     f94:	0112      	lsls	r2, r2, #4
     f96:	188a      	adds	r2, r1, r2
     f98:	1812      	adds	r2, r2, r0
     f9a:	8892      	ldrh	r2, [r2, #4]
     f9c:	0592      	lsls	r2, r2, #22
     f9e:	0d92      	lsrs	r2, r2, #22
     fa0:	b292      	uxth	r2, r2
     fa2:	0412      	lsls	r2, r2, #16
     fa4:	218c      	movs	r1, #140	; 0x8c
     fa6:	430a      	orrs	r2, r1
     fa8:	601a      	str	r2, [r3, #0]
        (uint32_t)khciState->bdt, endpoint, direction, khciState->endpointState[index].stateUnion.stateBitField.bdtOdd,
        USB_LONG_TO_LITTLE_ENDIAN(
            (uint32_t)(USB_KHCI_BDT_BC(khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize) |
                       USB_KHCI_BDT_DTS | USB_KHCI_BDT_STALL | USB_KHCI_BDT_OWN)));

    khciState->registerBase->CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	689a      	ldr	r2, [r3, #8]
     fae:	687b      	ldr	r3, [r7, #4]
     fb0:	689b      	ldr	r3, [r3, #8]
     fb2:	2194      	movs	r1, #148	; 0x94
     fb4:	5c5b      	ldrb	r3, [r3, r1]
     fb6:	b2db      	uxtb	r3, r3
     fb8:	2120      	movs	r1, #32
     fba:	438b      	bics	r3, r1
     fbc:	b2d9      	uxtb	r1, r3
     fbe:	2394      	movs	r3, #148	; 0x94
     fc0:	54d1      	strb	r1, [r2, r3]

    return kStatus_USB_Success;
     fc2:	2300      	movs	r3, #0
}
     fc4:	0018      	movs	r0, r3
     fc6:	46bd      	mov	sp, r7
     fc8:	b004      	add	sp, #16
     fca:	bd80      	pop	{r7, pc}

00000fcc <USB_DeviceKhciEndpointUnstall>:
 * @param ep               The endpoint address, Bit7, 0U - USB_OUT, 1U - USB_IN.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceKhciEndpointUnstall(usb_device_khci_state_struct_t *khciState, uint8_t ep)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b084      	sub	sp, #16
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
     fd4:	000a      	movs	r2, r1
     fd6:	1cfb      	adds	r3, r7, #3
     fd8:	701a      	strb	r2, [r3, #0]
    uint32_t control;
    uint8_t endpoint = ep & USB_ENDPOINT_NUMBER_MASK;
     fda:	230e      	movs	r3, #14
     fdc:	18fb      	adds	r3, r7, r3
     fde:	1cfa      	adds	r2, r7, #3
     fe0:	7812      	ldrb	r2, [r2, #0]
     fe2:	210f      	movs	r1, #15
     fe4:	400a      	ands	r2, r1
     fe6:	701a      	strb	r2, [r3, #0]
    uint8_t direction =
     fe8:	230d      	movs	r3, #13
     fea:	18fb      	adds	r3, r7, r3
     fec:	1cfa      	adds	r2, r7, #3
     fee:	7812      	ldrb	r2, [r2, #0]
     ff0:	09d2      	lsrs	r2, r2, #7
     ff2:	701a      	strb	r2, [r3, #0]
        (ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | (uint8_t)direction;
     ff4:	230e      	movs	r3, #14
     ff6:	18fb      	adds	r3, r7, r3
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	18db      	adds	r3, r3, r3
     ffc:	b2d9      	uxtb	r1, r3
     ffe:	230c      	movs	r3, #12
    1000:	18fb      	adds	r3, r7, r3
    1002:	220d      	movs	r2, #13
    1004:	18ba      	adds	r2, r7, r2
    1006:	7812      	ldrb	r2, [r2, #0]
    1008:	430a      	orrs	r2, r1
    100a:	701a      	strb	r2, [r3, #0]

    /* Clear the endpoint stall state */
    khciState->endpointState[index].stateUnion.stateBitField.stalled = 0U;
    100c:	230c      	movs	r3, #12
    100e:	18fb      	adds	r3, r7, r3
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	687a      	ldr	r2, [r7, #4]
    1014:	2128      	movs	r1, #40	; 0x28
    1016:	011b      	lsls	r3, r3, #4
    1018:	18d3      	adds	r3, r2, r3
    101a:	185b      	adds	r3, r3, r1
    101c:	795a      	ldrb	r2, [r3, #5]
    101e:	2104      	movs	r1, #4
    1020:	438a      	bics	r2, r1
    1022:	715a      	strb	r2, [r3, #5]
    /* Reset the endpoint data toggle to DATA0 */
    khciState->endpointState[index].stateUnion.stateBitField.data0 = 0U;
    1024:	230c      	movs	r3, #12
    1026:	18fb      	adds	r3, r7, r3
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	687a      	ldr	r2, [r7, #4]
    102c:	2128      	movs	r1, #40	; 0x28
    102e:	011b      	lsls	r3, r3, #4
    1030:	18d3      	adds	r3, r2, r3
    1032:	185b      	adds	r3, r3, r1
    1034:	795a      	ldrb	r2, [r3, #5]
    1036:	2108      	movs	r1, #8
    1038:	438a      	bics	r2, r1
    103a:	715a      	strb	r2, [r3, #5]

    /* Clear stall state in BDT */
    for (uint8_t i = 0U; i < 2U; i++)
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	2200      	movs	r2, #0
    1042:	701a      	strb	r2, [r3, #0]
    1044:	e050      	b.n	10e8 <USB_DeviceKhciEndpointUnstall+0x11c>
    {
        control = USB_KHCI_BDT_GET_CONTROL((uint32_t)khciState->bdt, endpoint, direction, i);
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	0a5b      	lsrs	r3, r3, #9
    104c:	025a      	lsls	r2, r3, #9
    104e:	230e      	movs	r3, #14
    1050:	18fb      	adds	r3, r7, r3
    1052:	781b      	ldrb	r3, [r3, #0]
    1054:	0159      	lsls	r1, r3, #5
    1056:	23f0      	movs	r3, #240	; 0xf0
    1058:	005b      	lsls	r3, r3, #1
    105a:	400b      	ands	r3, r1
    105c:	431a      	orrs	r2, r3
    105e:	230d      	movs	r3, #13
    1060:	18fb      	adds	r3, r7, r3
    1062:	781b      	ldrb	r3, [r3, #0]
    1064:	011b      	lsls	r3, r3, #4
    1066:	2110      	movs	r1, #16
    1068:	400b      	ands	r3, r1
    106a:	431a      	orrs	r2, r3
    106c:	230f      	movs	r3, #15
    106e:	18fb      	adds	r3, r7, r3
    1070:	781b      	ldrb	r3, [r3, #0]
    1072:	00db      	lsls	r3, r3, #3
    1074:	2108      	movs	r1, #8
    1076:	400b      	ands	r3, r1
    1078:	4313      	orrs	r3, r2
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	60bb      	str	r3, [r7, #8]
        if (control & USB_KHCI_BDT_STALL)
    107e:	68bb      	ldr	r3, [r7, #8]
    1080:	2204      	movs	r2, #4
    1082:	4013      	ands	r3, r2
    1084:	d029      	beq.n	10da <USB_DeviceKhciEndpointUnstall+0x10e>
        {
            USB_KHCI_BDT_SET_CONTROL(
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	685b      	ldr	r3, [r3, #4]
    108a:	0a5b      	lsrs	r3, r3, #9
    108c:	025a      	lsls	r2, r3, #9
    108e:	230e      	movs	r3, #14
    1090:	18fb      	adds	r3, r7, r3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	0159      	lsls	r1, r3, #5
    1096:	23f0      	movs	r3, #240	; 0xf0
    1098:	005b      	lsls	r3, r3, #1
    109a:	400b      	ands	r3, r1
    109c:	431a      	orrs	r2, r3
    109e:	230d      	movs	r3, #13
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	011b      	lsls	r3, r3, #4
    10a6:	2110      	movs	r1, #16
    10a8:	400b      	ands	r3, r1
    10aa:	431a      	orrs	r2, r3
    10ac:	230f      	movs	r3, #15
    10ae:	18fb      	adds	r3, r7, r3
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	00db      	lsls	r3, r3, #3
    10b4:	2108      	movs	r1, #8
    10b6:	400b      	ands	r3, r1
    10b8:	4313      	orrs	r3, r2
    10ba:	220c      	movs	r2, #12
    10bc:	18ba      	adds	r2, r7, r2
    10be:	7812      	ldrb	r2, [r2, #0]
    10c0:	6879      	ldr	r1, [r7, #4]
    10c2:	2028      	movs	r0, #40	; 0x28
    10c4:	0112      	lsls	r2, r2, #4
    10c6:	188a      	adds	r2, r1, r2
    10c8:	1812      	adds	r2, r2, r0
    10ca:	8892      	ldrh	r2, [r2, #4]
    10cc:	0592      	lsls	r2, r2, #22
    10ce:	0d92      	lsrs	r2, r2, #22
    10d0:	b292      	uxth	r2, r2
    10d2:	0412      	lsls	r2, r2, #16
    10d4:	2108      	movs	r1, #8
    10d6:	430a      	orrs	r2, r1
    10d8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0U; i < 2U; i++)
    10da:	230f      	movs	r3, #15
    10dc:	18fb      	adds	r3, r7, r3
    10de:	781a      	ldrb	r2, [r3, #0]
    10e0:	230f      	movs	r3, #15
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	3201      	adds	r2, #1
    10e6:	701a      	strb	r2, [r3, #0]
    10e8:	230f      	movs	r3, #15
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	781b      	ldrb	r3, [r3, #0]
    10ee:	2b01      	cmp	r3, #1
    10f0:	d9a9      	bls.n	1046 <USB_DeviceKhciEndpointUnstall+0x7a>
                               USB_KHCI_BDT_DTS | USB_KHCI_BDT_DATA01(0U))));
        }
    }

    /* Clear stall state in endpoint control register */
    khciState->registerBase->ENDPOINT[endpoint].ENDPT &= ~USB_ENDPT_EPSTALL_MASK;
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	689a      	ldr	r2, [r3, #8]
    10f6:	230e      	movs	r3, #14
    10f8:	18fb      	adds	r3, r7, r3
    10fa:	7819      	ldrb	r1, [r3, #0]
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	689b      	ldr	r3, [r3, #8]
    1100:	200e      	movs	r0, #14
    1102:	1838      	adds	r0, r7, r0
    1104:	7800      	ldrb	r0, [r0, #0]
    1106:	3030      	adds	r0, #48	; 0x30
    1108:	0080      	lsls	r0, r0, #2
    110a:	5cc3      	ldrb	r3, [r0, r3]
    110c:	b2db      	uxtb	r3, r3
    110e:	2002      	movs	r0, #2
    1110:	4383      	bics	r3, r0
    1112:	b2d8      	uxtb	r0, r3
    1114:	000b      	movs	r3, r1
    1116:	3330      	adds	r3, #48	; 0x30
    1118:	009b      	lsls	r3, r3, #2
    111a:	1c01      	adds	r1, r0, #0
    111c:	5499      	strb	r1, [r3, r2]

    /* Prime a transfer to receive next setup packet when the endpoint is a control out endpoint. */
    if ((USB_CONTROL_ENDPOINT == endpoint) && (USB_OUT == direction))
    111e:	230e      	movs	r3, #14
    1120:	18fb      	adds	r3, r7, r3
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	2b00      	cmp	r3, #0
    1126:	d108      	bne.n	113a <USB_DeviceKhciEndpointUnstall+0x16e>
    1128:	230d      	movs	r3, #13
    112a:	18fb      	adds	r3, r7, r3
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	2b00      	cmp	r3, #0
    1130:	d103      	bne.n	113a <USB_DeviceKhciEndpointUnstall+0x16e>
    {
        USB_DeviceKhciPrimeNextSetup(khciState);
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	0018      	movs	r0, r3
    1136:	f7ff fccf 	bl	ad8 <USB_DeviceKhciPrimeNextSetup>
    }

    khciState->registerBase->CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	689a      	ldr	r2, [r3, #8]
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	689b      	ldr	r3, [r3, #8]
    1142:	2194      	movs	r1, #148	; 0x94
    1144:	5c5b      	ldrb	r3, [r3, r1]
    1146:	b2db      	uxtb	r3, r3
    1148:	2120      	movs	r1, #32
    114a:	438b      	bics	r3, r1
    114c:	b2d9      	uxtb	r1, r3
    114e:	2394      	movs	r3, #148	; 0x94
    1150:	54d1      	strb	r1, [r2, r3]

    return kStatus_USB_Success;
    1152:	2300      	movs	r3, #0
}
    1154:	0018      	movs	r0, r3
    1156:	46bd      	mov	sp, r7
    1158:	b004      	add	sp, #16
    115a:	bd80      	pop	{r7, pc}

0000115c <USB_DeviceKhciInterruptTokenDone>:
 *
 * @param khciState       Pointer of the device KHCI state structure.
 *
 */
static void USB_DeviceKhciInterruptTokenDone(usb_device_khci_state_struct_t *khciState)
{
    115c:	b590      	push	{r4, r7, lr}
    115e:	b093      	sub	sp, #76	; 0x4c
    1160:	af02      	add	r7, sp, #8
    1162:	6078      	str	r0, [r7, #4]
    uint8_t endpoint;
    uint8_t direction;
    uint8_t bdtOdd;
    uint8_t isSetup;
    uint8_t index;
    uint8_t stateRegister = khciState->registerBase->STAT;
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	689a      	ldr	r2, [r3, #8]
    1168:	233b      	movs	r3, #59	; 0x3b
    116a:	18fb      	adds	r3, r7, r3
    116c:	2190      	movs	r1, #144	; 0x90
    116e:	5c52      	ldrb	r2, [r2, r1]
    1170:	701a      	strb	r2, [r3, #0]

    /* Get the endpoint number to identify which one triggers the token done interrupt. */
    endpoint = (stateRegister & USB_STAT_ENDP_MASK) >> USB_STAT_ENDP_SHIFT;
    1172:	233a      	movs	r3, #58	; 0x3a
    1174:	18fb      	adds	r3, r7, r3
    1176:	223b      	movs	r2, #59	; 0x3b
    1178:	18ba      	adds	r2, r7, r2
    117a:	7812      	ldrb	r2, [r2, #0]
    117c:	0912      	lsrs	r2, r2, #4
    117e:	701a      	strb	r2, [r3, #0]

    /* Get the direction of the endpoint number. */
    direction = (stateRegister & USB_STAT_TX_MASK) >> USB_STAT_TX_SHIFT;
    1180:	233b      	movs	r3, #59	; 0x3b
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	08db      	lsrs	r3, r3, #3
    1188:	b2da      	uxtb	r2, r3
    118a:	2339      	movs	r3, #57	; 0x39
    118c:	18fb      	adds	r3, r7, r3
    118e:	2101      	movs	r1, #1
    1190:	400a      	ands	r2, r1
    1192:	701a      	strb	r2, [r3, #0]

    /* Get the finished BDT ODD. */
    bdtOdd = (stateRegister & USB_STAT_ODD_MASK) >> USB_STAT_ODD_SHIFT;
    1194:	233b      	movs	r3, #59	; 0x3b
    1196:	18fb      	adds	r3, r7, r3
    1198:	781b      	ldrb	r3, [r3, #0]
    119a:	089b      	lsrs	r3, r3, #2
    119c:	b2da      	uxtb	r2, r3
    119e:	2338      	movs	r3, #56	; 0x38
    11a0:	18fb      	adds	r3, r7, r3
    11a2:	2101      	movs	r1, #1
    11a4:	400a      	ands	r2, r1
    11a6:	701a      	strb	r2, [r3, #0]

    /* Clear token done interrupt flag. */
    khciState->registerBase->ISTAT = kUSB_KhciInterruptTokenDone;
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	689b      	ldr	r3, [r3, #8]
    11ac:	2280      	movs	r2, #128	; 0x80
    11ae:	2108      	movs	r1, #8
    11b0:	5499      	strb	r1, [r3, r2]

    /* Get the Control field of the BDT element according to the endpoint number, the direction and finished BDT ODD. */
    control = USB_KHCI_BDT_GET_CONTROL((uint32_t)khciState->bdt, endpoint, direction, bdtOdd);
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	685b      	ldr	r3, [r3, #4]
    11b6:	0a5b      	lsrs	r3, r3, #9
    11b8:	025a      	lsls	r2, r3, #9
    11ba:	233a      	movs	r3, #58	; 0x3a
    11bc:	18fb      	adds	r3, r7, r3
    11be:	781b      	ldrb	r3, [r3, #0]
    11c0:	0159      	lsls	r1, r3, #5
    11c2:	23f0      	movs	r3, #240	; 0xf0
    11c4:	005b      	lsls	r3, r3, #1
    11c6:	400b      	ands	r3, r1
    11c8:	431a      	orrs	r2, r3
    11ca:	2339      	movs	r3, #57	; 0x39
    11cc:	18fb      	adds	r3, r7, r3
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	011b      	lsls	r3, r3, #4
    11d2:	2110      	movs	r1, #16
    11d4:	400b      	ands	r3, r1
    11d6:	431a      	orrs	r2, r3
    11d8:	2338      	movs	r3, #56	; 0x38
    11da:	18fb      	adds	r3, r7, r3
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	00db      	lsls	r3, r3, #3
    11e0:	2108      	movs	r1, #8
    11e2:	400b      	ands	r3, r1
    11e4:	4313      	orrs	r3, r2
    11e6:	681b      	ldr	r3, [r3, #0]
    11e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the buffer field of the BDT element according to the endpoint number, the direction and finished BDT ODD. */
    bdtBuffer = (uint8_t *)USB_KHCI_BDT_GET_ADDRESS((uint32_t)khciState->bdt, endpoint, direction, bdtOdd);
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	685b      	ldr	r3, [r3, #4]
    11ee:	0a5b      	lsrs	r3, r3, #9
    11f0:	025a      	lsls	r2, r3, #9
    11f2:	233a      	movs	r3, #58	; 0x3a
    11f4:	18fb      	adds	r3, r7, r3
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	0159      	lsls	r1, r3, #5
    11fa:	23f0      	movs	r3, #240	; 0xf0
    11fc:	005b      	lsls	r3, r3, #1
    11fe:	400b      	ands	r3, r1
    1200:	431a      	orrs	r2, r3
    1202:	2339      	movs	r3, #57	; 0x39
    1204:	18fb      	adds	r3, r7, r3
    1206:	781b      	ldrb	r3, [r3, #0]
    1208:	011b      	lsls	r3, r3, #4
    120a:	2110      	movs	r1, #16
    120c:	400b      	ands	r3, r1
    120e:	431a      	orrs	r2, r3
    1210:	2338      	movs	r3, #56	; 0x38
    1212:	18fb      	adds	r3, r7, r3
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	00db      	lsls	r3, r3, #3
    1218:	2108      	movs	r1, #8
    121a:	400b      	ands	r3, r1
    121c:	4313      	orrs	r3, r2
    121e:	3304      	adds	r3, #4
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	633b      	str	r3, [r7, #48]	; 0x30

    /* Get the transferred length. */
    length = ((USB_LONG_FROM_LITTLE_ENDIAN(control)) >> 16U) & 0x3FFU;
    1224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1226:	0c1b      	lsrs	r3, r3, #16
    1228:	059b      	lsls	r3, r3, #22
    122a:	0d9b      	lsrs	r3, r3, #22
    122c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the transferred length. */
    isSetup = (USB_KHCI_BDT_DEVICE_SETUP_TOKEN == ((uint8_t)(((USB_LONG_FROM_LITTLE_ENDIAN(control)) >> 2U) & 0x0FU))) ?
    122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1230:	089b      	lsrs	r3, r3, #2
    1232:	b2db      	uxtb	r3, r3
    1234:	001a      	movs	r2, r3
    1236:	230f      	movs	r3, #15
    1238:	4013      	ands	r3, r2
    123a:	2b0d      	cmp	r3, #13
    123c:	d101      	bne.n	1242 <USB_DeviceKhciInterruptTokenDone+0xe6>
    123e:	2201      	movs	r2, #1
    1240:	e000      	b.n	1244 <USB_DeviceKhciInterruptTokenDone+0xe8>
    1242:	2200      	movs	r2, #0
    1244:	232b      	movs	r3, #43	; 0x2b
    1246:	18fb      	adds	r3, r7, r3
    1248:	701a      	strb	r2, [r3, #0]
                  1U :
                  0U;

    index = ((uint8_t)((uint32_t)endpoint << 1U)) | (uint8_t)direction;
    124a:	233a      	movs	r3, #58	; 0x3a
    124c:	18fb      	adds	r3, r7, r3
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	18db      	adds	r3, r3, r3
    1252:	b2d9      	uxtb	r1, r3
    1254:	232a      	movs	r3, #42	; 0x2a
    1256:	18fb      	adds	r3, r7, r3
    1258:	2239      	movs	r2, #57	; 0x39
    125a:	18ba      	adds	r2, r7, r2
    125c:	7812      	ldrb	r2, [r2, #0]
    125e:	430a      	orrs	r2, r1
    1260:	701a      	strb	r2, [r3, #0]

    if (0U == khciState->endpointState[index].stateUnion.stateBitField.transferring)
    1262:	232a      	movs	r3, #42	; 0x2a
    1264:	18fb      	adds	r3, r7, r3
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	687a      	ldr	r2, [r7, #4]
    126a:	2128      	movs	r1, #40	; 0x28
    126c:	011b      	lsls	r3, r3, #4
    126e:	18d3      	adds	r3, r2, r3
    1270:	185b      	adds	r3, r3, r1
    1272:	795b      	ldrb	r3, [r3, #5]
    1274:	065b      	lsls	r3, r3, #25
    1276:	0fdb      	lsrs	r3, r3, #31
    1278:	b2db      	uxtb	r3, r3
    127a:	2b00      	cmp	r3, #0
    127c:	d100      	bne.n	1280 <USB_DeviceKhciInterruptTokenDone+0x124>
    127e:	e284      	b.n	178a <USB_DeviceKhciInterruptTokenDone+0x62e>
    {
        return;
    }

    if (isSetup)
    1280:	232b      	movs	r3, #43	; 0x2b
    1282:	18fb      	adds	r3, r7, r3
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	2b00      	cmp	r3, #0
    1288:	d005      	beq.n	1296 <USB_DeviceKhciInterruptTokenDone+0x13a>
    {
        khciState->setupBufferIndex = bdtOdd;
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	2238      	movs	r2, #56	; 0x38
    128e:	18ba      	adds	r2, r7, r2
    1290:	21a3      	movs	r1, #163	; 0xa3
    1292:	7812      	ldrb	r2, [r2, #0]
    1294:	545a      	strb	r2, [r3, r1]
    }

    /* USB_IN, Send completed */
    if (direction == USB_IN)
    1296:	2339      	movs	r3, #57	; 0x39
    1298:	18fb      	adds	r3, r7, r3
    129a:	781b      	ldrb	r3, [r3, #0]
    129c:	2b01      	cmp	r3, #1
    129e:	d000      	beq.n	12a2 <USB_DeviceKhciInterruptTokenDone+0x146>
    12a0:	e109      	b.n	14b6 <USB_DeviceKhciInterruptTokenDone+0x35a>
    {
        /* The transferred length */
        khciState->endpointState[index].transferDone += length;
    12a2:	232a      	movs	r3, #42	; 0x2a
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	7818      	ldrb	r0, [r3, #0]
    12a8:	232a      	movs	r3, #42	; 0x2a
    12aa:	18fb      	adds	r3, r7, r3
    12ac:	781b      	ldrb	r3, [r3, #0]
    12ae:	687a      	ldr	r2, [r7, #4]
    12b0:	011b      	lsls	r3, r3, #4
    12b2:	18d3      	adds	r3, r2, r3
    12b4:	3328      	adds	r3, #40	; 0x28
    12b6:	681a      	ldr	r2, [r3, #0]
    12b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12ba:	18d2      	adds	r2, r2, r3
    12bc:	6879      	ldr	r1, [r7, #4]
    12be:	0103      	lsls	r3, r0, #4
    12c0:	18cb      	adds	r3, r1, r3
    12c2:	3328      	adds	r3, #40	; 0x28
    12c4:	601a      	str	r2, [r3, #0]

        /* Remaining length */
        remainingLength = khciState->endpointState[index].transferLength - khciState->endpointState[index].transferDone;
    12c6:	232a      	movs	r3, #42	; 0x2a
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	687a      	ldr	r2, [r7, #4]
    12ce:	3302      	adds	r3, #2
    12d0:	011b      	lsls	r3, r3, #4
    12d2:	18d3      	adds	r3, r2, r3
    12d4:	3304      	adds	r3, #4
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	232a      	movs	r3, #42	; 0x2a
    12da:	18fb      	adds	r3, r7, r3
    12dc:	781b      	ldrb	r3, [r3, #0]
    12de:	6879      	ldr	r1, [r7, #4]
    12e0:	011b      	lsls	r3, r3, #4
    12e2:	18cb      	adds	r3, r1, r3
    12e4:	3328      	adds	r3, #40	; 0x28
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	1ad3      	subs	r3, r2, r3
    12ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Change the data toggle flag */
        khciState->endpointState[index].stateUnion.stateBitField.data0 ^= 1U;
    12ec:	232a      	movs	r3, #42	; 0x2a
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	781b      	ldrb	r3, [r3, #0]
    12f2:	222a      	movs	r2, #42	; 0x2a
    12f4:	18ba      	adds	r2, r7, r2
    12f6:	7812      	ldrb	r2, [r2, #0]
    12f8:	6879      	ldr	r1, [r7, #4]
    12fa:	2028      	movs	r0, #40	; 0x28
    12fc:	0112      	lsls	r2, r2, #4
    12fe:	188a      	adds	r2, r1, r2
    1300:	1812      	adds	r2, r2, r0
    1302:	7952      	ldrb	r2, [r2, #5]
    1304:	0712      	lsls	r2, r2, #28
    1306:	0fd2      	lsrs	r2, r2, #31
    1308:	b2d2      	uxtb	r2, r2
    130a:	2101      	movs	r1, #1
    130c:	404a      	eors	r2, r1
    130e:	b2d2      	uxtb	r2, r2
    1310:	6879      	ldr	r1, [r7, #4]
    1312:	2028      	movs	r0, #40	; 0x28
    1314:	011b      	lsls	r3, r3, #4
    1316:	18cb      	adds	r3, r1, r3
    1318:	181b      	adds	r3, r3, r0
    131a:	2101      	movs	r1, #1
    131c:	400a      	ands	r2, r1
    131e:	00d0      	lsls	r0, r2, #3
    1320:	795a      	ldrb	r2, [r3, #5]
    1322:	2108      	movs	r1, #8
    1324:	438a      	bics	r2, r1
    1326:	1c11      	adds	r1, r2, #0
    1328:	1c02      	adds	r2, r0, #0
    132a:	430a      	orrs	r2, r1
    132c:	715a      	strb	r2, [r3, #5]
        /* Change the BDT odd toggle flag */
        khciState->endpointState[index].stateUnion.stateBitField.bdtOdd ^= 1U;
    132e:	232a      	movs	r3, #42	; 0x2a
    1330:	18fb      	adds	r3, r7, r3
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	222a      	movs	r2, #42	; 0x2a
    1336:	18ba      	adds	r2, r7, r2
    1338:	7812      	ldrb	r2, [r2, #0]
    133a:	6879      	ldr	r1, [r7, #4]
    133c:	2028      	movs	r0, #40	; 0x28
    133e:	0112      	lsls	r2, r2, #4
    1340:	188a      	adds	r2, r1, r2
    1342:	1812      	adds	r2, r2, r0
    1344:	7952      	ldrb	r2, [r2, #5]
    1346:	06d2      	lsls	r2, r2, #27
    1348:	0fd2      	lsrs	r2, r2, #31
    134a:	b2d2      	uxtb	r2, r2
    134c:	2101      	movs	r1, #1
    134e:	404a      	eors	r2, r1
    1350:	b2d2      	uxtb	r2, r2
    1352:	6879      	ldr	r1, [r7, #4]
    1354:	2028      	movs	r0, #40	; 0x28
    1356:	011b      	lsls	r3, r3, #4
    1358:	18cb      	adds	r3, r1, r3
    135a:	181b      	adds	r3, r3, r0
    135c:	2101      	movs	r1, #1
    135e:	400a      	ands	r2, r1
    1360:	0110      	lsls	r0, r2, #4
    1362:	795a      	ldrb	r2, [r3, #5]
    1364:	2110      	movs	r1, #16
    1366:	438a      	bics	r2, r1
    1368:	1c11      	adds	r1, r2, #0
    136a:	1c02      	adds	r2, r0, #0
    136c:	430a      	orrs	r2, r1
    136e:	715a      	strb	r2, [r3, #5]
        /*
         * The transfer is completed when one of the following conditions meet:
         * 1. The remaining length is zero.
         * 2. The length of current transcation is less than the max packet size of the current pipe.
         */
        if ((0U == remainingLength) ||
    1370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1372:	2b00      	cmp	r3, #0
    1374:	d010      	beq.n	1398 <USB_DeviceKhciInterruptTokenDone+0x23c>
            (khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize > length))
    1376:	232a      	movs	r3, #42	; 0x2a
    1378:	18fb      	adds	r3, r7, r3
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	687a      	ldr	r2, [r7, #4]
    137e:	2128      	movs	r1, #40	; 0x28
    1380:	011b      	lsls	r3, r3, #4
    1382:	18d3      	adds	r3, r2, r3
    1384:	185b      	adds	r3, r3, r1
    1386:	889b      	ldrh	r3, [r3, #4]
    1388:	059b      	lsls	r3, r3, #22
    138a:	0d9b      	lsrs	r3, r3, #22
    138c:	b29b      	uxth	r3, r3
    138e:	001a      	movs	r2, r3
        if ((0U == remainingLength) ||
    1390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1392:	429a      	cmp	r2, r3
    1394:	d800      	bhi.n	1398 <USB_DeviceKhciInterruptTokenDone+0x23c>
    1396:	e07b      	b.n	1490 <USB_DeviceKhciInterruptTokenDone+0x334>
        {
            message.length = khciState->endpointState[index].transferDone;
    1398:	232a      	movs	r3, #42	; 0x2a
    139a:	18fb      	adds	r3, r7, r3
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	687a      	ldr	r2, [r7, #4]
    13a0:	011b      	lsls	r3, r3, #4
    13a2:	18d3      	adds	r3, r2, r3
    13a4:	3328      	adds	r3, #40	; 0x28
    13a6:	681a      	ldr	r2, [r3, #0]
    13a8:	230c      	movs	r3, #12
    13aa:	18fb      	adds	r3, r7, r3
    13ac:	605a      	str	r2, [r3, #4]
            message.buffer = khciState->endpointState[index].transferBuffer;
    13ae:	232a      	movs	r3, #42	; 0x2a
    13b0:	18fb      	adds	r3, r7, r3
    13b2:	781a      	ldrb	r2, [r3, #0]
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	3202      	adds	r2, #2
    13b8:	0112      	lsls	r2, r2, #4
    13ba:	58d2      	ldr	r2, [r2, r3]
    13bc:	230c      	movs	r3, #12
    13be:	18fb      	adds	r3, r7, r3
    13c0:	601a      	str	r2, [r3, #0]
            khciState->endpointState[index].stateUnion.stateBitField.transferring = 0U;
    13c2:	232a      	movs	r3, #42	; 0x2a
    13c4:	18fb      	adds	r3, r7, r3
    13c6:	781b      	ldrb	r3, [r3, #0]
    13c8:	687a      	ldr	r2, [r7, #4]
    13ca:	2128      	movs	r1, #40	; 0x28
    13cc:	011b      	lsls	r3, r3, #4
    13ce:	18d3      	adds	r3, r2, r3
    13d0:	185b      	adds	r3, r3, r1
    13d2:	795a      	ldrb	r2, [r3, #5]
    13d4:	2140      	movs	r1, #64	; 0x40
    13d6:	438a      	bics	r2, r1
    13d8:	715a      	strb	r2, [r3, #5]

            /*
             * Whether need to send ZLT when the pipe is control in pipe and the transferred length of current
             * transaction equals to max packet size.
             */
            if ((length) && (!(length % khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize)))
    13da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13dc:	2b00      	cmp	r3, #0
    13de:	d100      	bne.n	13e2 <USB_DeviceKhciInterruptTokenDone+0x286>
    13e0:	e1aa      	b.n	1738 <USB_DeviceKhciInterruptTokenDone+0x5dc>
    13e2:	232a      	movs	r3, #42	; 0x2a
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	687a      	ldr	r2, [r7, #4]
    13ea:	2128      	movs	r1, #40	; 0x28
    13ec:	011b      	lsls	r3, r3, #4
    13ee:	18d3      	adds	r3, r2, r3
    13f0:	185b      	adds	r3, r3, r1
    13f2:	889b      	ldrh	r3, [r3, #4]
    13f4:	059b      	lsls	r3, r3, #22
    13f6:	0d9b      	lsrs	r3, r3, #22
    13f8:	b29b      	uxth	r3, r3
    13fa:	001a      	movs	r2, r3
    13fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13fe:	0011      	movs	r1, r2
    1400:	0018      	movs	r0, r3
    1402:	f7ff f88b 	bl	51c <__aeabi_uidivmod>
    1406:	1e0b      	subs	r3, r1, #0
    1408:	d000      	beq.n	140c <USB_DeviceKhciInterruptTokenDone+0x2b0>
    140a:	e195      	b.n	1738 <USB_DeviceKhciInterruptTokenDone+0x5dc>
            {
                if (USB_CONTROL_ENDPOINT == endpoint)
    140c:	233a      	movs	r3, #58	; 0x3a
    140e:	18fb      	adds	r3, r7, r3
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	2b00      	cmp	r3, #0
    1414:	d122      	bne.n	145c <USB_DeviceKhciInterruptTokenDone+0x300>
                {
                    usb_setup_struct_t *setup_packet =
                        (usb_setup_struct_t
                             *)(&khciState->setupPacketBuffer[(USB_SETUP_PACKET_SIZE * khciState->setupBufferIndex)]);
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	22a3      	movs	r2, #163	; 0xa3
    141a:	5c9b      	ldrb	r3, [r3, r2]
    141c:	00db      	lsls	r3, r3, #3
                    usb_setup_struct_t *setup_packet =
    141e:	3308      	adds	r3, #8
    1420:	687a      	ldr	r2, [r7, #4]
    1422:	18d3      	adds	r3, r2, r3
    1424:	3304      	adds	r3, #4
    1426:	623b      	str	r3, [r7, #32]
                    /*
                     * Send the ZLT and terminate the token done interrupt service when the tranferred length in data
                     * phase
                     * is less than the host request.
                     */
                    if (USB_SHORT_FROM_LITTLE_ENDIAN(setup_packet->wLength) >
    1428:	6a3b      	ldr	r3, [r7, #32]
    142a:	88db      	ldrh	r3, [r3, #6]
    142c:	0019      	movs	r1, r3
                        khciState->endpointState[index].transferLength)
    142e:	232a      	movs	r3, #42	; 0x2a
    1430:	18fb      	adds	r3, r7, r3
    1432:	781b      	ldrb	r3, [r3, #0]
    1434:	687a      	ldr	r2, [r7, #4]
    1436:	3302      	adds	r3, #2
    1438:	011b      	lsls	r3, r3, #4
    143a:	18d3      	adds	r3, r2, r3
    143c:	3304      	adds	r3, #4
    143e:	681b      	ldr	r3, [r3, #0]
                    if (USB_SHORT_FROM_LITTLE_ENDIAN(setup_packet->wLength) >
    1440:	4299      	cmp	r1, r3
    1442:	d800      	bhi.n	1446 <USB_DeviceKhciInterruptTokenDone+0x2ea>
    1444:	e178      	b.n	1738 <USB_DeviceKhciInterruptTokenDone+0x5dc>
                    {
                        (void)USB_DeviceKhciEndpointTransfer(khciState, endpoint, USB_IN, (uint8_t *)NULL, 0U);
    1446:	233a      	movs	r3, #58	; 0x3a
    1448:	18fb      	adds	r3, r7, r3
    144a:	7819      	ldrb	r1, [r3, #0]
    144c:	6878      	ldr	r0, [r7, #4]
    144e:	2300      	movs	r3, #0
    1450:	9300      	str	r3, [sp, #0]
    1452:	2300      	movs	r3, #0
    1454:	2201      	movs	r2, #1
    1456:	f7ff faad 	bl	9b4 <USB_DeviceKhciEndpointTransfer>
                        return;
    145a:	e197      	b.n	178c <USB_DeviceKhciInterruptTokenDone+0x630>
                    }
                }
                else if (khciState->endpointState[index].stateUnion.stateBitField.zlt)
    145c:	232a      	movs	r3, #42	; 0x2a
    145e:	18fb      	adds	r3, r7, r3
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	687a      	ldr	r2, [r7, #4]
    1464:	2128      	movs	r1, #40	; 0x28
    1466:	011b      	lsls	r3, r3, #4
    1468:	18d3      	adds	r3, r2, r3
    146a:	185b      	adds	r3, r3, r1
    146c:	795b      	ldrb	r3, [r3, #5]
    146e:	061b      	lsls	r3, r3, #24
    1470:	0fdb      	lsrs	r3, r3, #31
    1472:	b2db      	uxtb	r3, r3
    1474:	2b00      	cmp	r3, #0
    1476:	d100      	bne.n	147a <USB_DeviceKhciInterruptTokenDone+0x31e>
    1478:	e15e      	b.n	1738 <USB_DeviceKhciInterruptTokenDone+0x5dc>
                {
                    (void)USB_DeviceKhciEndpointTransfer(khciState, endpoint, USB_IN, (uint8_t *)NULL, 0U);
    147a:	233a      	movs	r3, #58	; 0x3a
    147c:	18fb      	adds	r3, r7, r3
    147e:	7819      	ldrb	r1, [r3, #0]
    1480:	6878      	ldr	r0, [r7, #4]
    1482:	2300      	movs	r3, #0
    1484:	9300      	str	r3, [sp, #0]
    1486:	2300      	movs	r3, #0
    1488:	2201      	movs	r2, #1
    148a:	f7ff fa93 	bl	9b4 <USB_DeviceKhciEndpointTransfer>
                    return;
    148e:	e17d      	b.n	178c <USB_DeviceKhciInterruptTokenDone+0x630>
            }
        }
        else
        {
            /* Send remaining data and terminate the token done interrupt service. */
            (void)USB_DeviceKhciSend(khciState, endpoint | (USB_IN << 0x07U),
    1490:	233a      	movs	r3, #58	; 0x3a
    1492:	18fb      	adds	r3, r7, r3
    1494:	781b      	ldrb	r3, [r3, #0]
    1496:	2280      	movs	r2, #128	; 0x80
    1498:	4252      	negs	r2, r2
    149a:	4313      	orrs	r3, r2
    149c:	b2d9      	uxtb	r1, r3
    149e:	232a      	movs	r3, #42	; 0x2a
    14a0:	18fb      	adds	r3, r7, r3
    14a2:	781a      	ldrb	r2, [r3, #0]
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	3202      	adds	r2, #2
    14a8:	0112      	lsls	r2, r2, #4
    14aa:	58d2      	ldr	r2, [r2, r3]
    14ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ae:	6878      	ldr	r0, [r7, #4]
    14b0:	f000 fa7b 	bl	19aa <USB_DeviceKhciSend>
                                     khciState->endpointState[index].transferBuffer, remainingLength);
            return;
    14b4:	e16a      	b.n	178c <USB_DeviceKhciInterruptTokenDone+0x630>
        }
    }
    else
    {
        if ((USB_CONTROL_ENDPOINT == endpoint) && (0U == length))
    14b6:	233a      	movs	r3, #58	; 0x3a
    14b8:	18fb      	adds	r3, r7, r3
    14ba:	781b      	ldrb	r3, [r3, #0]
    14bc:	2b00      	cmp	r3, #0
    14be:	d10b      	bne.n	14d8 <USB_DeviceKhciInterruptTokenDone+0x37c>
    14c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14c2:	2b00      	cmp	r3, #0
    14c4:	d108      	bne.n	14d8 <USB_DeviceKhciInterruptTokenDone+0x37c>
        {
            message.length = 0U;
    14c6:	230c      	movs	r3, #12
    14c8:	18fb      	adds	r3, r7, r3
    14ca:	2200      	movs	r2, #0
    14cc:	605a      	str	r2, [r3, #4]
            message.buffer = (uint8_t *)NULL;
    14ce:	230c      	movs	r3, #12
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	2200      	movs	r2, #0
    14d4:	601a      	str	r2, [r3, #0]
    14d6:	e130      	b.n	173a <USB_DeviceKhciInterruptTokenDone+0x5de>
        }
        else
        {
            if (0U == khciState->endpointState[index].stateUnion.stateBitField.dmaAlign)
    14d8:	232a      	movs	r3, #42	; 0x2a
    14da:	18fb      	adds	r3, r7, r3
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	687a      	ldr	r2, [r7, #4]
    14e0:	2128      	movs	r1, #40	; 0x28
    14e2:	011b      	lsls	r3, r3, #4
    14e4:	18d3      	adds	r3, r2, r3
    14e6:	185b      	adds	r3, r3, r1
    14e8:	795b      	ldrb	r3, [r3, #5]
    14ea:	069b      	lsls	r3, r3, #26
    14ec:	0fdb      	lsrs	r3, r3, #31
    14ee:	b2db      	uxtb	r3, r3
    14f0:	2b00      	cmp	r3, #0
    14f2:	d147      	bne.n	1584 <USB_DeviceKhciInterruptTokenDone+0x428>
            {
                uint8_t *buffer = (uint8_t *)USB_LONG_FROM_LITTLE_ENDIAN(
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	0a5b      	lsrs	r3, r3, #9
    14fa:	025a      	lsls	r2, r3, #9
    14fc:	233a      	movs	r3, #58	; 0x3a
    14fe:	18fb      	adds	r3, r7, r3
    1500:	781b      	ldrb	r3, [r3, #0]
    1502:	0159      	lsls	r1, r3, #5
    1504:	23f0      	movs	r3, #240	; 0xf0
    1506:	005b      	lsls	r3, r3, #1
    1508:	400b      	ands	r3, r1
    150a:	431a      	orrs	r2, r3
    150c:	232a      	movs	r3, #42	; 0x2a
    150e:	18fb      	adds	r3, r7, r3
    1510:	781b      	ldrb	r3, [r3, #0]
    1512:	6879      	ldr	r1, [r7, #4]
    1514:	2028      	movs	r0, #40	; 0x28
    1516:	011b      	lsls	r3, r3, #4
    1518:	18cb      	adds	r3, r1, r3
    151a:	181b      	adds	r3, r3, r0
    151c:	795b      	ldrb	r3, [r3, #5]
    151e:	06db      	lsls	r3, r3, #27
    1520:	0fdb      	lsrs	r3, r3, #31
    1522:	b2db      	uxtb	r3, r3
    1524:	00db      	lsls	r3, r3, #3
    1526:	4313      	orrs	r3, r2
    1528:	3304      	adds	r3, #4
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	61fb      	str	r3, [r7, #28]
                    USB_KHCI_BDT_GET_ADDRESS((uint32_t)khciState->bdt, endpoint, USB_OUT,
                                             khciState->endpointState[index].stateUnion.stateBitField.bdtOdd));
                uint8_t *transferBuffer =
                    khciState->endpointState[index].transferBuffer + khciState->endpointState[index].transferDone;
    152e:	232a      	movs	r3, #42	; 0x2a
    1530:	18fb      	adds	r3, r7, r3
    1532:	781a      	ldrb	r2, [r3, #0]
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	3202      	adds	r2, #2
    1538:	0112      	lsls	r2, r2, #4
    153a:	58d2      	ldr	r2, [r2, r3]
    153c:	232a      	movs	r3, #42	; 0x2a
    153e:	18fb      	adds	r3, r7, r3
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	6879      	ldr	r1, [r7, #4]
    1544:	011b      	lsls	r3, r3, #4
    1546:	18cb      	adds	r3, r1, r3
    1548:	3328      	adds	r3, #40	; 0x28
    154a:	681b      	ldr	r3, [r3, #0]
                uint8_t *transferBuffer =
    154c:	18d3      	adds	r3, r2, r3
    154e:	61bb      	str	r3, [r7, #24]
                if (buffer != transferBuffer)
    1550:	69fa      	ldr	r2, [r7, #28]
    1552:	69bb      	ldr	r3, [r7, #24]
    1554:	429a      	cmp	r2, r3
    1556:	d011      	beq.n	157c <USB_DeviceKhciInterruptTokenDone+0x420>
                {
                    for (uint32_t i = 0U; i < length; i++)
    1558:	2300      	movs	r3, #0
    155a:	63fb      	str	r3, [r7, #60]	; 0x3c
    155c:	e00a      	b.n	1574 <USB_DeviceKhciInterruptTokenDone+0x418>
                    {
                        transferBuffer[i] = buffer[i];
    155e:	69ba      	ldr	r2, [r7, #24]
    1560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1562:	18d3      	adds	r3, r2, r3
    1564:	69f9      	ldr	r1, [r7, #28]
    1566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1568:	188a      	adds	r2, r1, r2
    156a:	7812      	ldrb	r2, [r2, #0]
    156c:	701a      	strb	r2, [r3, #0]
                    for (uint32_t i = 0U; i < length; i++)
    156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1570:	3301      	adds	r3, #1
    1572:	63fb      	str	r3, [r7, #60]	; 0x3c
    1574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1578:	429a      	cmp	r2, r3
    157a:	d3f0      	bcc.n	155e <USB_DeviceKhciInterruptTokenDone+0x402>
                    }
                }
                khciState->isDmaAlignBufferInusing = 0U;
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	22a0      	movs	r2, #160	; 0xa0
    1580:	2100      	movs	r1, #0
    1582:	5499      	strb	r1, [r3, r2]
            }
            /* The transferred length */
            khciState->endpointState[index].transferDone += length;
    1584:	232a      	movs	r3, #42	; 0x2a
    1586:	18fb      	adds	r3, r7, r3
    1588:	7818      	ldrb	r0, [r3, #0]
    158a:	232a      	movs	r3, #42	; 0x2a
    158c:	18fb      	adds	r3, r7, r3
    158e:	781b      	ldrb	r3, [r3, #0]
    1590:	687a      	ldr	r2, [r7, #4]
    1592:	011b      	lsls	r3, r3, #4
    1594:	18d3      	adds	r3, r2, r3
    1596:	3328      	adds	r3, #40	; 0x28
    1598:	681a      	ldr	r2, [r3, #0]
    159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    159c:	18d2      	adds	r2, r2, r3
    159e:	6879      	ldr	r1, [r7, #4]
    15a0:	0103      	lsls	r3, r0, #4
    15a2:	18cb      	adds	r3, r1, r3
    15a4:	3328      	adds	r3, #40	; 0x28
    15a6:	601a      	str	r2, [r3, #0]
            /* Remaining length */
            remainingLength =
                khciState->endpointState[index].transferLength - khciState->endpointState[index].transferDone;
    15a8:	232a      	movs	r3, #42	; 0x2a
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	781b      	ldrb	r3, [r3, #0]
    15ae:	687a      	ldr	r2, [r7, #4]
    15b0:	3302      	adds	r3, #2
    15b2:	011b      	lsls	r3, r3, #4
    15b4:	18d3      	adds	r3, r2, r3
    15b6:	3304      	adds	r3, #4
    15b8:	681a      	ldr	r2, [r3, #0]
    15ba:	232a      	movs	r3, #42	; 0x2a
    15bc:	18fb      	adds	r3, r7, r3
    15be:	781b      	ldrb	r3, [r3, #0]
    15c0:	6879      	ldr	r1, [r7, #4]
    15c2:	011b      	lsls	r3, r3, #4
    15c4:	18cb      	adds	r3, r1, r3
    15c6:	3328      	adds	r3, #40	; 0x28
    15c8:	681b      	ldr	r3, [r3, #0]
            remainingLength =
    15ca:	1ad3      	subs	r3, r2, r3
    15cc:	627b      	str	r3, [r7, #36]	; 0x24

            if ((USB_CONTROL_ENDPOINT == endpoint) && isSetup)
    15ce:	233a      	movs	r3, #58	; 0x3a
    15d0:	18fb      	adds	r3, r7, r3
    15d2:	781b      	ldrb	r3, [r3, #0]
    15d4:	2b00      	cmp	r3, #0
    15d6:	d113      	bne.n	1600 <USB_DeviceKhciInterruptTokenDone+0x4a4>
    15d8:	232b      	movs	r3, #43	; 0x2b
    15da:	18fb      	adds	r3, r7, r3
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	2b00      	cmp	r3, #0
    15e0:	d00e      	beq.n	1600 <USB_DeviceKhciInterruptTokenDone+0x4a4>
            {
                khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].stateUnion.stateBitField.data0 = 1U;
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	222c      	movs	r2, #44	; 0x2c
    15e6:	189b      	adds	r3, r3, r2
    15e8:	785a      	ldrb	r2, [r3, #1]
    15ea:	2108      	movs	r1, #8
    15ec:	430a      	orrs	r2, r1
    15ee:	705a      	strb	r2, [r3, #1]
                khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_IN].stateUnion.stateBitField.data0 = 1U;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	223c      	movs	r2, #60	; 0x3c
    15f4:	189b      	adds	r3, r3, r2
    15f6:	785a      	ldrb	r2, [r3, #1]
    15f8:	2108      	movs	r1, #8
    15fa:	430a      	orrs	r2, r1
    15fc:	705a      	strb	r2, [r3, #1]
    15fe:	e020      	b.n	1642 <USB_DeviceKhciInterruptTokenDone+0x4e6>
            }
            else
            {
                khciState->endpointState[index].stateUnion.stateBitField.data0 ^= 1U;
    1600:	232a      	movs	r3, #42	; 0x2a
    1602:	18fb      	adds	r3, r7, r3
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	222a      	movs	r2, #42	; 0x2a
    1608:	18ba      	adds	r2, r7, r2
    160a:	7812      	ldrb	r2, [r2, #0]
    160c:	6879      	ldr	r1, [r7, #4]
    160e:	2028      	movs	r0, #40	; 0x28
    1610:	0112      	lsls	r2, r2, #4
    1612:	188a      	adds	r2, r1, r2
    1614:	1812      	adds	r2, r2, r0
    1616:	7952      	ldrb	r2, [r2, #5]
    1618:	0712      	lsls	r2, r2, #28
    161a:	0fd2      	lsrs	r2, r2, #31
    161c:	b2d2      	uxtb	r2, r2
    161e:	2101      	movs	r1, #1
    1620:	404a      	eors	r2, r1
    1622:	b2d2      	uxtb	r2, r2
    1624:	6879      	ldr	r1, [r7, #4]
    1626:	2028      	movs	r0, #40	; 0x28
    1628:	011b      	lsls	r3, r3, #4
    162a:	18cb      	adds	r3, r1, r3
    162c:	181b      	adds	r3, r3, r0
    162e:	2101      	movs	r1, #1
    1630:	400a      	ands	r2, r1
    1632:	00d0      	lsls	r0, r2, #3
    1634:	795a      	ldrb	r2, [r3, #5]
    1636:	2108      	movs	r1, #8
    1638:	438a      	bics	r2, r1
    163a:	1c11      	adds	r1, r2, #0
    163c:	1c02      	adds	r2, r0, #0
    163e:	430a      	orrs	r2, r1
    1640:	715a      	strb	r2, [r3, #5]
            }
            khciState->endpointState[index].stateUnion.stateBitField.bdtOdd ^= 1U;
    1642:	232a      	movs	r3, #42	; 0x2a
    1644:	18fb      	adds	r3, r7, r3
    1646:	781b      	ldrb	r3, [r3, #0]
    1648:	222a      	movs	r2, #42	; 0x2a
    164a:	18ba      	adds	r2, r7, r2
    164c:	7812      	ldrb	r2, [r2, #0]
    164e:	6879      	ldr	r1, [r7, #4]
    1650:	2028      	movs	r0, #40	; 0x28
    1652:	0112      	lsls	r2, r2, #4
    1654:	188a      	adds	r2, r1, r2
    1656:	1812      	adds	r2, r2, r0
    1658:	7952      	ldrb	r2, [r2, #5]
    165a:	06d2      	lsls	r2, r2, #27
    165c:	0fd2      	lsrs	r2, r2, #31
    165e:	b2d2      	uxtb	r2, r2
    1660:	2101      	movs	r1, #1
    1662:	404a      	eors	r2, r1
    1664:	b2d2      	uxtb	r2, r2
    1666:	6879      	ldr	r1, [r7, #4]
    1668:	2028      	movs	r0, #40	; 0x28
    166a:	011b      	lsls	r3, r3, #4
    166c:	18cb      	adds	r3, r1, r3
    166e:	181b      	adds	r3, r3, r0
    1670:	2101      	movs	r1, #1
    1672:	400a      	ands	r2, r1
    1674:	0110      	lsls	r0, r2, #4
    1676:	795a      	ldrb	r2, [r3, #5]
    1678:	2110      	movs	r1, #16
    167a:	438a      	bics	r2, r1
    167c:	1c11      	adds	r1, r2, #0
    167e:	1c02      	adds	r2, r0, #0
    1680:	430a      	orrs	r2, r1
    1682:	715a      	strb	r2, [r3, #5]
            if ((!khciState->endpointState[index].transferLength) || (!remainingLength) ||
    1684:	232a      	movs	r3, #42	; 0x2a
    1686:	18fb      	adds	r3, r7, r3
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	687a      	ldr	r2, [r7, #4]
    168c:	3302      	adds	r3, #2
    168e:	011b      	lsls	r3, r3, #4
    1690:	18d3      	adds	r3, r2, r3
    1692:	3304      	adds	r3, #4
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	2b00      	cmp	r3, #0
    1698:	d012      	beq.n	16c0 <USB_DeviceKhciInterruptTokenDone+0x564>
    169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    169c:	2b00      	cmp	r3, #0
    169e:	d00f      	beq.n	16c0 <USB_DeviceKhciInterruptTokenDone+0x564>
                (khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize > length))
    16a0:	232a      	movs	r3, #42	; 0x2a
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	687a      	ldr	r2, [r7, #4]
    16a8:	2128      	movs	r1, #40	; 0x28
    16aa:	011b      	lsls	r3, r3, #4
    16ac:	18d3      	adds	r3, r2, r3
    16ae:	185b      	adds	r3, r3, r1
    16b0:	889b      	ldrh	r3, [r3, #4]
    16b2:	059b      	lsls	r3, r3, #22
    16b4:	0d9b      	lsrs	r3, r3, #22
    16b6:	b29b      	uxth	r3, r3
    16b8:	001a      	movs	r2, r3
            if ((!khciState->endpointState[index].transferLength) || (!remainingLength) ||
    16ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    16bc:	429a      	cmp	r2, r3
    16be:	d92b      	bls.n	1718 <USB_DeviceKhciInterruptTokenDone+0x5bc>
            {
                message.length = khciState->endpointState[index].transferDone;
    16c0:	232a      	movs	r3, #42	; 0x2a
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	687a      	ldr	r2, [r7, #4]
    16c8:	011b      	lsls	r3, r3, #4
    16ca:	18d3      	adds	r3, r2, r3
    16cc:	3328      	adds	r3, #40	; 0x28
    16ce:	681a      	ldr	r2, [r3, #0]
    16d0:	230c      	movs	r3, #12
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	605a      	str	r2, [r3, #4]
                if (isSetup)
    16d6:	232b      	movs	r3, #43	; 0x2b
    16d8:	18fb      	adds	r3, r7, r3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b00      	cmp	r3, #0
    16de:	d004      	beq.n	16ea <USB_DeviceKhciInterruptTokenDone+0x58e>
                {
                    message.buffer = bdtBuffer;
    16e0:	230c      	movs	r3, #12
    16e2:	18fb      	adds	r3, r7, r3
    16e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    16e6:	601a      	str	r2, [r3, #0]
    16e8:	e009      	b.n	16fe <USB_DeviceKhciInterruptTokenDone+0x5a2>
                }
                else
                {
                    message.buffer = khciState->endpointState[index].transferBuffer;
    16ea:	232a      	movs	r3, #42	; 0x2a
    16ec:	18fb      	adds	r3, r7, r3
    16ee:	781a      	ldrb	r2, [r3, #0]
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	3202      	adds	r2, #2
    16f4:	0112      	lsls	r2, r2, #4
    16f6:	58d2      	ldr	r2, [r2, r3]
    16f8:	230c      	movs	r3, #12
    16fa:	18fb      	adds	r3, r7, r3
    16fc:	601a      	str	r2, [r3, #0]
                }
                khciState->endpointState[index].stateUnion.stateBitField.transferring = 0U;
    16fe:	232a      	movs	r3, #42	; 0x2a
    1700:	18fb      	adds	r3, r7, r3
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	687a      	ldr	r2, [r7, #4]
    1706:	2128      	movs	r1, #40	; 0x28
    1708:	011b      	lsls	r3, r3, #4
    170a:	18d3      	adds	r3, r2, r3
    170c:	185b      	adds	r3, r3, r1
    170e:	795a      	ldrb	r2, [r3, #5]
    1710:	2140      	movs	r1, #64	; 0x40
    1712:	438a      	bics	r2, r1
    1714:	715a      	strb	r2, [r3, #5]
    1716:	e010      	b.n	173a <USB_DeviceKhciInterruptTokenDone+0x5de>
            }
            else
            {
                /* Receive remaining data and terminate the token done interrupt service. */
                USB_DeviceKhciRecv(khciState, (endpoint) | (USB_OUT << 0x07U),
    1718:	232a      	movs	r3, #42	; 0x2a
    171a:	18fb      	adds	r3, r7, r3
    171c:	781a      	ldrb	r2, [r3, #0]
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	3202      	adds	r2, #2
    1722:	0112      	lsls	r2, r2, #4
    1724:	58d2      	ldr	r2, [r2, r3]
    1726:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    1728:	233a      	movs	r3, #58	; 0x3a
    172a:	18fb      	adds	r3, r7, r3
    172c:	7819      	ldrb	r1, [r3, #0]
    172e:	6878      	ldr	r0, [r7, #4]
    1730:	0023      	movs	r3, r4
    1732:	f000 f9d7 	bl	1ae4 <USB_DeviceKhciRecv>
                                   khciState->endpointState[index].transferBuffer, remainingLength);
                return;
    1736:	e029      	b.n	178c <USB_DeviceKhciInterruptTokenDone+0x630>
            if ((length) && (!(length % khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize)))
    1738:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    message.isSetup = isSetup;
    173a:	230c      	movs	r3, #12
    173c:	18fb      	adds	r3, r7, r3
    173e:	222b      	movs	r2, #43	; 0x2b
    1740:	18ba      	adds	r2, r7, r2
    1742:	7812      	ldrb	r2, [r2, #0]
    1744:	725a      	strb	r2, [r3, #9]
    message.code = (endpoint) | (uint8_t)(((uint32_t)direction << 0x07U));
    1746:	2339      	movs	r3, #57	; 0x39
    1748:	18fb      	adds	r3, r7, r3
    174a:	781b      	ldrb	r3, [r3, #0]
    174c:	01db      	lsls	r3, r3, #7
    174e:	b2da      	uxtb	r2, r3
    1750:	233a      	movs	r3, #58	; 0x3a
    1752:	18fb      	adds	r3, r7, r3
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	4313      	orrs	r3, r2
    1758:	b2da      	uxtb	r2, r3
    175a:	230c      	movs	r3, #12
    175c:	18fb      	adds	r3, r7, r3
    175e:	721a      	strb	r2, [r3, #8]

    /* Notify the up layer the KHCI status changed. */
    USB_DeviceNotificationTrigger(khciState->deviceHandle, &message);
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	681b      	ldr	r3, [r3, #0]
    1764:	220c      	movs	r2, #12
    1766:	18ba      	adds	r2, r7, r2
    1768:	0011      	movs	r1, r2
    176a:	0018      	movs	r0, r3
    176c:	f000 fe8f 	bl	248e <USB_DeviceNotificationTrigger>

    khciState->registerBase->CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	689a      	ldr	r2, [r3, #8]
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	689b      	ldr	r3, [r3, #8]
    1778:	2194      	movs	r1, #148	; 0x94
    177a:	5c5b      	ldrb	r3, [r3, r1]
    177c:	b2db      	uxtb	r3, r3
    177e:	2120      	movs	r1, #32
    1780:	438b      	bics	r3, r1
    1782:	b2d9      	uxtb	r1, r3
    1784:	2394      	movs	r3, #148	; 0x94
    1786:	54d1      	strb	r1, [r2, r3]
    1788:	e000      	b.n	178c <USB_DeviceKhciInterruptTokenDone+0x630>
        return;
    178a:	46c0      	nop			; (mov r8, r8)
}
    178c:	46bd      	mov	sp, r7
    178e:	b011      	add	sp, #68	; 0x44
    1790:	bd90      	pop	{r4, r7, pc}

00001792 <USB_DeviceKhciInterruptReset>:
 *
 * @param khciState       Pointer of the device KHCI state structure.
 *
 */
static void USB_DeviceKhciInterruptReset(usb_device_khci_state_struct_t *khciState)
{
    1792:	b580      	push	{r7, lr}
    1794:	b086      	sub	sp, #24
    1796:	af00      	add	r7, sp, #0
    1798:	6078      	str	r0, [r7, #4]
    usb_device_callback_message_struct_t message;

    /* Set KHCI reset flag */
    khciState->isResetting = 1U;
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	22a1      	movs	r2, #161	; 0xa1
    179e:	2101      	movs	r1, #1
    17a0:	5499      	strb	r1, [r3, r2]

    /* Clear the reset interrupt */
    khciState->registerBase->ISTAT = (kUSB_KhciInterruptReset);
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	689b      	ldr	r3, [r3, #8]
    17a6:	2280      	movs	r2, #128	; 0x80
    17a8:	2101      	movs	r1, #1
    17aa:	5499      	strb	r1, [r3, r2]

    message.buffer = (uint8_t *)NULL;
    17ac:	230c      	movs	r3, #12
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	2200      	movs	r2, #0
    17b2:	601a      	str	r2, [r3, #0]
    message.code = kUSB_DeviceNotifyBusReset;
    17b4:	230c      	movs	r3, #12
    17b6:	18fb      	adds	r3, r7, r3
    17b8:	2210      	movs	r2, #16
    17ba:	721a      	strb	r2, [r3, #8]
    message.length = 0U;
    17bc:	230c      	movs	r3, #12
    17be:	18fb      	adds	r3, r7, r3
    17c0:	2200      	movs	r2, #0
    17c2:	605a      	str	r2, [r3, #4]
    message.isSetup = 0U;
    17c4:	230c      	movs	r3, #12
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	2200      	movs	r2, #0
    17ca:	725a      	strb	r2, [r3, #9]
    /* Notify up layer the USB bus reset signal detected. */
    USB_DeviceNotificationTrigger(khciState->deviceHandle, &message);
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	220c      	movs	r2, #12
    17d2:	18ba      	adds	r2, r7, r2
    17d4:	0011      	movs	r1, r2
    17d6:	0018      	movs	r0, r3
    17d8:	f000 fe59 	bl	248e <USB_DeviceNotificationTrigger>
}
    17dc:	46c0      	nop			; (mov r8, r8)
    17de:	46bd      	mov	sp, r7
    17e0:	b006      	add	sp, #24
    17e2:	bd80      	pop	{r7, pc}

000017e4 <USB_DeviceKhciInterruptStall>:
 *
 * @param khciState       Pointer of the device KHCI state structure.
 *
 */
static void USB_DeviceKhciInterruptStall(usb_device_khci_state_struct_t *khciState)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    /* Clear the endpoint stalled interrupt flag */
    while (khciState->registerBase->ISTAT & (kUSB_KhciInterruptStall))
    17ec:	e004      	b.n	17f8 <USB_DeviceKhciInterruptStall+0x14>
    {
        khciState->registerBase->ISTAT = (kUSB_KhciInterruptStall);
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	689b      	ldr	r3, [r3, #8]
    17f2:	2280      	movs	r2, #128	; 0x80
    17f4:	2180      	movs	r1, #128	; 0x80
    17f6:	5499      	strb	r1, [r3, r2]
    while (khciState->registerBase->ISTAT & (kUSB_KhciInterruptStall))
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	689b      	ldr	r3, [r3, #8]
    17fc:	2280      	movs	r2, #128	; 0x80
    17fe:	5c9b      	ldrb	r3, [r3, r2]
    1800:	b2db      	uxtb	r3, r3
    1802:	b25b      	sxtb	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	dbf2      	blt.n	17ee <USB_DeviceKhciInterruptStall+0xa>
    }

    /* Un-stall the control in and out pipe when the control in or out pipe stalled. */
    if ((khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_IN].stateUnion.stateBitField.stalled) ||
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	223d      	movs	r2, #61	; 0x3d
    180c:	5c9b      	ldrb	r3, [r3, r2]
    180e:	2204      	movs	r2, #4
    1810:	4013      	ands	r3, r2
    1812:	b2db      	uxtb	r3, r3
    1814:	2b00      	cmp	r3, #0
    1816:	d107      	bne.n	1828 <USB_DeviceKhciInterruptStall+0x44>
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	222d      	movs	r2, #45	; 0x2d
    181c:	5c9b      	ldrb	r3, [r3, r2]
    181e:	2204      	movs	r2, #4
    1820:	4013      	ands	r3, r2
    1822:	b2db      	uxtb	r3, r3
    1824:	2b00      	cmp	r3, #0
    1826:	d009      	beq.n	183c <USB_DeviceKhciInterruptStall+0x58>
        (khciState->endpointState[(USB_CONTROL_ENDPOINT << 1U) | USB_OUT].stateUnion.stateBitField.stalled))
    {
        USB_DeviceKhciEndpointUnstall(
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	2180      	movs	r1, #128	; 0x80
    182c:	0018      	movs	r0, r3
    182e:	f7ff fbcd 	bl	fcc <USB_DeviceKhciEndpointUnstall>
            khciState, (USB_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT)));
        USB_DeviceKhciEndpointUnstall(
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	2100      	movs	r1, #0
    1836:	0018      	movs	r0, r3
    1838:	f7ff fbc8 	bl	fcc <USB_DeviceKhciEndpointUnstall>
            khciState, (USB_CONTROL_ENDPOINT | (USB_OUT << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT)));
    }
}
    183c:	46c0      	nop			; (mov r8, r8)
    183e:	46bd      	mov	sp, r7
    1840:	b002      	add	sp, #8
    1842:	bd80      	pop	{r7, pc}

00001844 <USB_DeviceKhciInit>:
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceKhciInit(uint8_t controllerId,
                                usb_device_handle handle,
                                usb_device_controller_handle *khciHandle)
{
    1844:	b580      	push	{r7, lr}
    1846:	b086      	sub	sp, #24
    1848:	af00      	add	r7, sp, #0
    184a:	60b9      	str	r1, [r7, #8]
    184c:	607a      	str	r2, [r7, #4]
    184e:	230f      	movs	r3, #15
    1850:	18fb      	adds	r3, r7, r3
    1852:	1c02      	adds	r2, r0, #0
    1854:	701a      	strb	r2, [r3, #0]
    usb_device_khci_state_struct_t *khciState;
    uint32_t khci_base[] = USB_BASE_ADDRS;
    1856:	4b35      	ldr	r3, [pc, #212]	; (192c <USB_DeviceKhciInit+0xe8>)
    1858:	613b      	str	r3, [r7, #16]
    if (((controllerId - kUSB_ControllerKhci0) >= (uint8_t)USB_DEVICE_CONFIG_KHCI) ||
    185a:	230f      	movs	r3, #15
    185c:	18fb      	adds	r3, r7, r3
    185e:	781b      	ldrb	r3, [r3, #0]
    1860:	2b00      	cmp	r3, #0
    1862:	dc04      	bgt.n	186e <USB_DeviceKhciInit+0x2a>
    1864:	230f      	movs	r3, #15
    1866:	18fb      	adds	r3, r7, r3
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	2b00      	cmp	r3, #0
    186c:	d001      	beq.n	1872 <USB_DeviceKhciInit+0x2e>
        ((controllerId - kUSB_ControllerKhci0) >= (sizeof(khci_base) / sizeof(uint32_t))))
    {
        return kStatus_USB_ControllerNotFound;
    186e:	2306      	movs	r3, #6
    1870:	e058      	b.n	1924 <USB_DeviceKhciInit+0xe0>
    }
    khciState = &s_UsbDeviceKhciState[controllerId - kUSB_ControllerKhci0];
    1872:	230f      	movs	r3, #15
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	22a4      	movs	r2, #164	; 0xa4
    187a:	435a      	muls	r2, r3
    187c:	4b2c      	ldr	r3, [pc, #176]	; (1930 <USB_DeviceKhciInit+0xec>)
    187e:	18d3      	adds	r3, r2, r3
    1880:	617b      	str	r3, [r7, #20]

    khciState->controllerId = controllerId;
    1882:	697b      	ldr	r3, [r7, #20]
    1884:	220f      	movs	r2, #15
    1886:	18ba      	adds	r2, r7, r2
    1888:	21a2      	movs	r1, #162	; 0xa2
    188a:	7812      	ldrb	r2, [r2, #0]
    188c:	545a      	strb	r2, [r3, r1]

    khciState->registerBase = (USB_Type *)khci_base[controllerId - kUSB_ControllerKhci0];
    188e:	230f      	movs	r3, #15
    1890:	18fb      	adds	r3, r7, r3
    1892:	781b      	ldrb	r3, [r3, #0]
    1894:	009b      	lsls	r3, r3, #2
    1896:	2218      	movs	r2, #24
    1898:	4694      	mov	ip, r2
    189a:	44bc      	add	ip, r7
    189c:	4463      	add	r3, ip
    189e:	3b08      	subs	r3, #8
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	001a      	movs	r2, r3
    18a4:	697b      	ldr	r3, [r7, #20]
    18a6:	609a      	str	r2, [r3, #8]

    khciState->dmaAlignBuffer = (uint8_t *)&s_UsbDeviceKhciDmaAlignBuffer[controllerId - kUSB_ControllerKhci0][0];
    18a8:	230f      	movs	r3, #15
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	019a      	lsls	r2, r3, #6
    18b0:	4b20      	ldr	r3, [pc, #128]	; (1934 <USB_DeviceKhciInit+0xf0>)
    18b2:	18d2      	adds	r2, r2, r3
    18b4:	697b      	ldr	r3, [r7, #20]
    18b6:	61da      	str	r2, [r3, #28]

    /* Clear all interrupt flags. */
    khciState->registerBase->ISTAT = 0xFFU;
    18b8:	697b      	ldr	r3, [r7, #20]
    18ba:	689b      	ldr	r3, [r3, #8]
    18bc:	2280      	movs	r2, #128	; 0x80
    18be:	21ff      	movs	r1, #255	; 0xff
    18c0:	5499      	strb	r1, [r3, r2]

    /* Disable the device functionality. */
    USB_DeviceKhciControl(khciState, kUSB_DeviceControlStop, NULL);
    18c2:	697b      	ldr	r3, [r7, #20]
    18c4:	2200      	movs	r2, #0
    18c6:	2101      	movs	r1, #1
    18c8:	0018      	movs	r0, r3
    18ca:	f000 fa21 	bl	1d10 <USB_DeviceKhciControl>

    khciState->bdt = s_UsbDeviceKhciBdtBuffer[controllerId - kUSB_ControllerKhci0];
    18ce:	230f      	movs	r3, #15
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	025a      	lsls	r2, r3, #9
    18d6:	4b18      	ldr	r3, [pc, #96]	; (1938 <USB_DeviceKhciInit+0xf4>)
    18d8:	18d2      	adds	r2, r2, r3
    18da:	697b      	ldr	r3, [r7, #20]
    18dc:	605a      	str	r2, [r3, #4]

    /* Set BDT buffer address */
    khciState->registerBase->BDTPAGE1 = (uint8_t)((((uint32_t)khciState->bdt) >> 8U) & 0xFFU);
    18de:	697b      	ldr	r3, [r7, #20]
    18e0:	689a      	ldr	r2, [r3, #8]
    18e2:	697b      	ldr	r3, [r7, #20]
    18e4:	685b      	ldr	r3, [r3, #4]
    18e6:	0a1b      	lsrs	r3, r3, #8
    18e8:	b2d9      	uxtb	r1, r3
    18ea:	239c      	movs	r3, #156	; 0x9c
    18ec:	54d1      	strb	r1, [r2, r3]
    khciState->registerBase->BDTPAGE2 = (uint8_t)((((uint32_t)khciState->bdt) >> 16U) & 0xFFU);
    18ee:	697b      	ldr	r3, [r7, #20]
    18f0:	689a      	ldr	r2, [r3, #8]
    18f2:	697b      	ldr	r3, [r7, #20]
    18f4:	685b      	ldr	r3, [r3, #4]
    18f6:	0c1b      	lsrs	r3, r3, #16
    18f8:	b2d9      	uxtb	r1, r3
    18fa:	23b0      	movs	r3, #176	; 0xb0
    18fc:	54d1      	strb	r1, [r2, r3]
    khciState->registerBase->BDTPAGE3 = (uint8_t)((((uint32_t)khciState->bdt) >> 24U) & 0xFFU);
    18fe:	697b      	ldr	r3, [r7, #20]
    1900:	689a      	ldr	r2, [r3, #8]
    1902:	697b      	ldr	r3, [r7, #20]
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	0e1b      	lsrs	r3, r3, #24
    1908:	b2d9      	uxtb	r1, r3
    190a:	23b4      	movs	r3, #180	; 0xb4
    190c:	54d1      	strb	r1, [r2, r3]

    /* Set KHCI device state to default value. */
    USB_DeviceKhciSetDefaultState(khciState);
    190e:	697b      	ldr	r3, [r7, #20]
    1910:	0018      	movs	r0, r3
    1912:	f7ff f914 	bl	b3e <USB_DeviceKhciSetDefaultState>

    *khciHandle = khciState;
    1916:	687b      	ldr	r3, [r7, #4]
    1918:	697a      	ldr	r2, [r7, #20]
    191a:	601a      	str	r2, [r3, #0]
    khciState->deviceHandle = (usb_device_struct_t *)handle;
    191c:	697b      	ldr	r3, [r7, #20]
    191e:	68ba      	ldr	r2, [r7, #8]
    1920:	601a      	str	r2, [r3, #0]

    return kStatus_USB_Success;
    1922:	2300      	movs	r3, #0
}
    1924:	0018      	movs	r0, r3
    1926:	46bd      	mov	sp, r7
    1928:	b006      	add	sp, #24
    192a:	bd80      	pop	{r7, pc}
    192c:	40055000 	.word	0x40055000
    1930:	40100200 	.word	0x40100200
    1934:	401002a4 	.word	0x401002a4
    1938:	40100000 	.word	0x40100000

0000193c <USB_DeviceKhciDeinit>:
 * @param khciHandle   Pointer of the device KHCI handle.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceKhciDeinit(usb_device_controller_handle khciHandle)
{
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    usb_device_khci_state_struct_t *khciState = (usb_device_khci_state_struct_t *)khciHandle;
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	60fb      	str	r3, [r7, #12]

    if (!khciHandle)
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	2b00      	cmp	r3, #0
    194c:	d101      	bne.n	1952 <USB_DeviceKhciDeinit+0x16>
    {
        return kStatus_USB_InvalidHandle;
    194e:	2303      	movs	r3, #3
    1950:	e027      	b.n	19a2 <USB_DeviceKhciDeinit+0x66>
    }
    /* Clear all interrupt flags. */
    khciState->registerBase->ISTAT = 0xFFU;
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	689b      	ldr	r3, [r3, #8]
    1956:	2280      	movs	r2, #128	; 0x80
    1958:	21ff      	movs	r1, #255	; 0xff
    195a:	5499      	strb	r1, [r3, r2]
    /* Disable all interrupts. */
    khciState->registerBase->INTEN &= ~(0xFFU);
    195c:	68fb      	ldr	r3, [r7, #12]
    195e:	689b      	ldr	r3, [r3, #8]
    1960:	2284      	movs	r2, #132	; 0x84
    1962:	5c9b      	ldrb	r3, [r3, r2]
    1964:	68fb      	ldr	r3, [r7, #12]
    1966:	689b      	ldr	r3, [r3, #8]
    1968:	2284      	movs	r2, #132	; 0x84
    196a:	2100      	movs	r1, #0
    196c:	5499      	strb	r1, [r3, r2]
    /* Clear device address. */
    khciState->registerBase->ADDR = (0U);
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	689b      	ldr	r3, [r3, #8]
    1972:	2298      	movs	r2, #152	; 0x98
    1974:	2100      	movs	r1, #0
    1976:	5499      	strb	r1, [r3, r2]

    /* Clear USB_CTL register */
    khciState->registerBase->CTL = 0x00U;
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	689b      	ldr	r3, [r3, #8]
    197c:	2294      	movs	r2, #148	; 0x94
    197e:	2100      	movs	r1, #0
    1980:	5499      	strb	r1, [r3, r2]
    khciState->registerBase->USBCTRL |= USB_USBCTRL_PDE_MASK | USB_USBCTRL_SUSP_MASK;
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	689a      	ldr	r2, [r3, #8]
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	6899      	ldr	r1, [r3, #8]
    198a:	2380      	movs	r3, #128	; 0x80
    198c:	005b      	lsls	r3, r3, #1
    198e:	5ccb      	ldrb	r3, [r1, r3]
    1990:	b2db      	uxtb	r3, r3
    1992:	2140      	movs	r1, #64	; 0x40
    1994:	4249      	negs	r1, r1
    1996:	430b      	orrs	r3, r1
    1998:	b2d9      	uxtb	r1, r3
    199a:	2380      	movs	r3, #128	; 0x80
    199c:	005b      	lsls	r3, r3, #1
    199e:	54d1      	strb	r1, [r2, r3]

    return kStatus_USB_Success;
    19a0:	2300      	movs	r3, #0
}
    19a2:	0018      	movs	r0, r3
    19a4:	46bd      	mov	sp, r7
    19a6:	b004      	add	sp, #16
    19a8:	bd80      	pop	{r7, pc}

000019aa <USB_DeviceKhciSend>:
 */
usb_status_t USB_DeviceKhciSend(usb_device_controller_handle khciHandle,
                                uint8_t endpointAddress,
                                uint8_t *buffer,
                                uint32_t length)
{
    19aa:	b590      	push	{r4, r7, lr}
    19ac:	b08b      	sub	sp, #44	; 0x2c
    19ae:	af02      	add	r7, sp, #8
    19b0:	60f8      	str	r0, [r7, #12]
    19b2:	607a      	str	r2, [r7, #4]
    19b4:	603b      	str	r3, [r7, #0]
    19b6:	230b      	movs	r3, #11
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	1c0a      	adds	r2, r1, #0
    19bc:	701a      	strb	r2, [r3, #0]
    usb_device_khci_state_struct_t *khciState = (usb_device_khci_state_struct_t *)khciHandle;
    19be:	68fb      	ldr	r3, [r7, #12]
    19c0:	61bb      	str	r3, [r7, #24]
    uint32_t index = ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) | USB_IN;
    19c2:	230b      	movs	r3, #11
    19c4:	18fb      	adds	r3, r7, r3
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	005b      	lsls	r3, r3, #1
    19ca:	221e      	movs	r2, #30
    19cc:	4013      	ands	r3, r2
    19ce:	2201      	movs	r2, #1
    19d0:	4313      	orrs	r3, r2
    19d2:	617b      	str	r3, [r7, #20]
    usb_status_t error = kStatus_USB_Error;
    19d4:	231f      	movs	r3, #31
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	2201      	movs	r2, #1
    19da:	701a      	strb	r2, [r3, #0]

    /* Save the tansfer information */
    if (0U == khciState->endpointState[index].stateUnion.stateBitField.transferring)
    19dc:	69ba      	ldr	r2, [r7, #24]
    19de:	697b      	ldr	r3, [r7, #20]
    19e0:	2128      	movs	r1, #40	; 0x28
    19e2:	011b      	lsls	r3, r3, #4
    19e4:	18d3      	adds	r3, r2, r3
    19e6:	185b      	adds	r3, r3, r1
    19e8:	795b      	ldrb	r3, [r3, #5]
    19ea:	065b      	lsls	r3, r3, #25
    19ec:	0fdb      	lsrs	r3, r3, #31
    19ee:	b2db      	uxtb	r3, r3
    19f0:	2b00      	cmp	r3, #0
    19f2:	d11e      	bne.n	1a32 <USB_DeviceKhciSend+0x88>
    {
        khciState->endpointState[index].transferDone = 0U;
    19f4:	69ba      	ldr	r2, [r7, #24]
    19f6:	697b      	ldr	r3, [r7, #20]
    19f8:	011b      	lsls	r3, r3, #4
    19fa:	18d3      	adds	r3, r2, r3
    19fc:	3328      	adds	r3, #40	; 0x28
    19fe:	2200      	movs	r2, #0
    1a00:	601a      	str	r2, [r3, #0]
        khciState->endpointState[index].transferBuffer = buffer;
    1a02:	69bb      	ldr	r3, [r7, #24]
    1a04:	697a      	ldr	r2, [r7, #20]
    1a06:	3202      	adds	r2, #2
    1a08:	0112      	lsls	r2, r2, #4
    1a0a:	6879      	ldr	r1, [r7, #4]
    1a0c:	50d1      	str	r1, [r2, r3]
        khciState->endpointState[index].transferLength = length;
    1a0e:	69ba      	ldr	r2, [r7, #24]
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3302      	adds	r3, #2
    1a14:	011b      	lsls	r3, r3, #4
    1a16:	18d3      	adds	r3, r2, r3
    1a18:	3304      	adds	r3, #4
    1a1a:	683a      	ldr	r2, [r7, #0]
    1a1c:	601a      	str	r2, [r3, #0]
        khciState->endpointState[index].stateUnion.stateBitField.dmaAlign = 1U;
    1a1e:	69ba      	ldr	r2, [r7, #24]
    1a20:	697b      	ldr	r3, [r7, #20]
    1a22:	2128      	movs	r1, #40	; 0x28
    1a24:	011b      	lsls	r3, r3, #4
    1a26:	18d3      	adds	r3, r2, r3
    1a28:	185b      	adds	r3, r3, r1
    1a2a:	795a      	ldrb	r2, [r3, #5]
    1a2c:	2120      	movs	r1, #32
    1a2e:	430a      	orrs	r2, r1
    1a30:	715a      	strb	r2, [r3, #5]
    }

    /* Data length needs to less than max packet size in each call. */
    if (length > khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize)
    1a32:	69ba      	ldr	r2, [r7, #24]
    1a34:	697b      	ldr	r3, [r7, #20]
    1a36:	2128      	movs	r1, #40	; 0x28
    1a38:	011b      	lsls	r3, r3, #4
    1a3a:	18d3      	adds	r3, r2, r3
    1a3c:	185b      	adds	r3, r3, r1
    1a3e:	889b      	ldrh	r3, [r3, #4]
    1a40:	059b      	lsls	r3, r3, #22
    1a42:	0d9b      	lsrs	r3, r3, #22
    1a44:	b29b      	uxth	r3, r3
    1a46:	001a      	movs	r2, r3
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	429a      	cmp	r2, r3
    1a4c:	d20a      	bcs.n	1a64 <USB_DeviceKhciSend+0xba>
    {
        length = khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize;
    1a4e:	69ba      	ldr	r2, [r7, #24]
    1a50:	697b      	ldr	r3, [r7, #20]
    1a52:	2128      	movs	r1, #40	; 0x28
    1a54:	011b      	lsls	r3, r3, #4
    1a56:	18d3      	adds	r3, r2, r3
    1a58:	185b      	adds	r3, r3, r1
    1a5a:	889b      	ldrh	r3, [r3, #4]
    1a5c:	059b      	lsls	r3, r3, #22
    1a5e:	0d9b      	lsrs	r3, r3, #22
    1a60:	b29b      	uxth	r3, r3
    1a62:	603b      	str	r3, [r7, #0]
    }

    /* Send data when the device is not resetting. */
    if (0U == khciState->isResetting)
    1a64:	69bb      	ldr	r3, [r7, #24]
    1a66:	22a1      	movs	r2, #161	; 0xa1
    1a68:	5c9b      	ldrb	r3, [r3, r2]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d11e      	bne.n	1aac <USB_DeviceKhciSend+0x102>
    {
        error = USB_DeviceKhciEndpointTransfer(khciState, endpointAddress & USB_ENDPOINT_NUMBER_MASK, USB_IN,
    1a6e:	230b      	movs	r3, #11
    1a70:	18fb      	adds	r3, r7, r3
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	220f      	movs	r2, #15
    1a76:	4013      	ands	r3, r2
    1a78:	b2d9      	uxtb	r1, r3
                                               (uint8_t *)((uint32_t)khciState->endpointState[index].transferBuffer +
    1a7a:	69bb      	ldr	r3, [r7, #24]
    1a7c:	697a      	ldr	r2, [r7, #20]
    1a7e:	3202      	adds	r2, #2
    1a80:	0112      	lsls	r2, r2, #4
    1a82:	58d3      	ldr	r3, [r2, r3]
    1a84:	0018      	movs	r0, r3
                                                           (uint32_t)khciState->endpointState[index].transferDone),
    1a86:	69ba      	ldr	r2, [r7, #24]
    1a88:	697b      	ldr	r3, [r7, #20]
    1a8a:	011b      	lsls	r3, r3, #4
    1a8c:	18d3      	adds	r3, r2, r3
    1a8e:	3328      	adds	r3, #40	; 0x28
    1a90:	681b      	ldr	r3, [r3, #0]
                                               (uint8_t *)((uint32_t)khciState->endpointState[index].transferBuffer +
    1a92:	18c3      	adds	r3, r0, r3
        error = USB_DeviceKhciEndpointTransfer(khciState, endpointAddress & USB_ENDPOINT_NUMBER_MASK, USB_IN,
    1a94:	001a      	movs	r2, r3
    1a96:	231f      	movs	r3, #31
    1a98:	18fc      	adds	r4, r7, r3
    1a9a:	69b8      	ldr	r0, [r7, #24]
    1a9c:	683b      	ldr	r3, [r7, #0]
    1a9e:	9300      	str	r3, [sp, #0]
    1aa0:	0013      	movs	r3, r2
    1aa2:	2201      	movs	r2, #1
    1aa4:	f7fe ff86 	bl	9b4 <USB_DeviceKhciEndpointTransfer>
    1aa8:	0003      	movs	r3, r0
    1aaa:	7023      	strb	r3, [r4, #0]
                                               length);
    }

    /* Prime a transfer to receive next setup packet if the dat length is zero in a control in endpoint. */
    if ((0U == khciState->endpointState[index].transferDone) && (0U == length) &&
    1aac:	69ba      	ldr	r2, [r7, #24]
    1aae:	697b      	ldr	r3, [r7, #20]
    1ab0:	011b      	lsls	r3, r3, #4
    1ab2:	18d3      	adds	r3, r2, r3
    1ab4:	3328      	adds	r3, #40	; 0x28
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d10c      	bne.n	1ad6 <USB_DeviceKhciSend+0x12c>
    1abc:	683b      	ldr	r3, [r7, #0]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d109      	bne.n	1ad6 <USB_DeviceKhciSend+0x12c>
        (USB_CONTROL_ENDPOINT == (endpointAddress & USB_ENDPOINT_NUMBER_MASK)))
    1ac2:	230b      	movs	r3, #11
    1ac4:	18fb      	adds	r3, r7, r3
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	220f      	movs	r2, #15
    1aca:	4013      	ands	r3, r2
    if ((0U == khciState->endpointState[index].transferDone) && (0U == length) &&
    1acc:	d103      	bne.n	1ad6 <USB_DeviceKhciSend+0x12c>
    {
        USB_DeviceKhciPrimeNextSetup(khciState);
    1ace:	69bb      	ldr	r3, [r7, #24]
    1ad0:	0018      	movs	r0, r3
    1ad2:	f7ff f801 	bl	ad8 <USB_DeviceKhciPrimeNextSetup>
    }
    return error;
    1ad6:	231f      	movs	r3, #31
    1ad8:	18fb      	adds	r3, r7, r3
    1ada:	781b      	ldrb	r3, [r3, #0]
}
    1adc:	0018      	movs	r0, r3
    1ade:	46bd      	mov	sp, r7
    1ae0:	b009      	add	sp, #36	; 0x24
    1ae2:	bd90      	pop	{r4, r7, pc}

00001ae4 <USB_DeviceKhciRecv>:
 */
usb_status_t USB_DeviceKhciRecv(usb_device_controller_handle khciHandle,
                                uint8_t endpointAddress,
                                uint8_t *buffer,
                                uint32_t length)
{
    1ae4:	b590      	push	{r4, r7, lr}
    1ae6:	b08b      	sub	sp, #44	; 0x2c
    1ae8:	af02      	add	r7, sp, #8
    1aea:	60f8      	str	r0, [r7, #12]
    1aec:	607a      	str	r2, [r7, #4]
    1aee:	603b      	str	r3, [r7, #0]
    1af0:	230b      	movs	r3, #11
    1af2:	18fb      	adds	r3, r7, r3
    1af4:	1c0a      	adds	r2, r1, #0
    1af6:	701a      	strb	r2, [r3, #0]
    usb_device_khci_state_struct_t *khciState = (usb_device_khci_state_struct_t *)khciHandle;
    1af8:	68fb      	ldr	r3, [r7, #12]
    1afa:	61bb      	str	r3, [r7, #24]
    uint32_t index = ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) | USB_OUT;
    1afc:	230b      	movs	r3, #11
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	005b      	lsls	r3, r3, #1
    1b04:	221e      	movs	r2, #30
    1b06:	4013      	ands	r3, r2
    1b08:	617b      	str	r3, [r7, #20]
    usb_status_t error = kStatus_USB_Error;
    1b0a:	231f      	movs	r3, #31
    1b0c:	18fb      	adds	r3, r7, r3
    1b0e:	2201      	movs	r2, #1
    1b10:	701a      	strb	r2, [r3, #0]

    if ((0U == length) && (USB_CONTROL_ENDPOINT == (endpointAddress & USB_ENDPOINT_NUMBER_MASK)))
    1b12:	683b      	ldr	r3, [r7, #0]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d114      	bne.n	1b42 <USB_DeviceKhciRecv+0x5e>
    1b18:	230b      	movs	r3, #11
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	220f      	movs	r2, #15
    1b20:	4013      	ands	r3, r2
    1b22:	d10e      	bne.n	1b42 <USB_DeviceKhciRecv+0x5e>
    {
        khciState->endpointState[index].stateUnion.stateBitField.transferring = 0U;
    1b24:	69ba      	ldr	r2, [r7, #24]
    1b26:	697b      	ldr	r3, [r7, #20]
    1b28:	2128      	movs	r1, #40	; 0x28
    1b2a:	011b      	lsls	r3, r3, #4
    1b2c:	18d3      	adds	r3, r2, r3
    1b2e:	185b      	adds	r3, r3, r1
    1b30:	795a      	ldrb	r2, [r3, #5]
    1b32:	2140      	movs	r1, #64	; 0x40
    1b34:	438a      	bics	r2, r1
    1b36:	715a      	strb	r2, [r3, #5]
        USB_DeviceKhciPrimeNextSetup(khciState);
    1b38:	69bb      	ldr	r3, [r7, #24]
    1b3a:	0018      	movs	r0, r3
    1b3c:	f7fe ffcc 	bl	ad8 <USB_DeviceKhciPrimeNextSetup>
    1b40:	e088      	b.n	1c54 <USB_DeviceKhciRecv+0x170>
    }
    else
    {
        /* Save the tansfer information */
        if (0U == khciState->endpointState[index].stateUnion.stateBitField.transferring)
    1b42:	69ba      	ldr	r2, [r7, #24]
    1b44:	697b      	ldr	r3, [r7, #20]
    1b46:	2128      	movs	r1, #40	; 0x28
    1b48:	011b      	lsls	r3, r3, #4
    1b4a:	18d3      	adds	r3, r2, r3
    1b4c:	185b      	adds	r3, r3, r1
    1b4e:	795b      	ldrb	r3, [r3, #5]
    1b50:	065b      	lsls	r3, r3, #25
    1b52:	0fdb      	lsrs	r3, r3, #31
    1b54:	b2db      	uxtb	r3, r3
    1b56:	2b00      	cmp	r3, #0
    1b58:	d114      	bne.n	1b84 <USB_DeviceKhciRecv+0xa0>
        {
            khciState->endpointState[index].transferDone = 0U;
    1b5a:	69ba      	ldr	r2, [r7, #24]
    1b5c:	697b      	ldr	r3, [r7, #20]
    1b5e:	011b      	lsls	r3, r3, #4
    1b60:	18d3      	adds	r3, r2, r3
    1b62:	3328      	adds	r3, #40	; 0x28
    1b64:	2200      	movs	r2, #0
    1b66:	601a      	str	r2, [r3, #0]
            khciState->endpointState[index].transferBuffer = buffer;
    1b68:	69bb      	ldr	r3, [r7, #24]
    1b6a:	697a      	ldr	r2, [r7, #20]
    1b6c:	3202      	adds	r2, #2
    1b6e:	0112      	lsls	r2, r2, #4
    1b70:	6879      	ldr	r1, [r7, #4]
    1b72:	50d1      	str	r1, [r2, r3]
            khciState->endpointState[index].transferLength = length;
    1b74:	69ba      	ldr	r2, [r7, #24]
    1b76:	697b      	ldr	r3, [r7, #20]
    1b78:	3302      	adds	r3, #2
    1b7a:	011b      	lsls	r3, r3, #4
    1b7c:	18d3      	adds	r3, r2, r3
    1b7e:	3304      	adds	r3, #4
    1b80:	683a      	ldr	r2, [r7, #0]
    1b82:	601a      	str	r2, [r3, #0]
        }
        khciState->endpointState[index].stateUnion.stateBitField.dmaAlign = 1U;
    1b84:	69ba      	ldr	r2, [r7, #24]
    1b86:	697b      	ldr	r3, [r7, #20]
    1b88:	2128      	movs	r1, #40	; 0x28
    1b8a:	011b      	lsls	r3, r3, #4
    1b8c:	18d3      	adds	r3, r2, r3
    1b8e:	185b      	adds	r3, r3, r1
    1b90:	795a      	ldrb	r2, [r3, #5]
    1b92:	2120      	movs	r1, #32
    1b94:	430a      	orrs	r2, r1
    1b96:	715a      	strb	r2, [r3, #5]

        /* Data length needs to less than max packet size in each call. */
        if (length > khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize)
    1b98:	69ba      	ldr	r2, [r7, #24]
    1b9a:	697b      	ldr	r3, [r7, #20]
    1b9c:	2128      	movs	r1, #40	; 0x28
    1b9e:	011b      	lsls	r3, r3, #4
    1ba0:	18d3      	adds	r3, r2, r3
    1ba2:	185b      	adds	r3, r3, r1
    1ba4:	889b      	ldrh	r3, [r3, #4]
    1ba6:	059b      	lsls	r3, r3, #22
    1ba8:	0d9b      	lsrs	r3, r3, #22
    1baa:	b29b      	uxth	r3, r3
    1bac:	001a      	movs	r2, r3
    1bae:	683b      	ldr	r3, [r7, #0]
    1bb0:	429a      	cmp	r2, r3
    1bb2:	d20a      	bcs.n	1bca <USB_DeviceKhciRecv+0xe6>
        {
            length = khciState->endpointState[index].stateUnion.stateBitField.maxPacketSize;
    1bb4:	69ba      	ldr	r2, [r7, #24]
    1bb6:	697b      	ldr	r3, [r7, #20]
    1bb8:	2128      	movs	r1, #40	; 0x28
    1bba:	011b      	lsls	r3, r3, #4
    1bbc:	18d3      	adds	r3, r2, r3
    1bbe:	185b      	adds	r3, r3, r1
    1bc0:	889b      	ldrh	r3, [r3, #4]
    1bc2:	059b      	lsls	r3, r3, #22
    1bc4:	0d9b      	lsrs	r3, r3, #22
    1bc6:	b29b      	uxth	r3, r3
    1bc8:	603b      	str	r3, [r7, #0]
        }

        buffer = (uint8_t *)((uint32_t)buffer + (uint32_t)khciState->endpointState[index].transferDone);
    1bca:	69ba      	ldr	r2, [r7, #24]
    1bcc:	697b      	ldr	r3, [r7, #20]
    1bce:	011b      	lsls	r3, r3, #4
    1bd0:	18d3      	adds	r3, r2, r3
    1bd2:	3328      	adds	r3, #40	; 0x28
    1bd4:	681a      	ldr	r2, [r3, #0]
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	18d3      	adds	r3, r2, r3
    1bda:	607b      	str	r3, [r7, #4]

        if ((khciState->dmaAlignBuffer) && (0U == khciState->isDmaAlignBufferInusing) &&
    1bdc:	69bb      	ldr	r3, [r7, #24]
    1bde:	69db      	ldr	r3, [r3, #28]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d020      	beq.n	1c26 <USB_DeviceKhciRecv+0x142>
    1be4:	69bb      	ldr	r3, [r7, #24]
    1be6:	22a0      	movs	r2, #160	; 0xa0
    1be8:	5c9b      	ldrb	r3, [r3, r2]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d11b      	bne.n	1c26 <USB_DeviceKhciRecv+0x142>
    1bee:	683b      	ldr	r3, [r7, #0]
    1bf0:	2b40      	cmp	r3, #64	; 0x40
    1bf2:	d818      	bhi.n	1c26 <USB_DeviceKhciRecv+0x142>
            (USB_DEVICE_CONFIG_KHCI_DMA_ALIGN_BUFFER_LENGTH >= length) &&
            ((length & 0x03U) || (((uint32_t)buffer) & 0x03U)))
    1bf4:	683b      	ldr	r3, [r7, #0]
    1bf6:	2203      	movs	r2, #3
    1bf8:	4013      	ands	r3, r2
            (USB_DEVICE_CONFIG_KHCI_DMA_ALIGN_BUFFER_LENGTH >= length) &&
    1bfa:	d103      	bne.n	1c04 <USB_DeviceKhciRecv+0x120>
            ((length & 0x03U) || (((uint32_t)buffer) & 0x03U)))
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	2203      	movs	r2, #3
    1c00:	4013      	ands	r3, r2
    1c02:	d010      	beq.n	1c26 <USB_DeviceKhciRecv+0x142>
        {
            khciState->endpointState[index].stateUnion.stateBitField.dmaAlign = 0U;
    1c04:	69ba      	ldr	r2, [r7, #24]
    1c06:	697b      	ldr	r3, [r7, #20]
    1c08:	2128      	movs	r1, #40	; 0x28
    1c0a:	011b      	lsls	r3, r3, #4
    1c0c:	18d3      	adds	r3, r2, r3
    1c0e:	185b      	adds	r3, r3, r1
    1c10:	795a      	ldrb	r2, [r3, #5]
    1c12:	2120      	movs	r1, #32
    1c14:	438a      	bics	r2, r1
    1c16:	715a      	strb	r2, [r3, #5]
            buffer = khciState->dmaAlignBuffer;
    1c18:	69bb      	ldr	r3, [r7, #24]
    1c1a:	69db      	ldr	r3, [r3, #28]
    1c1c:	607b      	str	r3, [r7, #4]
            khciState->isDmaAlignBufferInusing = 1U;
    1c1e:	69bb      	ldr	r3, [r7, #24]
    1c20:	22a0      	movs	r2, #160	; 0xa0
    1c22:	2101      	movs	r1, #1
    1c24:	5499      	strb	r1, [r3, r2]
        }

        /* Receive data when the device is not resetting. */
        if (0U == khciState->isResetting)
    1c26:	69bb      	ldr	r3, [r7, #24]
    1c28:	22a1      	movs	r2, #161	; 0xa1
    1c2a:	5c9b      	ldrb	r3, [r3, r2]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d111      	bne.n	1c54 <USB_DeviceKhciRecv+0x170>
        {
            error = USB_DeviceKhciEndpointTransfer(khciState, endpointAddress & USB_ENDPOINT_NUMBER_MASK, USB_OUT,
    1c30:	230b      	movs	r3, #11
    1c32:	18fb      	adds	r3, r7, r3
    1c34:	781b      	ldrb	r3, [r3, #0]
    1c36:	220f      	movs	r2, #15
    1c38:	4013      	ands	r3, r2
    1c3a:	b2d9      	uxtb	r1, r3
    1c3c:	231f      	movs	r3, #31
    1c3e:	18fc      	adds	r4, r7, r3
    1c40:	687a      	ldr	r2, [r7, #4]
    1c42:	69b8      	ldr	r0, [r7, #24]
    1c44:	683b      	ldr	r3, [r7, #0]
    1c46:	9300      	str	r3, [sp, #0]
    1c48:	0013      	movs	r3, r2
    1c4a:	2200      	movs	r2, #0
    1c4c:	f7fe feb2 	bl	9b4 <USB_DeviceKhciEndpointTransfer>
    1c50:	0003      	movs	r3, r0
    1c52:	7023      	strb	r3, [r4, #0]
                                                   buffer, length);
        }
    }
    return error;
    1c54:	231f      	movs	r3, #31
    1c56:	18fb      	adds	r3, r7, r3
    1c58:	781b      	ldrb	r3, [r3, #0]
}
    1c5a:	0018      	movs	r0, r3
    1c5c:	46bd      	mov	sp, r7
    1c5e:	b009      	add	sp, #36	; 0x24
    1c60:	bd90      	pop	{r4, r7, pc}

00001c62 <USB_DeviceKhciCancel>:
 * @param ep               Endpoint address, bit7 is the direction of endpoint, 1U - IN, abd 0U - OUT.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceKhciCancel(usb_device_controller_handle khciHandle, uint8_t ep)
{
    1c62:	b580      	push	{r7, lr}
    1c64:	b088      	sub	sp, #32
    1c66:	af00      	add	r7, sp, #0
    1c68:	6078      	str	r0, [r7, #4]
    1c6a:	000a      	movs	r2, r1
    1c6c:	1cfb      	adds	r3, r7, #3
    1c6e:	701a      	strb	r2, [r3, #0]
    usb_device_khci_state_struct_t *khciState = (usb_device_khci_state_struct_t *)khciHandle;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	61fb      	str	r3, [r7, #28]
    usb_device_callback_message_struct_t message;
    uint8_t index = ((ep & USB_ENDPOINT_NUMBER_MASK) << 1U) | ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    1c74:	1cfb      	adds	r3, r7, #3
    1c76:	781b      	ldrb	r3, [r3, #0]
    1c78:	18db      	adds	r3, r3, r3
    1c7a:	b2db      	uxtb	r3, r3
    1c7c:	221e      	movs	r2, #30
    1c7e:	4013      	ands	r3, r2
    1c80:	b2d9      	uxtb	r1, r3
    1c82:	1cfb      	adds	r3, r7, #3
    1c84:	781b      	ldrb	r3, [r3, #0]
    1c86:	09db      	lsrs	r3, r3, #7
    1c88:	b2da      	uxtb	r2, r3
    1c8a:	231b      	movs	r3, #27
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	430a      	orrs	r2, r1
    1c90:	701a      	strb	r2, [r3, #0]
                                                               USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT);

    /* Cancel the transfer and notify the up layer when the endpoint is busy. */
    if (khciState->endpointState[index].stateUnion.stateBitField.transferring)
    1c92:	231b      	movs	r3, #27
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	69fa      	ldr	r2, [r7, #28]
    1c9a:	2128      	movs	r1, #40	; 0x28
    1c9c:	011b      	lsls	r3, r3, #4
    1c9e:	18d3      	adds	r3, r2, r3
    1ca0:	185b      	adds	r3, r3, r1
    1ca2:	795b      	ldrb	r3, [r3, #5]
    1ca4:	065b      	lsls	r3, r3, #25
    1ca6:	0fdb      	lsrs	r3, r3, #31
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	2b00      	cmp	r3, #0
    1cac:	d02b      	beq.n	1d06 <USB_DeviceKhciCancel+0xa4>
    {
        message.length = USB_UNINITIALIZED_VAL_32;
    1cae:	230c      	movs	r3, #12
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	2201      	movs	r2, #1
    1cb4:	4252      	negs	r2, r2
    1cb6:	605a      	str	r2, [r3, #4]
        message.buffer = khciState->endpointState[index].transferBuffer;
    1cb8:	231b      	movs	r3, #27
    1cba:	18fb      	adds	r3, r7, r3
    1cbc:	781a      	ldrb	r2, [r3, #0]
    1cbe:	69fb      	ldr	r3, [r7, #28]
    1cc0:	3202      	adds	r2, #2
    1cc2:	0112      	lsls	r2, r2, #4
    1cc4:	58d2      	ldr	r2, [r2, r3]
    1cc6:	230c      	movs	r3, #12
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	601a      	str	r2, [r3, #0]
        message.code = ep;
    1ccc:	230c      	movs	r3, #12
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	1cfa      	adds	r2, r7, #3
    1cd2:	7812      	ldrb	r2, [r2, #0]
    1cd4:	721a      	strb	r2, [r3, #8]
        message.isSetup = 0U;
    1cd6:	230c      	movs	r3, #12
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	2200      	movs	r2, #0
    1cdc:	725a      	strb	r2, [r3, #9]
        khciState->endpointState[index].stateUnion.stateBitField.transferring = 0U;
    1cde:	231b      	movs	r3, #27
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	69fa      	ldr	r2, [r7, #28]
    1ce6:	2128      	movs	r1, #40	; 0x28
    1ce8:	011b      	lsls	r3, r3, #4
    1cea:	18d3      	adds	r3, r2, r3
    1cec:	185b      	adds	r3, r3, r1
    1cee:	795a      	ldrb	r2, [r3, #5]
    1cf0:	2140      	movs	r1, #64	; 0x40
    1cf2:	438a      	bics	r2, r1
    1cf4:	715a      	strb	r2, [r3, #5]
        USB_DeviceNotificationTrigger(khciState->deviceHandle, &message);
    1cf6:	69fb      	ldr	r3, [r7, #28]
    1cf8:	681b      	ldr	r3, [r3, #0]
    1cfa:	220c      	movs	r2, #12
    1cfc:	18ba      	adds	r2, r7, r2
    1cfe:	0011      	movs	r1, r2
    1d00:	0018      	movs	r0, r3
    1d02:	f000 fbc4 	bl	248e <USB_DeviceNotificationTrigger>
    }
    return kStatus_USB_Success;
    1d06:	2300      	movs	r3, #0
}
    1d08:	0018      	movs	r0, r3
    1d0a:	46bd      	mov	sp, r7
    1d0c:	b008      	add	sp, #32
    1d0e:	bd80      	pop	{r7, pc}

00001d10 <USB_DeviceKhciControl>:
 * @param param            The param type is determined by the selected item.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceKhciControl(usb_device_controller_handle khciHandle, usb_device_control_type_t type, void *param)
{
    1d10:	b590      	push	{r4, r7, lr}
    1d12:	b08b      	sub	sp, #44	; 0x2c
    1d14:	af00      	add	r7, sp, #0
    1d16:	60f8      	str	r0, [r7, #12]
    1d18:	607a      	str	r2, [r7, #4]
    1d1a:	230b      	movs	r3, #11
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	1c0a      	adds	r2, r1, #0
    1d20:	701a      	strb	r2, [r3, #0]
    usb_device_khci_state_struct_t *khciState = (usb_device_khci_state_struct_t *)khciHandle;
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	623b      	str	r3, [r7, #32]
    uint16_t *temp16;
    uint8_t *temp8;

    usb_status_t error = kStatus_USB_Error;
    1d26:	2327      	movs	r3, #39	; 0x27
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	2201      	movs	r2, #1
    1d2c:	701a      	strb	r2, [r3, #0]

    if (!khciHandle)
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d101      	bne.n	1d38 <USB_DeviceKhciControl+0x28>
    {
        return kStatus_USB_InvalidHandle;
    1d34:	2303      	movs	r3, #3
    1d36:	e11d      	b.n	1f74 <USB_DeviceKhciControl+0x264>
    }

    switch (type)
    1d38:	230b      	movs	r3, #11
    1d3a:	18fb      	adds	r3, r7, r3
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	2b12      	cmp	r3, #18
    1d40:	d900      	bls.n	1d44 <USB_DeviceKhciControl+0x34>
    1d42:	e103      	b.n	1f4c <USB_DeviceKhciControl+0x23c>
    1d44:	009a      	lsls	r2, r3, #2
    1d46:	4b8d      	ldr	r3, [pc, #564]	; (1f7c <USB_DeviceKhciControl+0x26c>)
    1d48:	18d3      	adds	r3, r2, r3
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	469f      	mov	pc, r3
    {
        case kUSB_DeviceControlRun:
            khciState->registerBase->USBCTRL = 0U;
    1d4e:	6a3b      	ldr	r3, [r7, #32]
    1d50:	689a      	ldr	r2, [r3, #8]
    1d52:	2380      	movs	r3, #128	; 0x80
    1d54:	005b      	lsls	r3, r3, #1
    1d56:	2100      	movs	r1, #0
    1d58:	54d1      	strb	r1, [r2, r3]
            if (khciState->registerBase->OTGCTL & USB_OTGCTL_OTGEN_MASK)
            {
                khciState->registerBase->OTGCTL |= USB_OTGCTL_DPHIGH_MASK;
            }
#endif /* FSL_FEATURE_USB_KHCI_OTG_ENABLED */
            khciState->registerBase->CONTROL |= USB_CONTROL_DPPULLUPNONOTG_MASK;
    1d5a:	6a3b      	ldr	r3, [r7, #32]
    1d5c:	689a      	ldr	r2, [r3, #8]
    1d5e:	6a3b      	ldr	r3, [r7, #32]
    1d60:	6899      	ldr	r1, [r3, #8]
    1d62:	2384      	movs	r3, #132	; 0x84
    1d64:	005b      	lsls	r3, r3, #1
    1d66:	5ccb      	ldrb	r3, [r1, r3]
    1d68:	b2db      	uxtb	r3, r3
    1d6a:	2110      	movs	r1, #16
    1d6c:	430b      	orrs	r3, r1
    1d6e:	b2d9      	uxtb	r1, r3
    1d70:	2384      	movs	r3, #132	; 0x84
    1d72:	005b      	lsls	r3, r3, #1
    1d74:	54d1      	strb	r1, [r2, r3]
            khciState->registerBase->CTL |= USB_CTL_USBENSOFEN_MASK;
    1d76:	6a3b      	ldr	r3, [r7, #32]
    1d78:	689a      	ldr	r2, [r3, #8]
    1d7a:	6a3b      	ldr	r3, [r7, #32]
    1d7c:	689b      	ldr	r3, [r3, #8]
    1d7e:	2194      	movs	r1, #148	; 0x94
    1d80:	5c5b      	ldrb	r3, [r3, r1]
    1d82:	b2db      	uxtb	r3, r3
    1d84:	2101      	movs	r1, #1
    1d86:	430b      	orrs	r3, r1
    1d88:	b2d9      	uxtb	r1, r3
    1d8a:	2394      	movs	r3, #148	; 0x94
    1d8c:	54d1      	strb	r1, [r2, r3]

            error = kStatus_USB_Success;
    1d8e:	2327      	movs	r3, #39	; 0x27
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	2200      	movs	r2, #0
    1d94:	701a      	strb	r2, [r3, #0]
            break;
    1d96:	e0ea      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            if (khciState->registerBase->OTGCTL & USB_OTGCTL_OTGEN_MASK)
            {
                khciState->registerBase->OTGCTL &= ~USB_OTGCTL_DPHIGH_MASK;
            }
#endif /* FSL_FEATURE_USB_KHCI_OTG_ENABLED */
            khciState->registerBase->CONTROL &= ~USB_CONTROL_DPPULLUPNONOTG_MASK;
    1d98:	6a3b      	ldr	r3, [r7, #32]
    1d9a:	689a      	ldr	r2, [r3, #8]
    1d9c:	6a3b      	ldr	r3, [r7, #32]
    1d9e:	6899      	ldr	r1, [r3, #8]
    1da0:	2384      	movs	r3, #132	; 0x84
    1da2:	005b      	lsls	r3, r3, #1
    1da4:	5ccb      	ldrb	r3, [r1, r3]
    1da6:	b2db      	uxtb	r3, r3
    1da8:	2110      	movs	r1, #16
    1daa:	438b      	bics	r3, r1
    1dac:	b2d9      	uxtb	r1, r3
    1dae:	2384      	movs	r3, #132	; 0x84
    1db0:	005b      	lsls	r3, r3, #1
    1db2:	54d1      	strb	r1, [r2, r3]
            error = kStatus_USB_Success;
    1db4:	2327      	movs	r3, #39	; 0x27
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	2200      	movs	r2, #0
    1dba:	701a      	strb	r2, [r3, #0]
            break;
    1dbc:	e0d7      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
        case kUSB_DeviceControlEndpointInit:
            if (param)
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d100      	bne.n	1dc6 <USB_DeviceKhciControl+0xb6>
    1dc4:	e0c4      	b.n	1f50 <USB_DeviceKhciControl+0x240>
            {
                error = USB_DeviceKhciEndpointInit(khciState, (usb_device_endpoint_init_struct_t *)param);
    1dc6:	2327      	movs	r3, #39	; 0x27
    1dc8:	18fc      	adds	r4, r7, r3
    1dca:	687a      	ldr	r2, [r7, #4]
    1dcc:	6a3b      	ldr	r3, [r7, #32]
    1dce:	0011      	movs	r1, r2
    1dd0:	0018      	movs	r0, r3
    1dd2:	f7fe ff71 	bl	cb8 <USB_DeviceKhciEndpointInit>
    1dd6:	0003      	movs	r3, r0
    1dd8:	7023      	strb	r3, [r4, #0]
            }
            break;
    1dda:	e0b9      	b.n	1f50 <USB_DeviceKhciControl+0x240>
        case kUSB_DeviceControlEndpointDeinit:
            if (param)
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d100      	bne.n	1de4 <USB_DeviceKhciControl+0xd4>
    1de2:	e0b7      	b.n	1f54 <USB_DeviceKhciControl+0x244>
            {
                temp8 = (uint8_t *)param;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	61fb      	str	r3, [r7, #28]
                error = USB_DeviceKhciEndpointDeinit(khciState, *temp8);
    1de8:	69fb      	ldr	r3, [r7, #28]
    1dea:	781a      	ldrb	r2, [r3, #0]
    1dec:	2327      	movs	r3, #39	; 0x27
    1dee:	18fc      	adds	r4, r7, r3
    1df0:	6a3b      	ldr	r3, [r7, #32]
    1df2:	0011      	movs	r1, r2
    1df4:	0018      	movs	r0, r3
    1df6:	f7ff f833 	bl	e60 <USB_DeviceKhciEndpointDeinit>
    1dfa:	0003      	movs	r3, r0
    1dfc:	7023      	strb	r3, [r4, #0]
            }
            break;
    1dfe:	e0a9      	b.n	1f54 <USB_DeviceKhciControl+0x244>
        case kUSB_DeviceControlEndpointStall:
            if (param)
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d100      	bne.n	1e08 <USB_DeviceKhciControl+0xf8>
    1e06:	e0a7      	b.n	1f58 <USB_DeviceKhciControl+0x248>
            {
                temp8 = (uint8_t *)param;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	61fb      	str	r3, [r7, #28]
                error = USB_DeviceKhciEndpointStall(khciState, *temp8);
    1e0c:	69fb      	ldr	r3, [r7, #28]
    1e0e:	781a      	ldrb	r2, [r3, #0]
    1e10:	2327      	movs	r3, #39	; 0x27
    1e12:	18fc      	adds	r4, r7, r3
    1e14:	6a3b      	ldr	r3, [r7, #32]
    1e16:	0011      	movs	r1, r2
    1e18:	0018      	movs	r0, r3
    1e1a:	f7ff f862 	bl	ee2 <USB_DeviceKhciEndpointStall>
    1e1e:	0003      	movs	r3, r0
    1e20:	7023      	strb	r3, [r4, #0]
            }
            break;
    1e22:	e099      	b.n	1f58 <USB_DeviceKhciControl+0x248>
        case kUSB_DeviceControlEndpointUnstall:
            if (param)
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d100      	bne.n	1e2c <USB_DeviceKhciControl+0x11c>
    1e2a:	e097      	b.n	1f5c <USB_DeviceKhciControl+0x24c>
            {
                temp8 = (uint8_t *)param;
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	61fb      	str	r3, [r7, #28]
                error = USB_DeviceKhciEndpointUnstall(khciState, *temp8);
    1e30:	69fb      	ldr	r3, [r7, #28]
    1e32:	781a      	ldrb	r2, [r3, #0]
    1e34:	2327      	movs	r3, #39	; 0x27
    1e36:	18fc      	adds	r4, r7, r3
    1e38:	6a3b      	ldr	r3, [r7, #32]
    1e3a:	0011      	movs	r1, r2
    1e3c:	0018      	movs	r0, r3
    1e3e:	f7ff f8c5 	bl	fcc <USB_DeviceKhciEndpointUnstall>
    1e42:	0003      	movs	r3, r0
    1e44:	7023      	strb	r3, [r4, #0]
            }
            break;
    1e46:	e089      	b.n	1f5c <USB_DeviceKhciControl+0x24c>
        case kUSB_DeviceControlGetDeviceStatus:
            if (param)
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d100      	bne.n	1e50 <USB_DeviceKhciControl+0x140>
    1e4e:	e087      	b.n	1f60 <USB_DeviceKhciControl+0x250>
            {
                temp16 = (uint16_t *)param;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	61bb      	str	r3, [r7, #24]
                *temp16 = (USB_DEVICE_CONFIG_SELF_POWER << (USB_REQUEST_STANDARD_GET_STATUS_DEVICE_SELF_POWERED_SHIFT));
    1e54:	69bb      	ldr	r3, [r7, #24]
    1e56:	2201      	movs	r2, #1
    1e58:	801a      	strh	r2, [r3, #0]
                error = kStatus_USB_Success;
    1e5a:	2327      	movs	r3, #39	; 0x27
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	2200      	movs	r2, #0
    1e60:	701a      	strb	r2, [r3, #0]
            }
            break;
    1e62:	e07d      	b.n	1f60 <USB_DeviceKhciControl+0x250>
        case kUSB_DeviceControlGetEndpointStatus:
            if (param)
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d100      	bne.n	1e6c <USB_DeviceKhciControl+0x15c>
    1e6a:	e07b      	b.n	1f64 <USB_DeviceKhciControl+0x254>
            {
                usb_device_endpoint_status_struct_t *endpointStatus = (usb_device_endpoint_status_struct_t *)param;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	617b      	str	r3, [r7, #20]

                if (((endpointStatus->endpointAddress) & USB_ENDPOINT_NUMBER_MASK) < USB_DEVICE_CONFIG_ENDPOINTS)
    1e70:	697b      	ldr	r3, [r7, #20]
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	001a      	movs	r2, r3
    1e76:	230f      	movs	r3, #15
    1e78:	4013      	ands	r3, r2
    1e7a:	2b03      	cmp	r3, #3
    1e7c:	d900      	bls.n	1e80 <USB_DeviceKhciControl+0x170>
    1e7e:	e071      	b.n	1f64 <USB_DeviceKhciControl+0x254>
                {
                    endpointStatus->endpointStatus =
                        (uint16_t)(
                            khciState
                                ->endpointState[(((endpointStatus->endpointAddress) & USB_ENDPOINT_NUMBER_MASK) << 1U) |
    1e80:	697b      	ldr	r3, [r7, #20]
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	005b      	lsls	r3, r3, #1
    1e86:	221e      	movs	r2, #30
    1e88:	4013      	ands	r3, r2
                                                (((endpointStatus->endpointAddress) &
    1e8a:	697a      	ldr	r2, [r7, #20]
    1e8c:	7812      	ldrb	r2, [r2, #0]
                                                  USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    1e8e:	09d2      	lsrs	r2, r2, #7
    1e90:	b2d2      	uxtb	r2, r2
                                ->endpointState[(((endpointStatus->endpointAddress) & USB_ENDPOINT_NUMBER_MASK) << 1U) |
    1e92:	4313      	orrs	r3, r2
                                                 USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT)]
                                .stateUnion.stateBitField.stalled == 1U) ?
    1e94:	6a3a      	ldr	r2, [r7, #32]
    1e96:	2128      	movs	r1, #40	; 0x28
    1e98:	011b      	lsls	r3, r3, #4
    1e9a:	18d3      	adds	r3, r2, r3
    1e9c:	185b      	adds	r3, r3, r1
    1e9e:	795b      	ldrb	r3, [r3, #5]
    1ea0:	075b      	lsls	r3, r3, #29
    1ea2:	0fdb      	lsrs	r3, r3, #31
    1ea4:	b2db      	uxtb	r3, r3
                            kUSB_DeviceEndpointStateStalled :
    1ea6:	b29a      	uxth	r2, r3
                    endpointStatus->endpointStatus =
    1ea8:	697b      	ldr	r3, [r7, #20]
    1eaa:	805a      	strh	r2, [r3, #2]
                            kUSB_DeviceEndpointStateIdle;
                    error = kStatus_USB_Success;
    1eac:	2327      	movs	r3, #39	; 0x27
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	2200      	movs	r2, #0
    1eb2:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
    1eb4:	e056      	b.n	1f64 <USB_DeviceKhciControl+0x254>
        case kUSB_DeviceControlSetDeviceAddress:
            if (param)
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d055      	beq.n	1f68 <USB_DeviceKhciControl+0x258>
            {
                temp8 = (uint8_t *)param;
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	61fb      	str	r3, [r7, #28]
                khciState->registerBase->ADDR = (*temp8);
    1ec0:	6a3b      	ldr	r3, [r7, #32]
    1ec2:	689b      	ldr	r3, [r3, #8]
    1ec4:	69fa      	ldr	r2, [r7, #28]
    1ec6:	7811      	ldrb	r1, [r2, #0]
    1ec8:	2298      	movs	r2, #152	; 0x98
    1eca:	5499      	strb	r1, [r3, r2]
                error = kStatus_USB_Success;
    1ecc:	2327      	movs	r3, #39	; 0x27
    1ece:	18fb      	adds	r3, r7, r3
    1ed0:	2200      	movs	r2, #0
    1ed2:	701a      	strb	r2, [r3, #0]
            }
            break;
    1ed4:	e048      	b.n	1f68 <USB_DeviceKhciControl+0x258>
        case kUSB_DeviceControlGetSynchFrame:
            break;
        case kUSB_DeviceControlSetDefaultStatus:
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
    1ed6:	2326      	movs	r3, #38	; 0x26
    1ed8:	18fb      	adds	r3, r7, r3
    1eda:	2200      	movs	r2, #0
    1edc:	701a      	strb	r2, [r3, #0]
    1ede:	e01a      	b.n	1f16 <USB_DeviceKhciControl+0x206>
            {
                USB_DeviceKhciEndpointDeinit(khciState, (count | (USB_IN << 0x07U)));
    1ee0:	2326      	movs	r3, #38	; 0x26
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	781b      	ldrb	r3, [r3, #0]
    1ee6:	2280      	movs	r2, #128	; 0x80
    1ee8:	4252      	negs	r2, r2
    1eea:	4313      	orrs	r3, r2
    1eec:	b2da      	uxtb	r2, r3
    1eee:	6a3b      	ldr	r3, [r7, #32]
    1ef0:	0011      	movs	r1, r2
    1ef2:	0018      	movs	r0, r3
    1ef4:	f7fe ffb4 	bl	e60 <USB_DeviceKhciEndpointDeinit>
                USB_DeviceKhciEndpointDeinit(khciState, (count | (USB_OUT << 0x07U)));
    1ef8:	2326      	movs	r3, #38	; 0x26
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	781a      	ldrb	r2, [r3, #0]
    1efe:	6a3b      	ldr	r3, [r7, #32]
    1f00:	0011      	movs	r1, r2
    1f02:	0018      	movs	r0, r3
    1f04:	f7fe ffac 	bl	e60 <USB_DeviceKhciEndpointDeinit>
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
    1f08:	2326      	movs	r3, #38	; 0x26
    1f0a:	18fb      	adds	r3, r7, r3
    1f0c:	781a      	ldrb	r2, [r3, #0]
    1f0e:	2326      	movs	r3, #38	; 0x26
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	3201      	adds	r2, #1
    1f14:	701a      	strb	r2, [r3, #0]
    1f16:	2326      	movs	r3, #38	; 0x26
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	781b      	ldrb	r3, [r3, #0]
    1f1c:	2b03      	cmp	r3, #3
    1f1e:	d9df      	bls.n	1ee0 <USB_DeviceKhciControl+0x1d0>
            }
            USB_DeviceKhciSetDefaultState(khciState);
    1f20:	6a3b      	ldr	r3, [r7, #32]
    1f22:	0018      	movs	r0, r3
    1f24:	f7fe fe0b 	bl	b3e <USB_DeviceKhciSetDefaultState>
            error = kStatus_USB_Success;
    1f28:	2327      	movs	r3, #39	; 0x27
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	2200      	movs	r2, #0
    1f2e:	701a      	strb	r2, [r3, #0]
            break;
    1f30:	e01d      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
        case kUSB_DeviceControlGetSpeed:
            if (param)
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d019      	beq.n	1f6c <USB_DeviceKhciControl+0x25c>
            {
                temp8 = (uint8_t *)param;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	61fb      	str	r3, [r7, #28]
                *temp8 = USB_SPEED_FULL;
    1f3c:	69fb      	ldr	r3, [r7, #28]
    1f3e:	2200      	movs	r2, #0
    1f40:	701a      	strb	r2, [r3, #0]
                error = kStatus_USB_Success;
    1f42:	2327      	movs	r3, #39	; 0x27
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	2200      	movs	r2, #0
    1f48:	701a      	strb	r2, [r3, #0]
            }
            break;
    1f4a:	e00f      	b.n	1f6c <USB_DeviceKhciControl+0x25c>
        case kUSB_DeviceControlSetTestMode:
            break;
        default:
            break;
    1f4c:	46c0      	nop			; (mov r8, r8)
    1f4e:	e00e      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f50:	46c0      	nop			; (mov r8, r8)
    1f52:	e00c      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f54:	46c0      	nop			; (mov r8, r8)
    1f56:	e00a      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f58:	46c0      	nop			; (mov r8, r8)
    1f5a:	e008      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f5c:	46c0      	nop			; (mov r8, r8)
    1f5e:	e006      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f60:	46c0      	nop			; (mov r8, r8)
    1f62:	e004      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	e002      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	e000      	b.n	1f6e <USB_DeviceKhciControl+0x25e>
            break;
    1f6c:	46c0      	nop			; (mov r8, r8)
    }

    return error;
    1f6e:	2327      	movs	r3, #39	; 0x27
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	781b      	ldrb	r3, [r3, #0]
}
    1f74:	0018      	movs	r0, r3
    1f76:	46bd      	mov	sp, r7
    1f78:	b00b      	add	sp, #44	; 0x2c
    1f7a:	bd90      	pop	{r4, r7, pc}
    1f7c:	00004eb0 	.word	0x00004eb0

00001f80 <USB_DeviceKhciIsrFunction>:
 *
 * @param deviceHandle    The device handle got from USB_DeviceInit.
 *
 */
void USB_DeviceKhciIsrFunction(void *deviceHandle)
{
    1f80:	b580      	push	{r7, lr}
    1f82:	b086      	sub	sp, #24
    1f84:	af00      	add	r7, sp, #0
    1f86:	6078      	str	r0, [r7, #4]
    usb_device_struct_t *handle = (usb_device_struct_t *)deviceHandle;
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	617b      	str	r3, [r7, #20]
    usb_device_khci_state_struct_t *khciState;
    uint8_t status;

    if (NULL == deviceHandle)
    1f8c:	687b      	ldr	r3, [r7, #4]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d028      	beq.n	1fe4 <USB_DeviceKhciIsrFunction+0x64>
    {
        return;
    }

    khciState = (usb_device_khci_state_struct_t *)(handle->controllerHandle);
    1f92:	697b      	ldr	r3, [r7, #20]
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	613b      	str	r3, [r7, #16]

    status = khciState->registerBase->ISTAT;
    1f98:	693b      	ldr	r3, [r7, #16]
    1f9a:	689a      	ldr	r2, [r3, #8]
    1f9c:	230f      	movs	r3, #15
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	2180      	movs	r1, #128	; 0x80
    1fa2:	5c52      	ldrb	r2, [r2, r1]
    1fa4:	701a      	strb	r2, [r3, #0]

    /* Token done interrupt */
    if (status & kUSB_KhciInterruptTokenDone)
    1fa6:	230f      	movs	r3, #15
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	781b      	ldrb	r3, [r3, #0]
    1fac:	2208      	movs	r2, #8
    1fae:	4013      	ands	r3, r2
    1fb0:	d003      	beq.n	1fba <USB_DeviceKhciIsrFunction+0x3a>
    {
        USB_DeviceKhciInterruptTokenDone(khciState);
    1fb2:	693b      	ldr	r3, [r7, #16]
    1fb4:	0018      	movs	r0, r3
    1fb6:	f7ff f8d1 	bl	115c <USB_DeviceKhciInterruptTokenDone>
    }

    /* Reset interrupt */
    if (status & kUSB_KhciInterruptReset)
    1fba:	230f      	movs	r3, #15
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	2201      	movs	r2, #1
    1fc2:	4013      	ands	r3, r2
    1fc4:	d003      	beq.n	1fce <USB_DeviceKhciIsrFunction+0x4e>
    {
        USB_DeviceKhciInterruptReset(khciState);
    1fc6:	693b      	ldr	r3, [r7, #16]
    1fc8:	0018      	movs	r0, r3
    1fca:	f7ff fbe2 	bl	1792 <USB_DeviceKhciInterruptReset>
    }

    /* Endpoint stalled interrupt */
    if (status & kUSB_KhciInterruptStall)
    1fce:	230f      	movs	r3, #15
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	b25b      	sxtb	r3, r3
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	da05      	bge.n	1fe6 <USB_DeviceKhciIsrFunction+0x66>
    {
        USB_DeviceKhciInterruptStall(khciState);
    1fda:	693b      	ldr	r3, [r7, #16]
    1fdc:	0018      	movs	r0, r3
    1fde:	f7ff fc01 	bl	17e4 <USB_DeviceKhciInterruptStall>
    1fe2:	e000      	b.n	1fe6 <USB_DeviceKhciIsrFunction+0x66>
        return;
    1fe4:	46c0      	nop			; (mov r8, r8)
    }
}
    1fe6:	46bd      	mov	sp, r7
    1fe8:	b006      	add	sp, #24
    1fea:	bd80      	pop	{r7, pc}

00001fec <USB_DeviceAllocateHandle>:
 * @retval kStatus_USB_Success              Get a device handle successfully.
 * @retval kStatus_USB_Busy                 Cannot allocate a device handle.
 * @retval kStatus_USB_Error                The device has been initialized.
 */
static usb_status_t USB_DeviceAllocateHandle(uint8_t controllerId, usb_device_struct_t **handle)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	0002      	movs	r2, r0
    1ff4:	6039      	str	r1, [r7, #0]
    1ff6:	1dfb      	adds	r3, r7, #7
    1ff8:	701a      	strb	r2, [r3, #0]
    uint32_t count;
    USB_OSA_SR_ALLOC();

    USB_OSA_ENTER_CRITICAL();
    1ffa:	2308      	movs	r3, #8
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	0018      	movs	r0, r3
    2000:	f000 fdc0 	bl	2b84 <USB_OsaEnterCritical>
    /* Check the controller is initialized or not. */
    for (count = 0U; count < USB_DEVICE_CONFIG_NUM; count++)
    2004:	2300      	movs	r3, #0
    2006:	60fb      	str	r3, [r7, #12]
    2008:	e01f      	b.n	204a <USB_DeviceAllocateHandle+0x5e>
    {
        if ((NULL != s_UsbDevice[count].controllerHandle) && (controllerId == s_UsbDevice[count].controllerId))
    200a:	492c      	ldr	r1, [pc, #176]	; (20bc <USB_DeviceAllocateHandle+0xd0>)
    200c:	68fa      	ldr	r2, [r7, #12]
    200e:	0013      	movs	r3, r2
    2010:	00db      	lsls	r3, r3, #3
    2012:	1a9b      	subs	r3, r3, r2
    2014:	011b      	lsls	r3, r3, #4
    2016:	585b      	ldr	r3, [r3, r1]
    2018:	2b00      	cmp	r3, #0
    201a:	d013      	beq.n	2044 <USB_DeviceAllocateHandle+0x58>
    201c:	4927      	ldr	r1, [pc, #156]	; (20bc <USB_DeviceAllocateHandle+0xd0>)
    201e:	68fa      	ldr	r2, [r7, #12]
    2020:	206d      	movs	r0, #109	; 0x6d
    2022:	0013      	movs	r3, r2
    2024:	00db      	lsls	r3, r3, #3
    2026:	1a9b      	subs	r3, r3, r2
    2028:	011b      	lsls	r3, r3, #4
    202a:	18cb      	adds	r3, r1, r3
    202c:	181b      	adds	r3, r3, r0
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	1dfa      	adds	r2, r7, #7
    2032:	7812      	ldrb	r2, [r2, #0]
    2034:	429a      	cmp	r2, r3
    2036:	d105      	bne.n	2044 <USB_DeviceAllocateHandle+0x58>
        {
            USB_OSA_EXIT_CRITICAL();
    2038:	68bb      	ldr	r3, [r7, #8]
    203a:	0018      	movs	r0, r3
    203c:	f000 fdb2 	bl	2ba4 <USB_OsaExitCritical>
            return kStatus_USB_Error;
    2040:	2301      	movs	r3, #1
    2042:	e037      	b.n	20b4 <USB_DeviceAllocateHandle+0xc8>
    for (count = 0U; count < USB_DEVICE_CONFIG_NUM; count++)
    2044:	68fb      	ldr	r3, [r7, #12]
    2046:	3301      	adds	r3, #1
    2048:	60fb      	str	r3, [r7, #12]
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	2b00      	cmp	r3, #0
    204e:	d0dc      	beq.n	200a <USB_DeviceAllocateHandle+0x1e>
        }
    }
    /* Get a free device handle. */
    for (count = 0U; count < USB_DEVICE_CONFIG_NUM; count++)
    2050:	2300      	movs	r3, #0
    2052:	60fb      	str	r3, [r7, #12]
    2054:	e026      	b.n	20a4 <USB_DeviceAllocateHandle+0xb8>
    {
        if (NULL == s_UsbDevice[count].controllerHandle)
    2056:	4919      	ldr	r1, [pc, #100]	; (20bc <USB_DeviceAllocateHandle+0xd0>)
    2058:	68fa      	ldr	r2, [r7, #12]
    205a:	0013      	movs	r3, r2
    205c:	00db      	lsls	r3, r3, #3
    205e:	1a9b      	subs	r3, r3, r2
    2060:	011b      	lsls	r3, r3, #4
    2062:	585b      	ldr	r3, [r3, r1]
    2064:	2b00      	cmp	r3, #0
    2066:	d11a      	bne.n	209e <USB_DeviceAllocateHandle+0xb2>
        {
            s_UsbDevice[count].controllerId = controllerId;
    2068:	4914      	ldr	r1, [pc, #80]	; (20bc <USB_DeviceAllocateHandle+0xd0>)
    206a:	68fa      	ldr	r2, [r7, #12]
    206c:	206d      	movs	r0, #109	; 0x6d
    206e:	0013      	movs	r3, r2
    2070:	00db      	lsls	r3, r3, #3
    2072:	1a9b      	subs	r3, r3, r2
    2074:	011b      	lsls	r3, r3, #4
    2076:	18cb      	adds	r3, r1, r3
    2078:	181b      	adds	r3, r3, r0
    207a:	1dfa      	adds	r2, r7, #7
    207c:	7812      	ldrb	r2, [r2, #0]
    207e:	701a      	strb	r2, [r3, #0]
            *handle = &s_UsbDevice[count];
    2080:	68fa      	ldr	r2, [r7, #12]
    2082:	0013      	movs	r3, r2
    2084:	00db      	lsls	r3, r3, #3
    2086:	1a9b      	subs	r3, r3, r2
    2088:	011b      	lsls	r3, r3, #4
    208a:	4a0c      	ldr	r2, [pc, #48]	; (20bc <USB_DeviceAllocateHandle+0xd0>)
    208c:	189a      	adds	r2, r3, r2
    208e:	683b      	ldr	r3, [r7, #0]
    2090:	601a      	str	r2, [r3, #0]
            USB_OSA_EXIT_CRITICAL();
    2092:	68bb      	ldr	r3, [r7, #8]
    2094:	0018      	movs	r0, r3
    2096:	f000 fd85 	bl	2ba4 <USB_OsaExitCritical>
            return kStatus_USB_Success;
    209a:	2300      	movs	r3, #0
    209c:	e00a      	b.n	20b4 <USB_DeviceAllocateHandle+0xc8>
    for (count = 0U; count < USB_DEVICE_CONFIG_NUM; count++)
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	3301      	adds	r3, #1
    20a2:	60fb      	str	r3, [r7, #12]
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d0d5      	beq.n	2056 <USB_DeviceAllocateHandle+0x6a>
        }
    }
    USB_OSA_EXIT_CRITICAL();
    20aa:	68bb      	ldr	r3, [r7, #8]
    20ac:	0018      	movs	r0, r3
    20ae:	f000 fd79 	bl	2ba4 <USB_OsaExitCritical>
    return kStatus_USB_Busy;
    20b2:	2302      	movs	r3, #2
}
    20b4:	0018      	movs	r0, r3
    20b6:	46bd      	mov	sp, r7
    20b8:	b004      	add	sp, #16
    20ba:	bd80      	pop	{r7, pc}
    20bc:	401002e4 	.word	0x401002e4

000020c0 <USB_DeviceFreeHandle>:
 * @param handle          The device handle.
 *
 * @retval kStatus_USB_Success              Free device handle successfully.
 */
static usb_status_t USB_DeviceFreeHandle(usb_device_struct_t *handle)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b084      	sub	sp, #16
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
    USB_OSA_SR_ALLOC();

    USB_OSA_ENTER_CRITICAL();
    20c8:	230c      	movs	r3, #12
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	0018      	movs	r0, r3
    20ce:	f000 fd59 	bl	2b84 <USB_OsaEnterCritical>
    handle->controllerHandle = NULL;
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	2200      	movs	r2, #0
    20d6:	601a      	str	r2, [r3, #0]
    handle->controllerId = 0U;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	226d      	movs	r2, #109	; 0x6d
    20dc:	2100      	movs	r1, #0
    20de:	5499      	strb	r1, [r3, r2]
    USB_OSA_EXIT_CRITICAL();
    20e0:	68fb      	ldr	r3, [r7, #12]
    20e2:	0018      	movs	r0, r3
    20e4:	f000 fd5e 	bl	2ba4 <USB_OsaExitCritical>
    return kStatus_USB_Success;
    20e8:	2300      	movs	r3, #0
}
    20ea:	0018      	movs	r0, r3
    20ec:	46bd      	mov	sp, r7
    20ee:	b004      	add	sp, #16
    20f0:	bd80      	pop	{r7, pc}
	...

000020f4 <USB_DeviceGetControllerInterface>:
 * @retval kStatus_USB_Success              Get a device handle successfully.
 * @retval kStatus_USB_ControllerNotFound   The controller id is invalided.
 */
static usb_status_t USB_DeviceGetControllerInterface(
    uint8_t controllerId, const usb_device_controller_interface_struct_t **controllerInterface)
{
    20f4:	b580      	push	{r7, lr}
    20f6:	b084      	sub	sp, #16
    20f8:	af00      	add	r7, sp, #0
    20fa:	0002      	movs	r2, r0
    20fc:	6039      	str	r1, [r7, #0]
    20fe:	1dfb      	adds	r3, r7, #7
    2100:	701a      	strb	r2, [r3, #0]
    usb_status_t error = kStatus_USB_ControllerNotFound;
    2102:	230f      	movs	r3, #15
    2104:	18fb      	adds	r3, r7, r3
    2106:	2206      	movs	r2, #6
    2108:	701a      	strb	r2, [r3, #0]
    switch (controllerId)
    210a:	1dfb      	adds	r3, r7, #7
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	3300      	adds	r3, #0
    2110:	2b01      	cmp	r3, #1
    2112:	d807      	bhi.n	2124 <USB_DeviceGetControllerInterface+0x30>
    {
        /* Get the KHCI controller driver interface */
        case kUSB_ControllerKhci0:
        case kUSB_ControllerKhci1:
            *controllerInterface = (const usb_device_controller_interface_struct_t *)&s_UsbDeviceKhciInterface;
    2114:	683b      	ldr	r3, [r7, #0]
    2116:	4a07      	ldr	r2, [pc, #28]	; (2134 <USB_DeviceGetControllerInterface+0x40>)
    2118:	601a      	str	r2, [r3, #0]
            error = kStatus_USB_Success;
    211a:	230f      	movs	r3, #15
    211c:	18fb      	adds	r3, r7, r3
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
            break;
    2122:	e000      	b.n	2126 <USB_DeviceGetControllerInterface+0x32>
        default:
            break;
    2124:	46c0      	nop			; (mov r8, r8)
    }
    return error;
    2126:	230f      	movs	r3, #15
    2128:	18fb      	adds	r3, r7, r3
    212a:	781b      	ldrb	r3, [r3, #0]
}
    212c:	0018      	movs	r0, r3
    212e:	46bd      	mov	sp, r7
    2130:	b004      	add	sp, #16
    2132:	bd80      	pop	{r7, pc}
    2134:	00004efc 	.word	0x00004efc

00002138 <USB_DeviceTransfer>:
 */
static usb_status_t USB_DeviceTransfer(usb_device_handle handle,
                                       uint8_t endpointAddress,
                                       uint8_t *buffer,
                                       uint32_t length)
{
    2138:	b5f0      	push	{r4, r5, r6, r7, lr}
    213a:	b089      	sub	sp, #36	; 0x24
    213c:	af00      	add	r7, sp, #0
    213e:	60f8      	str	r0, [r7, #12]
    2140:	607a      	str	r2, [r7, #4]
    2142:	603b      	str	r3, [r7, #0]
    2144:	230b      	movs	r3, #11
    2146:	18fb      	adds	r3, r7, r3
    2148:	1c0a      	adds	r2, r1, #0
    214a:	701a      	strb	r2, [r3, #0]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    214c:	68fb      	ldr	r3, [r7, #12]
    214e:	61bb      	str	r3, [r7, #24]
    usb_status_t error = kStatus_USB_Error;
    2150:	231f      	movs	r3, #31
    2152:	18fb      	adds	r3, r7, r3
    2154:	2201      	movs	r2, #1
    2156:	701a      	strb	r2, [r3, #0]
    uint8_t endpoint = endpointAddress & USB_ENDPOINT_NUMBER_MASK;
    2158:	2317      	movs	r3, #23
    215a:	18fb      	adds	r3, r7, r3
    215c:	220b      	movs	r2, #11
    215e:	18ba      	adds	r2, r7, r2
    2160:	7812      	ldrb	r2, [r2, #0]
    2162:	210f      	movs	r1, #15
    2164:	400a      	ands	r2, r1
    2166:	701a      	strb	r2, [r3, #0]
    uint8_t direction = (endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    2168:	2316      	movs	r3, #22
    216a:	18fb      	adds	r3, r7, r3
    216c:	220b      	movs	r2, #11
    216e:	18ba      	adds	r2, r7, r2
    2170:	7812      	ldrb	r2, [r2, #0]
    2172:	09d2      	lsrs	r2, r2, #7
    2174:	701a      	strb	r2, [r3, #0]
                        USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;

    if (NULL == deviceHandle)
    2176:	69bb      	ldr	r3, [r7, #24]
    2178:	2b00      	cmp	r3, #0
    217a:	d101      	bne.n	2180 <USB_DeviceTransfer+0x48>
    {
        return kStatus_USB_InvalidHandle;
    217c:	2303      	movs	r3, #3
    217e:	e05d      	b.n	223c <USB_DeviceTransfer+0x104>
    }

    if (NULL != deviceHandle->controllerInterface)
    2180:	69bb      	ldr	r3, [r7, #24]
    2182:	685b      	ldr	r3, [r3, #4]
    2184:	2b00      	cmp	r3, #0
    2186:	d052      	beq.n	222e <USB_DeviceTransfer+0xf6>
    {
        if (deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].isBusy)
    2188:	2317      	movs	r3, #23
    218a:	18fb      	adds	r3, r7, r3
    218c:	781b      	ldrb	r3, [r3, #0]
    218e:	18db      	adds	r3, r3, r3
    2190:	b2da      	uxtb	r2, r3
    2192:	2316      	movs	r3, #22
    2194:	18fb      	adds	r3, r7, r3
    2196:	781b      	ldrb	r3, [r3, #0]
    2198:	4313      	orrs	r3, r2
    219a:	b2db      	uxtb	r3, r3
    219c:	0019      	movs	r1, r3
    219e:	69ba      	ldr	r2, [r7, #24]
    21a0:	000b      	movs	r3, r1
    21a2:	005b      	lsls	r3, r3, #1
    21a4:	185b      	adds	r3, r3, r1
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	18d3      	adds	r3, r2, r3
    21aa:	3314      	adds	r3, #20
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d001      	beq.n	21b6 <USB_DeviceTransfer+0x7e>
        {
            return kStatus_USB_Busy;
    21b2:	2302      	movs	r3, #2
    21b4:	e042      	b.n	223c <USB_DeviceTransfer+0x104>
        }
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].isBusy = 1U;
    21b6:	2317      	movs	r3, #23
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	18db      	adds	r3, r3, r3
    21be:	b2da      	uxtb	r2, r3
    21c0:	2316      	movs	r3, #22
    21c2:	18fb      	adds	r3, r7, r3
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	4313      	orrs	r3, r2
    21c8:	b2db      	uxtb	r3, r3
    21ca:	0019      	movs	r1, r3
    21cc:	69ba      	ldr	r2, [r7, #24]
    21ce:	000b      	movs	r3, r1
    21d0:	005b      	lsls	r3, r3, #1
    21d2:	185b      	adds	r3, r3, r1
    21d4:	009b      	lsls	r3, r3, #2
    21d6:	18d3      	adds	r3, r2, r3
    21d8:	3314      	adds	r3, #20
    21da:	2201      	movs	r2, #1
    21dc:	701a      	strb	r2, [r3, #0]
        if (endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK)
    21de:	230b      	movs	r3, #11
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	b25b      	sxtb	r3, r3
    21e6:	2b00      	cmp	r3, #0
    21e8:	da10      	bge.n	220c <USB_DeviceTransfer+0xd4>
        {
            /* Call the controller send interface. */
            error = deviceHandle->controllerInterface->deviceSend(deviceHandle->controllerHandle, endpointAddress,
    21ea:	69bb      	ldr	r3, [r7, #24]
    21ec:	685b      	ldr	r3, [r3, #4]
    21ee:	689d      	ldr	r5, [r3, #8]
    21f0:	69bb      	ldr	r3, [r7, #24]
    21f2:	6818      	ldr	r0, [r3, #0]
    21f4:	231f      	movs	r3, #31
    21f6:	18fc      	adds	r4, r7, r3
    21f8:	683e      	ldr	r6, [r7, #0]
    21fa:	687a      	ldr	r2, [r7, #4]
    21fc:	230b      	movs	r3, #11
    21fe:	18fb      	adds	r3, r7, r3
    2200:	7819      	ldrb	r1, [r3, #0]
    2202:	0033      	movs	r3, r6
    2204:	47a8      	blx	r5
    2206:	0003      	movs	r3, r0
    2208:	7023      	strb	r3, [r4, #0]
    220a:	e014      	b.n	2236 <USB_DeviceTransfer+0xfe>
                                                                  buffer, length);
        }
        else
        {
            /* Call the controller receive interface. */
            error = deviceHandle->controllerInterface->deviceRecv(deviceHandle->controllerHandle, endpointAddress,
    220c:	69bb      	ldr	r3, [r7, #24]
    220e:	685b      	ldr	r3, [r3, #4]
    2210:	68dd      	ldr	r5, [r3, #12]
    2212:	69bb      	ldr	r3, [r7, #24]
    2214:	6818      	ldr	r0, [r3, #0]
    2216:	231f      	movs	r3, #31
    2218:	18fc      	adds	r4, r7, r3
    221a:	683e      	ldr	r6, [r7, #0]
    221c:	687a      	ldr	r2, [r7, #4]
    221e:	230b      	movs	r3, #11
    2220:	18fb      	adds	r3, r7, r3
    2222:	7819      	ldrb	r1, [r3, #0]
    2224:	0033      	movs	r3, r6
    2226:	47a8      	blx	r5
    2228:	0003      	movs	r3, r0
    222a:	7023      	strb	r3, [r4, #0]
    222c:	e003      	b.n	2236 <USB_DeviceTransfer+0xfe>
                                                                  buffer, length);
        }
    }
    else
    {
        error = kStatus_USB_ControllerNotFound;
    222e:	231f      	movs	r3, #31
    2230:	18fb      	adds	r3, r7, r3
    2232:	2206      	movs	r2, #6
    2234:	701a      	strb	r2, [r3, #0]
    }
    return error;
    2236:	231f      	movs	r3, #31
    2238:	18fb      	adds	r3, r7, r3
    223a:	781b      	ldrb	r3, [r3, #0]
}
    223c:	0018      	movs	r0, r3
    223e:	46bd      	mov	sp, r7
    2240:	b009      	add	sp, #36	; 0x24
    2242:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002244 <USB_DeviceControl>:
 * @retval kStatus_USB_ControllerNotFound   The controller interface is not found.
 * @retval kStatus_USB_Error                Unsupport type.
 *                                          Or, the param is NULL pointer.
 */
static usb_status_t USB_DeviceControl(usb_device_handle handle, usb_device_control_type_t type, void *param)
{
    2244:	b5b0      	push	{r4, r5, r7, lr}
    2246:	b086      	sub	sp, #24
    2248:	af00      	add	r7, sp, #0
    224a:	60f8      	str	r0, [r7, #12]
    224c:	607a      	str	r2, [r7, #4]
    224e:	230b      	movs	r3, #11
    2250:	18fb      	adds	r3, r7, r3
    2252:	1c0a      	adds	r2, r1, #0
    2254:	701a      	strb	r2, [r3, #0]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    2256:	68fb      	ldr	r3, [r7, #12]
    2258:	613b      	str	r3, [r7, #16]
    usb_status_t error = kStatus_USB_Error;
    225a:	2317      	movs	r3, #23
    225c:	18fb      	adds	r3, r7, r3
    225e:	2201      	movs	r2, #1
    2260:	701a      	strb	r2, [r3, #0]

    if (NULL == deviceHandle)
    2262:	693b      	ldr	r3, [r7, #16]
    2264:	2b00      	cmp	r3, #0
    2266:	d101      	bne.n	226c <USB_DeviceControl+0x28>
    {
        return kStatus_USB_InvalidHandle;
    2268:	2303      	movs	r3, #3
    226a:	e01a      	b.n	22a2 <USB_DeviceControl+0x5e>
    }

    if (NULL != deviceHandle->controllerInterface)
    226c:	693b      	ldr	r3, [r7, #16]
    226e:	685b      	ldr	r3, [r3, #4]
    2270:	2b00      	cmp	r3, #0
    2272:	d00f      	beq.n	2294 <USB_DeviceControl+0x50>
    {
        /* Call the controller control interface. */
        error = deviceHandle->controllerInterface->deviceControl(deviceHandle->controllerHandle, type, param);
    2274:	693b      	ldr	r3, [r7, #16]
    2276:	685b      	ldr	r3, [r3, #4]
    2278:	695d      	ldr	r5, [r3, #20]
    227a:	693b      	ldr	r3, [r7, #16]
    227c:	6818      	ldr	r0, [r3, #0]
    227e:	2317      	movs	r3, #23
    2280:	18fc      	adds	r4, r7, r3
    2282:	687a      	ldr	r2, [r7, #4]
    2284:	230b      	movs	r3, #11
    2286:	18fb      	adds	r3, r7, r3
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	0019      	movs	r1, r3
    228c:	47a8      	blx	r5
    228e:	0003      	movs	r3, r0
    2290:	7023      	strb	r3, [r4, #0]
    2292:	e003      	b.n	229c <USB_DeviceControl+0x58>
    }
    else
    {
        error = kStatus_USB_ControllerNotFound;
    2294:	2317      	movs	r3, #23
    2296:	18fb      	adds	r3, r7, r3
    2298:	2206      	movs	r2, #6
    229a:	701a      	strb	r2, [r3, #0]
    }
    return error;
    229c:	2317      	movs	r3, #23
    229e:	18fb      	adds	r3, r7, r3
    22a0:	781b      	ldrb	r3, [r3, #0]
}
    22a2:	0018      	movs	r0, r3
    22a4:	46bd      	mov	sp, r7
    22a6:	b006      	add	sp, #24
    22a8:	bdb0      	pop	{r4, r5, r7, pc}

000022aa <USB_DeviceResetNotification>:
 *
 * @retval kStatus_USB_Success              Get a device handle successfully.
 */
static usb_status_t USB_DeviceResetNotification(usb_device_struct_t *handle,
                                                usb_device_callback_message_struct_t *message)
{
    22aa:	b580      	push	{r7, lr}
    22ac:	b084      	sub	sp, #16
    22ae:	af00      	add	r7, sp, #0
    22b0:	6078      	str	r0, [r7, #4]
    22b2:	6039      	str	r1, [r7, #0]
    handle->isResetting = 1U;
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	226f      	movs	r2, #111	; 0x6f
    22b8:	2101      	movs	r1, #1
    22ba:	5499      	strb	r1, [r3, r2]


    /* Set the controller to default status. */
    USB_DeviceControl(handle, kUSB_DeviceControlSetDefaultStatus, NULL);
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	2200      	movs	r2, #0
    22c0:	210e      	movs	r1, #14
    22c2:	0018      	movs	r0, r3
    22c4:	f7ff ffbe 	bl	2244 <USB_DeviceControl>

    handle->state = kUSB_DeviceStateDefault;
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	226e      	movs	r2, #110	; 0x6e
    22cc:	2102      	movs	r1, #2
    22ce:	5499      	strb	r1, [r3, r2]
    handle->deviceAddress = 0U;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	226c      	movs	r2, #108	; 0x6c
    22d4:	2100      	movs	r1, #0
    22d6:	5499      	strb	r1, [r3, r2]

    for (uint32_t count = 0U; count < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); count++)
    22d8:	2300      	movs	r3, #0
    22da:	60fb      	str	r3, [r7, #12]
    22dc:	e020      	b.n	2320 <USB_DeviceResetNotification+0x76>
    {
        handle->endpointCallback[count].callbackFn = (usb_device_endpoint_callback_t)NULL;
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	68fa      	ldr	r2, [r7, #12]
    22e2:	0013      	movs	r3, r2
    22e4:	005b      	lsls	r3, r3, #1
    22e6:	189b      	adds	r3, r3, r2
    22e8:	009b      	lsls	r3, r3, #2
    22ea:	18cb      	adds	r3, r1, r3
    22ec:	330c      	adds	r3, #12
    22ee:	2200      	movs	r2, #0
    22f0:	601a      	str	r2, [r3, #0]
        handle->endpointCallback[count].callbackParam = NULL;
    22f2:	6879      	ldr	r1, [r7, #4]
    22f4:	68fa      	ldr	r2, [r7, #12]
    22f6:	0013      	movs	r3, r2
    22f8:	005b      	lsls	r3, r3, #1
    22fa:	189b      	adds	r3, r3, r2
    22fc:	009b      	lsls	r3, r3, #2
    22fe:	18cb      	adds	r3, r1, r3
    2300:	3310      	adds	r3, #16
    2302:	2200      	movs	r2, #0
    2304:	601a      	str	r2, [r3, #0]
        handle->endpointCallback[count].isBusy = 0U;
    2306:	6879      	ldr	r1, [r7, #4]
    2308:	68fa      	ldr	r2, [r7, #12]
    230a:	0013      	movs	r3, r2
    230c:	005b      	lsls	r3, r3, #1
    230e:	189b      	adds	r3, r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	18cb      	adds	r3, r1, r3
    2314:	3314      	adds	r3, #20
    2316:	2200      	movs	r2, #0
    2318:	701a      	strb	r2, [r3, #0]
    for (uint32_t count = 0U; count < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); count++)
    231a:	68fb      	ldr	r3, [r7, #12]
    231c:	3301      	adds	r3, #1
    231e:	60fb      	str	r3, [r7, #12]
    2320:	68fb      	ldr	r3, [r7, #12]
    2322:	2b07      	cmp	r3, #7
    2324:	d9db      	bls.n	22de <USB_DeviceResetNotification+0x34>
    }

    /* Call device callback to notify the application that the USB bus reset signal detected. */
    handle->deviceCallback(handle, kUSB_DeviceEventBusReset, NULL);
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	689b      	ldr	r3, [r3, #8]
    232a:	6878      	ldr	r0, [r7, #4]
    232c:	2200      	movs	r2, #0
    232e:	2101      	movs	r1, #1
    2330:	4798      	blx	r3

    handle->isResetting = 0U;
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	226f      	movs	r2, #111	; 0x6f
    2336:	2100      	movs	r1, #0
    2338:	5499      	strb	r1, [r3, r2]
    return kStatus_USB_Success;
    233a:	2300      	movs	r3, #0
}
    233c:	0018      	movs	r0, r3
    233e:	46bd      	mov	sp, r7
    2340:	b004      	add	sp, #16
    2342:	bd80      	pop	{r7, pc}

00002344 <USB_DeviceNotification>:
 * @param message                The device callback message handle.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceNotification(usb_device_struct_t *handle, usb_device_callback_message_struct_t *message)
{
    2344:	b5b0      	push	{r4, r5, r7, lr}
    2346:	b086      	sub	sp, #24
    2348:	af00      	add	r7, sp, #0
    234a:	6078      	str	r0, [r7, #4]
    234c:	6039      	str	r1, [r7, #0]
    uint8_t endpoint = message->code & USB_ENDPOINT_NUMBER_MASK;
    234e:	683b      	ldr	r3, [r7, #0]
    2350:	7a1a      	ldrb	r2, [r3, #8]
    2352:	2316      	movs	r3, #22
    2354:	18fb      	adds	r3, r7, r3
    2356:	210f      	movs	r1, #15
    2358:	400a      	ands	r2, r1
    235a:	701a      	strb	r2, [r3, #0]
    uint8_t direction = (message->code & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    235c:	683b      	ldr	r3, [r7, #0]
    235e:	7a1a      	ldrb	r2, [r3, #8]
    2360:	2315      	movs	r3, #21
    2362:	18fb      	adds	r3, r7, r3
    2364:	09d2      	lsrs	r2, r2, #7
    2366:	701a      	strb	r2, [r3, #0]
                        USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    usb_status_t error = kStatus_USB_Error;
    2368:	2317      	movs	r3, #23
    236a:	18fb      	adds	r3, r7, r3
    236c:	2201      	movs	r2, #1
    236e:	701a      	strb	r2, [r3, #0]

    switch (message->code)
    2370:	683b      	ldr	r3, [r7, #0]
    2372:	7a1b      	ldrb	r3, [r3, #8]
    2374:	2b10      	cmp	r3, #16
    2376:	d10a      	bne.n	238e <USB_DeviceNotification+0x4a>
    {
        case kUSB_DeviceNotifyBusReset:
            error = USB_DeviceResetNotification(handle, message);
    2378:	2317      	movs	r3, #23
    237a:	18fc      	adds	r4, r7, r3
    237c:	683a      	ldr	r2, [r7, #0]
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	0011      	movs	r1, r2
    2382:	0018      	movs	r0, r3
    2384:	f7ff ff91 	bl	22aa <USB_DeviceResetNotification>
    2388:	0003      	movs	r3, r0
    238a:	7023      	strb	r3, [r4, #0]
            break;
    238c:	e078      	b.n	2480 <USB_DeviceNotification+0x13c>
        default:
            if (endpoint < USB_DEVICE_CONFIG_ENDPOINTS)
    238e:	2316      	movs	r3, #22
    2390:	18fb      	adds	r3, r7, r3
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	2b03      	cmp	r3, #3
    2396:	d872      	bhi.n	247e <USB_DeviceNotification+0x13a>
            {
                if (handle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn)
    2398:	2316      	movs	r3, #22
    239a:	18fb      	adds	r3, r7, r3
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	18db      	adds	r3, r3, r3
    23a0:	b2da      	uxtb	r2, r3
    23a2:	2315      	movs	r3, #21
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	4313      	orrs	r3, r2
    23aa:	b2db      	uxtb	r3, r3
    23ac:	0019      	movs	r1, r3
    23ae:	687a      	ldr	r2, [r7, #4]
    23b0:	000b      	movs	r3, r1
    23b2:	005b      	lsls	r3, r3, #1
    23b4:	185b      	adds	r3, r3, r1
    23b6:	009b      	lsls	r3, r3, #2
    23b8:	18d3      	adds	r3, r2, r3
    23ba:	330c      	adds	r3, #12
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	2b00      	cmp	r3, #0
    23c0:	d05d      	beq.n	247e <USB_DeviceNotification+0x13a>
                {
                    usb_device_endpoint_callback_message_struct_t endpointCallbackMessage;
                    endpointCallbackMessage.buffer = message->buffer;
    23c2:	683b      	ldr	r3, [r7, #0]
    23c4:	681a      	ldr	r2, [r3, #0]
    23c6:	2308      	movs	r3, #8
    23c8:	18fb      	adds	r3, r7, r3
    23ca:	601a      	str	r2, [r3, #0]
                    endpointCallbackMessage.length = message->length;
    23cc:	683b      	ldr	r3, [r7, #0]
    23ce:	685a      	ldr	r2, [r3, #4]
    23d0:	2308      	movs	r3, #8
    23d2:	18fb      	adds	r3, r7, r3
    23d4:	605a      	str	r2, [r3, #4]
                    endpointCallbackMessage.isSetup = message->isSetup;
    23d6:	683b      	ldr	r3, [r7, #0]
    23d8:	7a5a      	ldrb	r2, [r3, #9]
    23da:	2308      	movs	r3, #8
    23dc:	18fb      	adds	r3, r7, r3
    23de:	721a      	strb	r2, [r3, #8]
                    if (message->isSetup)
    23e0:	683b      	ldr	r3, [r7, #0]
    23e2:	7a5b      	ldrb	r3, [r3, #9]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d007      	beq.n	23f8 <USB_DeviceNotification+0xb4>
                    {
                        handle->endpointCallback[0].isBusy = 0U;
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	2200      	movs	r2, #0
    23ec:	751a      	strb	r2, [r3, #20]
                        handle->endpointCallback[1].isBusy = 0U;
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	2220      	movs	r2, #32
    23f2:	2100      	movs	r1, #0
    23f4:	5499      	strb	r1, [r3, r2]
    23f6:	e013      	b.n	2420 <USB_DeviceNotification+0xdc>
                    }
                    else
                    {
                        handle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].isBusy = 0U;
    23f8:	2316      	movs	r3, #22
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	18db      	adds	r3, r3, r3
    2400:	b2da      	uxtb	r2, r3
    2402:	2315      	movs	r3, #21
    2404:	18fb      	adds	r3, r7, r3
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	4313      	orrs	r3, r2
    240a:	b2db      	uxtb	r3, r3
    240c:	0019      	movs	r1, r3
    240e:	687a      	ldr	r2, [r7, #4]
    2410:	000b      	movs	r3, r1
    2412:	005b      	lsls	r3, r3, #1
    2414:	185b      	adds	r3, r3, r1
    2416:	009b      	lsls	r3, r3, #2
    2418:	18d3      	adds	r3, r2, r3
    241a:	3314      	adds	r3, #20
    241c:	2200      	movs	r2, #0
    241e:	701a      	strb	r2, [r3, #0]
                    }
                    /* Call endpoint callback */
                    error = handle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn(
    2420:	2316      	movs	r3, #22
    2422:	18fb      	adds	r3, r7, r3
    2424:	781b      	ldrb	r3, [r3, #0]
    2426:	18db      	adds	r3, r3, r3
    2428:	b2da      	uxtb	r2, r3
    242a:	2315      	movs	r3, #21
    242c:	18fb      	adds	r3, r7, r3
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	4313      	orrs	r3, r2
    2432:	b2db      	uxtb	r3, r3
    2434:	0019      	movs	r1, r3
    2436:	687a      	ldr	r2, [r7, #4]
    2438:	000b      	movs	r3, r1
    243a:	005b      	lsls	r3, r3, #1
    243c:	185b      	adds	r3, r3, r1
    243e:	009b      	lsls	r3, r3, #2
    2440:	18d3      	adds	r3, r2, r3
    2442:	330c      	adds	r3, #12
    2444:	681d      	ldr	r5, [r3, #0]
                        handle, &endpointCallbackMessage,
                        handle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackParam);
    2446:	2316      	movs	r3, #22
    2448:	18fb      	adds	r3, r7, r3
    244a:	781b      	ldrb	r3, [r3, #0]
    244c:	18db      	adds	r3, r3, r3
    244e:	b2da      	uxtb	r2, r3
    2450:	2315      	movs	r3, #21
    2452:	18fb      	adds	r3, r7, r3
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	4313      	orrs	r3, r2
    2458:	b2db      	uxtb	r3, r3
    245a:	0019      	movs	r1, r3
                    error = handle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn(
    245c:	687a      	ldr	r2, [r7, #4]
    245e:	000b      	movs	r3, r1
    2460:	005b      	lsls	r3, r3, #1
    2462:	185b      	adds	r3, r3, r1
    2464:	009b      	lsls	r3, r3, #2
    2466:	18d3      	adds	r3, r2, r3
    2468:	3310      	adds	r3, #16
    246a:	681a      	ldr	r2, [r3, #0]
    246c:	2317      	movs	r3, #23
    246e:	18fc      	adds	r4, r7, r3
    2470:	2308      	movs	r3, #8
    2472:	18f9      	adds	r1, r7, r3
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	0018      	movs	r0, r3
    2478:	47a8      	blx	r5
    247a:	0003      	movs	r3, r0
    247c:	7023      	strb	r3, [r4, #0]
                }
            }
            break;
    247e:	46c0      	nop			; (mov r8, r8)
    }
    return error;
    2480:	2317      	movs	r3, #23
    2482:	18fb      	adds	r3, r7, r3
    2484:	781b      	ldrb	r3, [r3, #0]
}
    2486:	0018      	movs	r0, r3
    2488:	46bd      	mov	sp, r7
    248a:	b006      	add	sp, #24
    248c:	bdb0      	pop	{r4, r5, r7, pc}

0000248e <USB_DeviceNotificationTrigger>:
 * @param message                The device callback message handle.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceNotificationTrigger(void *handle, void *msg)
{
    248e:	b580      	push	{r7, lr}
    2490:	b084      	sub	sp, #16
    2492:	af00      	add	r7, sp, #0
    2494:	6078      	str	r0, [r7, #4]
    2496:	6039      	str	r1, [r7, #0]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	60fb      	str	r3, [r7, #12]
    usb_device_callback_message_struct_t *message = (usb_device_callback_message_struct_t *)msg;
    249c:	683b      	ldr	r3, [r7, #0]
    249e:	60bb      	str	r3, [r7, #8]

    if ((NULL == msg) || (NULL == handle))
    24a0:	683b      	ldr	r3, [r7, #0]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d002      	beq.n	24ac <USB_DeviceNotificationTrigger+0x1e>
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d101      	bne.n	24b0 <USB_DeviceNotificationTrigger+0x22>
    {
        return kStatus_USB_InvalidHandle;
    24ac:	2303      	movs	r3, #3
    24ae:	e00c      	b.n	24ca <USB_DeviceNotificationTrigger+0x3c>
    }

    /* The device callback is invalid or not. */
    if (!deviceHandle->deviceCallback)
    24b0:	68fb      	ldr	r3, [r7, #12]
    24b2:	689b      	ldr	r3, [r3, #8]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d101      	bne.n	24bc <USB_DeviceNotificationTrigger+0x2e>
    {
        return kStatus_USB_Error;
    24b8:	2301      	movs	r3, #1
    24ba:	e006      	b.n	24ca <USB_DeviceNotificationTrigger+0x3c>
    }
    /* Handle the notification by calling USB_DeviceNotification. */
    return USB_DeviceNotification(deviceHandle, message);
    24bc:	68ba      	ldr	r2, [r7, #8]
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	0011      	movs	r1, r2
    24c2:	0018      	movs	r0, r3
    24c4:	f7ff ff3e 	bl	2344 <USB_DeviceNotification>
    24c8:	0003      	movs	r3, r0
}
    24ca:	0018      	movs	r0, r3
    24cc:	46bd      	mov	sp, r7
    24ce:	b004      	add	sp, #16
    24d0:	bd80      	pop	{r7, pc}

000024d2 <USB_DeviceInit>:
 * @retval kStatus_USB_Error                The macro USB_DEVICE_CONFIG_ENDPOINTS is more than IP's endpoint number.
 *                                          Or, the device has been initialized.
 *                                          Or, the message queue is created failed.
 */
usb_status_t USB_DeviceInit(uint8_t controllerId, usb_device_callback_t deviceCallback, usb_device_handle *handle)
{
    24d2:	b5b0      	push	{r4, r5, r7, lr}
    24d4:	b088      	sub	sp, #32
    24d6:	af00      	add	r7, sp, #0
    24d8:	60b9      	str	r1, [r7, #8]
    24da:	607a      	str	r2, [r7, #4]
    24dc:	230f      	movs	r3, #15
    24de:	18fb      	adds	r3, r7, r3
    24e0:	1c02      	adds	r2, r0, #0
    24e2:	701a      	strb	r2, [r3, #0]
    usb_device_struct_t *deviceHandle = NULL;
    24e4:	2300      	movs	r3, #0
    24e6:	617b      	str	r3, [r7, #20]
    usb_status_t error;
    uint32_t count;

    if (NULL == handle)
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d101      	bne.n	24f2 <USB_DeviceInit+0x20>
    {
        return kStatus_USB_InvalidHandle;
    24ee:	2303      	movs	r3, #3
    24f0:	e0bb      	b.n	266a <USB_DeviceInit+0x198>
    }

    /* Allocate a device handle by using the controller id. */
    error = USB_DeviceAllocateHandle(controllerId, &deviceHandle);
    24f2:	231b      	movs	r3, #27
    24f4:	18fc      	adds	r4, r7, r3
    24f6:	2314      	movs	r3, #20
    24f8:	18fa      	adds	r2, r7, r3
    24fa:	230f      	movs	r3, #15
    24fc:	18fb      	adds	r3, r7, r3
    24fe:	781b      	ldrb	r3, [r3, #0]
    2500:	0011      	movs	r1, r2
    2502:	0018      	movs	r0, r3
    2504:	f7ff fd72 	bl	1fec <USB_DeviceAllocateHandle>
    2508:	0003      	movs	r3, r0
    250a:	7023      	strb	r3, [r4, #0]

    if (kStatus_USB_Success != error)
    250c:	231b      	movs	r3, #27
    250e:	18fb      	adds	r3, r7, r3
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	2b00      	cmp	r3, #0
    2514:	d003      	beq.n	251e <USB_DeviceInit+0x4c>
    {
        return error;
    2516:	231b      	movs	r3, #27
    2518:	18fb      	adds	r3, r7, r3
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	e0a5      	b.n	266a <USB_DeviceInit+0x198>
    }

    /* Save the device callback */
    deviceHandle->deviceCallback = deviceCallback;
    251e:	697b      	ldr	r3, [r7, #20]
    2520:	68ba      	ldr	r2, [r7, #8]
    2522:	609a      	str	r2, [r3, #8]
    /* Save the controller id */
    deviceHandle->controllerId = controllerId;
    2524:	697b      	ldr	r3, [r7, #20]
    2526:	220f      	movs	r2, #15
    2528:	18ba      	adds	r2, r7, r2
    252a:	216d      	movs	r1, #109	; 0x6d
    252c:	7812      	ldrb	r2, [r2, #0]
    252e:	545a      	strb	r2, [r3, r1]
    /* Clear the device address */
    deviceHandle->deviceAddress = 0U;
    2530:	697b      	ldr	r3, [r7, #20]
    2532:	226c      	movs	r2, #108	; 0x6c
    2534:	2100      	movs	r1, #0
    2536:	5499      	strb	r1, [r3, r2]
    /* Clear the device reset state */
    deviceHandle->isResetting = 0U;
    2538:	697b      	ldr	r3, [r7, #20]
    253a:	226f      	movs	r2, #111	; 0x6f
    253c:	2100      	movs	r1, #0
    253e:	5499      	strb	r1, [r3, r2]

    /* Initialize the enpoints */
    for (count = 0U; count < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); count++)
    2540:	2300      	movs	r3, #0
    2542:	61fb      	str	r3, [r7, #28]
    2544:	e020      	b.n	2588 <USB_DeviceInit+0xb6>
    {
        deviceHandle->endpointCallback[count].callbackFn = (usb_device_endpoint_callback_t)NULL;
    2546:	6979      	ldr	r1, [r7, #20]
    2548:	69fa      	ldr	r2, [r7, #28]
    254a:	0013      	movs	r3, r2
    254c:	005b      	lsls	r3, r3, #1
    254e:	189b      	adds	r3, r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	18cb      	adds	r3, r1, r3
    2554:	330c      	adds	r3, #12
    2556:	2200      	movs	r2, #0
    2558:	601a      	str	r2, [r3, #0]
        deviceHandle->endpointCallback[count].callbackParam = NULL;
    255a:	6979      	ldr	r1, [r7, #20]
    255c:	69fa      	ldr	r2, [r7, #28]
    255e:	0013      	movs	r3, r2
    2560:	005b      	lsls	r3, r3, #1
    2562:	189b      	adds	r3, r3, r2
    2564:	009b      	lsls	r3, r3, #2
    2566:	18cb      	adds	r3, r1, r3
    2568:	3310      	adds	r3, #16
    256a:	2200      	movs	r2, #0
    256c:	601a      	str	r2, [r3, #0]
        deviceHandle->endpointCallback[count].isBusy = 0U;
    256e:	6979      	ldr	r1, [r7, #20]
    2570:	69fa      	ldr	r2, [r7, #28]
    2572:	0013      	movs	r3, r2
    2574:	005b      	lsls	r3, r3, #1
    2576:	189b      	adds	r3, r3, r2
    2578:	009b      	lsls	r3, r3, #2
    257a:	18cb      	adds	r3, r1, r3
    257c:	3314      	adds	r3, #20
    257e:	2200      	movs	r2, #0
    2580:	701a      	strb	r2, [r3, #0]
    for (count = 0U; count < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); count++)
    2582:	69fb      	ldr	r3, [r7, #28]
    2584:	3301      	adds	r3, #1
    2586:	61fb      	str	r3, [r7, #28]
    2588:	69fb      	ldr	r3, [r7, #28]
    258a:	2b07      	cmp	r3, #7
    258c:	d9db      	bls.n	2546 <USB_DeviceInit+0x74>
    }

    /* Get the controller interface according to the controller id */
    error = USB_DeviceGetControllerInterface(controllerId, &deviceHandle->controllerInterface);
    258e:	697b      	ldr	r3, [r7, #20]
    2590:	1d1a      	adds	r2, r3, #4
    2592:	231b      	movs	r3, #27
    2594:	18fc      	adds	r4, r7, r3
    2596:	230f      	movs	r3, #15
    2598:	18fb      	adds	r3, r7, r3
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	0011      	movs	r1, r2
    259e:	0018      	movs	r0, r3
    25a0:	f7ff fda8 	bl	20f4 <USB_DeviceGetControllerInterface>
    25a4:	0003      	movs	r3, r0
    25a6:	7023      	strb	r3, [r4, #0]
    if (kStatus_USB_Success != error)
    25a8:	231b      	movs	r3, #27
    25aa:	18fb      	adds	r3, r7, r3
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d007      	beq.n	25c2 <USB_DeviceInit+0xf0>
    {
        USB_DeviceFreeHandle(deviceHandle);
    25b2:	697b      	ldr	r3, [r7, #20]
    25b4:	0018      	movs	r0, r3
    25b6:	f7ff fd83 	bl	20c0 <USB_DeviceFreeHandle>
        return error;
    25ba:	231b      	movs	r3, #27
    25bc:	18fb      	adds	r3, r7, r3
    25be:	781b      	ldrb	r3, [r3, #0]
    25c0:	e053      	b.n	266a <USB_DeviceInit+0x198>
    }
    if (NULL == deviceHandle->controllerInterface)
    25c2:	697b      	ldr	r3, [r7, #20]
    25c4:	685b      	ldr	r3, [r3, #4]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d105      	bne.n	25d6 <USB_DeviceInit+0x104>
    {
        USB_DeviceFreeHandle(deviceHandle);
    25ca:	697b      	ldr	r3, [r7, #20]
    25cc:	0018      	movs	r0, r3
    25ce:	f7ff fd77 	bl	20c0 <USB_DeviceFreeHandle>
        return kStatus_USB_ControllerNotFound;
    25d2:	2306      	movs	r3, #6
    25d4:	e049      	b.n	266a <USB_DeviceInit+0x198>
    }
    if (((usb_device_controller_init_t)NULL == deviceHandle->controllerInterface->deviceInit) ||
    25d6:	697b      	ldr	r3, [r7, #20]
    25d8:	685b      	ldr	r3, [r3, #4]
    25da:	681b      	ldr	r3, [r3, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d018      	beq.n	2612 <USB_DeviceInit+0x140>
        ((usb_device_controller_deinit_t)NULL == deviceHandle->controllerInterface->deviceDeinit) ||
    25e0:	697b      	ldr	r3, [r7, #20]
    25e2:	685b      	ldr	r3, [r3, #4]
    25e4:	685b      	ldr	r3, [r3, #4]
    if (((usb_device_controller_init_t)NULL == deviceHandle->controllerInterface->deviceInit) ||
    25e6:	2b00      	cmp	r3, #0
    25e8:	d013      	beq.n	2612 <USB_DeviceInit+0x140>
        ((usb_device_controller_send_t)NULL == deviceHandle->controllerInterface->deviceSend) ||
    25ea:	697b      	ldr	r3, [r7, #20]
    25ec:	685b      	ldr	r3, [r3, #4]
    25ee:	689b      	ldr	r3, [r3, #8]
        ((usb_device_controller_deinit_t)NULL == deviceHandle->controllerInterface->deviceDeinit) ||
    25f0:	2b00      	cmp	r3, #0
    25f2:	d00e      	beq.n	2612 <USB_DeviceInit+0x140>
        ((usb_device_controller_recv_t)NULL == deviceHandle->controllerInterface->deviceRecv) ||
    25f4:	697b      	ldr	r3, [r7, #20]
    25f6:	685b      	ldr	r3, [r3, #4]
    25f8:	68db      	ldr	r3, [r3, #12]
        ((usb_device_controller_send_t)NULL == deviceHandle->controllerInterface->deviceSend) ||
    25fa:	2b00      	cmp	r3, #0
    25fc:	d009      	beq.n	2612 <USB_DeviceInit+0x140>
        ((usb_device_controller_cancel_t)NULL == deviceHandle->controllerInterface->deviceCancel) ||
    25fe:	697b      	ldr	r3, [r7, #20]
    2600:	685b      	ldr	r3, [r3, #4]
    2602:	691b      	ldr	r3, [r3, #16]
        ((usb_device_controller_recv_t)NULL == deviceHandle->controllerInterface->deviceRecv) ||
    2604:	2b00      	cmp	r3, #0
    2606:	d004      	beq.n	2612 <USB_DeviceInit+0x140>
        ((usb_device_controller_control_t)NULL == deviceHandle->controllerInterface->deviceControl))
    2608:	697b      	ldr	r3, [r7, #20]
    260a:	685b      	ldr	r3, [r3, #4]
    260c:	695b      	ldr	r3, [r3, #20]
        ((usb_device_controller_cancel_t)NULL == deviceHandle->controllerInterface->deviceCancel) ||
    260e:	2b00      	cmp	r3, #0
    2610:	d105      	bne.n	261e <USB_DeviceInit+0x14c>
    {
        USB_DeviceFreeHandle(deviceHandle);
    2612:	697b      	ldr	r3, [r7, #20]
    2614:	0018      	movs	r0, r3
    2616:	f7ff fd53 	bl	20c0 <USB_DeviceFreeHandle>
        return kStatus_USB_InvalidControllerInterface;
    261a:	2307      	movs	r3, #7
    261c:	e025      	b.n	266a <USB_DeviceInit+0x198>
    }

    /* Initialize the controller */
    error = deviceHandle->controllerInterface->deviceInit(controllerId, deviceHandle, &deviceHandle->controllerHandle);
    261e:	697b      	ldr	r3, [r7, #20]
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	6979      	ldr	r1, [r7, #20]
    2626:	697a      	ldr	r2, [r7, #20]
    2628:	0015      	movs	r5, r2
    262a:	221b      	movs	r2, #27
    262c:	18bc      	adds	r4, r7, r2
    262e:	220f      	movs	r2, #15
    2630:	18ba      	adds	r2, r7, r2
    2632:	7810      	ldrb	r0, [r2, #0]
    2634:	002a      	movs	r2, r5
    2636:	4798      	blx	r3
    2638:	0003      	movs	r3, r0
    263a:	7023      	strb	r3, [r4, #0]
    if (kStatus_USB_Success != error)
    263c:	231b      	movs	r3, #27
    263e:	18fb      	adds	r3, r7, r3
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	2b00      	cmp	r3, #0
    2644:	d007      	beq.n	2656 <USB_DeviceInit+0x184>
    {
        USB_DeviceDeinit(deviceHandle);
    2646:	697b      	ldr	r3, [r7, #20]
    2648:	0018      	movs	r0, r3
    264a:	f000 f821 	bl	2690 <USB_DeviceDeinit>
        return error;
    264e:	231b      	movs	r3, #27
    2650:	18fb      	adds	r3, r7, r3
    2652:	781b      	ldrb	r3, [r3, #0]
    2654:	e009      	b.n	266a <USB_DeviceInit+0x198>
    }
    /* Set the device to deafult state */
    deviceHandle->state = kUSB_DeviceStateDefault;
    2656:	697b      	ldr	r3, [r7, #20]
    2658:	226e      	movs	r2, #110	; 0x6e
    265a:	2102      	movs	r1, #2
    265c:	5499      	strb	r1, [r3, r2]
    *handle = deviceHandle;
    265e:	697a      	ldr	r2, [r7, #20]
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	601a      	str	r2, [r3, #0]

    return error;
    2664:	231b      	movs	r3, #27
    2666:	18fb      	adds	r3, r7, r3
    2668:	781b      	ldrb	r3, [r3, #0]
}
    266a:	0018      	movs	r0, r3
    266c:	46bd      	mov	sp, r7
    266e:	b008      	add	sp, #32
    2670:	bdb0      	pop	{r4, r5, r7, pc}

00002672 <USB_DeviceRun>:
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 * @retval kStatus_USB_InvalidHandle        The device handle is a NULL pointer. Or the controller handle is invalid.
 *
 */
usb_status_t USB_DeviceRun(usb_device_handle handle)
{
    2672:	b580      	push	{r7, lr}
    2674:	b082      	sub	sp, #8
    2676:	af00      	add	r7, sp, #0
    2678:	6078      	str	r0, [r7, #4]
    return USB_DeviceControl(handle, kUSB_DeviceControlRun, NULL);
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	2200      	movs	r2, #0
    267e:	2100      	movs	r1, #0
    2680:	0018      	movs	r0, r3
    2682:	f7ff fddf 	bl	2244 <USB_DeviceControl>
    2686:	0003      	movs	r3, r0
}
    2688:	0018      	movs	r0, r3
    268a:	46bd      	mov	sp, r7
    268c:	b002      	add	sp, #8
    268e:	bd80      	pop	{r7, pc}

00002690 <USB_DeviceDeinit>:
 *
 * @retval kStatus_USB_Success              The device is stopped successfully.
 * @retval kStatus_USB_InvalidHandle        The device handle is a NULL pointer. Or the controller handle is invalid.
 */
usb_status_t USB_DeviceDeinit(usb_device_handle handle)
{
    2690:	b580      	push	{r7, lr}
    2692:	b084      	sub	sp, #16
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	60fb      	str	r3, [r7, #12]

    if (NULL == deviceHandle)
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	2b00      	cmp	r3, #0
    26a0:	d101      	bne.n	26a6 <USB_DeviceDeinit+0x16>
    {
        return kStatus_USB_InvalidHandle;
    26a2:	2303      	movs	r3, #3
    26a4:	e012      	b.n	26cc <USB_DeviceDeinit+0x3c>
    }
    /* De-initialize the controller */
    if (NULL != deviceHandle->controllerInterface)
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	685b      	ldr	r3, [r3, #4]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d009      	beq.n	26c2 <USB_DeviceDeinit+0x32>
    {
        deviceHandle->controllerInterface->deviceDeinit(deviceHandle->controllerHandle);
    26ae:	68fb      	ldr	r3, [r7, #12]
    26b0:	685b      	ldr	r3, [r3, #4]
    26b2:	685a      	ldr	r2, [r3, #4]
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	0018      	movs	r0, r3
    26ba:	4790      	blx	r2
        deviceHandle->controllerInterface = (usb_device_controller_interface_struct_t *)NULL;
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	2200      	movs	r2, #0
    26c0:	605a      	str	r2, [r3, #4]
    }

    /* Free the device handle. */
    USB_DeviceFreeHandle(deviceHandle);
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	0018      	movs	r0, r3
    26c6:	f7ff fcfb 	bl	20c0 <USB_DeviceFreeHandle>
    return kStatus_USB_Success;
    26ca:	2300      	movs	r3, #0
}
    26cc:	0018      	movs	r0, r3
    26ce:	46bd      	mov	sp, r7
    26d0:	b004      	add	sp, #16
    26d2:	bd80      	pop	{r7, pc}

000026d4 <USB_DeviceSendRequest>:
 * should implement a queue in the application level.
 * The subsequent transfer could begin only when the previous transfer is done (get notification through the endpoint
 * callback).
 */
usb_status_t USB_DeviceSendRequest(usb_device_handle handle, uint8_t endpointAddress, uint8_t *buffer, uint32_t length)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	b084      	sub	sp, #16
    26d8:	af00      	add	r7, sp, #0
    26da:	60f8      	str	r0, [r7, #12]
    26dc:	607a      	str	r2, [r7, #4]
    26de:	603b      	str	r3, [r7, #0]
    26e0:	230b      	movs	r3, #11
    26e2:	18fb      	adds	r3, r7, r3
    26e4:	1c0a      	adds	r2, r1, #0
    26e6:	701a      	strb	r2, [r3, #0]
    return USB_DeviceTransfer(handle, (endpointAddress & USB_ENDPOINT_NUMBER_MASK) |
    26e8:	230b      	movs	r3, #11
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	220f      	movs	r2, #15
    26f0:	4013      	ands	r3, r2
    26f2:	b2db      	uxtb	r3, r3
    26f4:	2280      	movs	r2, #128	; 0x80
    26f6:	4252      	negs	r2, r2
    26f8:	4313      	orrs	r3, r2
    26fa:	b2d9      	uxtb	r1, r3
    26fc:	683b      	ldr	r3, [r7, #0]
    26fe:	687a      	ldr	r2, [r7, #4]
    2700:	68f8      	ldr	r0, [r7, #12]
    2702:	f7ff fd19 	bl	2138 <USB_DeviceTransfer>
    2706:	0003      	movs	r3, r0
                                          (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
                              buffer, length);
}
    2708:	0018      	movs	r0, r3
    270a:	46bd      	mov	sp, r7
    270c:	b004      	add	sp, #16
    270e:	bd80      	pop	{r7, pc}

00002710 <USB_DeviceRecvRequest>:
 * should implement a queue in the application level.
 * The subsequent transfer could begin only when the previous transfer is done (get notification through the endpoint
 * callback).
 */
usb_status_t USB_DeviceRecvRequest(usb_device_handle handle, uint8_t endpointAddress, uint8_t *buffer, uint32_t length)
{
    2710:	b580      	push	{r7, lr}
    2712:	b084      	sub	sp, #16
    2714:	af00      	add	r7, sp, #0
    2716:	60f8      	str	r0, [r7, #12]
    2718:	607a      	str	r2, [r7, #4]
    271a:	603b      	str	r3, [r7, #0]
    271c:	230b      	movs	r3, #11
    271e:	18fb      	adds	r3, r7, r3
    2720:	1c0a      	adds	r2, r1, #0
    2722:	701a      	strb	r2, [r3, #0]
    return USB_DeviceTransfer(handle, (endpointAddress & USB_ENDPOINT_NUMBER_MASK) |
    2724:	230b      	movs	r3, #11
    2726:	18fb      	adds	r3, r7, r3
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	220f      	movs	r2, #15
    272c:	4013      	ands	r3, r2
    272e:	b2d9      	uxtb	r1, r3
    2730:	683b      	ldr	r3, [r7, #0]
    2732:	687a      	ldr	r2, [r7, #4]
    2734:	68f8      	ldr	r0, [r7, #12]
    2736:	f7ff fcff 	bl	2138 <USB_DeviceTransfer>
    273a:	0003      	movs	r3, r0
                                          (USB_OUT << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
                              buffer, length);
}
    273c:	0018      	movs	r0, r3
    273e:	46bd      	mov	sp, r7
    2740:	b004      	add	sp, #16
    2742:	bd80      	pop	{r7, pc}

00002744 <USB_DeviceInitEndpoint>:
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 */
usb_status_t USB_DeviceInitEndpoint(usb_device_handle handle,
                                    usb_device_endpoint_init_struct_t *epInit,
                                    usb_device_endpoint_callback_struct_t *endpointCallback)
{
    2744:	b580      	push	{r7, lr}
    2746:	b086      	sub	sp, #24
    2748:	af00      	add	r7, sp, #0
    274a:	60f8      	str	r0, [r7, #12]
    274c:	60b9      	str	r1, [r7, #8]
    274e:	607a      	str	r2, [r7, #4]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	617b      	str	r3, [r7, #20]
    uint8_t endpoint;
    uint8_t direction;

    if (!deviceHandle)
    2754:	697b      	ldr	r3, [r7, #20]
    2756:	2b00      	cmp	r3, #0
    2758:	d101      	bne.n	275e <USB_DeviceInitEndpoint+0x1a>
    {
        return kStatus_USB_InvalidHandle;
    275a:	2303      	movs	r3, #3
    275c:	e060      	b.n	2820 <USB_DeviceInitEndpoint+0xdc>
    }

    if ((!epInit) || (!endpointCallback))
    275e:	68bb      	ldr	r3, [r7, #8]
    2760:	2b00      	cmp	r3, #0
    2762:	d002      	beq.n	276a <USB_DeviceInitEndpoint+0x26>
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	2b00      	cmp	r3, #0
    2768:	d101      	bne.n	276e <USB_DeviceInitEndpoint+0x2a>
    {
        return kStatus_USB_InvalidParameter;
    276a:	2304      	movs	r3, #4
    276c:	e058      	b.n	2820 <USB_DeviceInitEndpoint+0xdc>
    }

    endpoint = epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK;
    276e:	68bb      	ldr	r3, [r7, #8]
    2770:	789a      	ldrb	r2, [r3, #2]
    2772:	2313      	movs	r3, #19
    2774:	18fb      	adds	r3, r7, r3
    2776:	210f      	movs	r1, #15
    2778:	400a      	ands	r2, r1
    277a:	701a      	strb	r2, [r3, #0]
    direction = (epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    277c:	68bb      	ldr	r3, [r7, #8]
    277e:	789a      	ldrb	r2, [r3, #2]
    2780:	2312      	movs	r3, #18
    2782:	18fb      	adds	r3, r7, r3
    2784:	09d2      	lsrs	r2, r2, #7
    2786:	701a      	strb	r2, [r3, #0]
                USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;

    if (endpoint < USB_DEVICE_CONFIG_ENDPOINTS)
    2788:	2313      	movs	r3, #19
    278a:	18fb      	adds	r3, r7, r3
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	2b03      	cmp	r3, #3
    2790:	d845      	bhi.n	281e <USB_DeviceInitEndpoint+0xda>
    {
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn =
    2792:	2313      	movs	r3, #19
    2794:	18fb      	adds	r3, r7, r3
    2796:	781b      	ldrb	r3, [r3, #0]
    2798:	18db      	adds	r3, r3, r3
    279a:	b2da      	uxtb	r2, r3
    279c:	2312      	movs	r3, #18
    279e:	18fb      	adds	r3, r7, r3
    27a0:	781b      	ldrb	r3, [r3, #0]
    27a2:	4313      	orrs	r3, r2
    27a4:	b2db      	uxtb	r3, r3
    27a6:	0018      	movs	r0, r3
            endpointCallback->callbackFn;
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	681a      	ldr	r2, [r3, #0]
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn =
    27ac:	6979      	ldr	r1, [r7, #20]
    27ae:	0003      	movs	r3, r0
    27b0:	005b      	lsls	r3, r3, #1
    27b2:	181b      	adds	r3, r3, r0
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	18cb      	adds	r3, r1, r3
    27b8:	330c      	adds	r3, #12
    27ba:	601a      	str	r2, [r3, #0]
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackParam =
    27bc:	2313      	movs	r3, #19
    27be:	18fb      	adds	r3, r7, r3
    27c0:	781b      	ldrb	r3, [r3, #0]
    27c2:	18db      	adds	r3, r3, r3
    27c4:	b2da      	uxtb	r2, r3
    27c6:	2312      	movs	r3, #18
    27c8:	18fb      	adds	r3, r7, r3
    27ca:	781b      	ldrb	r3, [r3, #0]
    27cc:	4313      	orrs	r3, r2
    27ce:	b2db      	uxtb	r3, r3
    27d0:	0018      	movs	r0, r3
            endpointCallback->callbackParam;
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685a      	ldr	r2, [r3, #4]
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackParam =
    27d6:	6979      	ldr	r1, [r7, #20]
    27d8:	0003      	movs	r3, r0
    27da:	005b      	lsls	r3, r3, #1
    27dc:	181b      	adds	r3, r3, r0
    27de:	009b      	lsls	r3, r3, #2
    27e0:	18cb      	adds	r3, r1, r3
    27e2:	3310      	adds	r3, #16
    27e4:	601a      	str	r2, [r3, #0]
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].isBusy = 0U;
    27e6:	2313      	movs	r3, #19
    27e8:	18fb      	adds	r3, r7, r3
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	18db      	adds	r3, r3, r3
    27ee:	b2da      	uxtb	r2, r3
    27f0:	2312      	movs	r3, #18
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	4313      	orrs	r3, r2
    27f8:	b2db      	uxtb	r3, r3
    27fa:	0019      	movs	r1, r3
    27fc:	697a      	ldr	r2, [r7, #20]
    27fe:	000b      	movs	r3, r1
    2800:	005b      	lsls	r3, r3, #1
    2802:	185b      	adds	r3, r3, r1
    2804:	009b      	lsls	r3, r3, #2
    2806:	18d3      	adds	r3, r2, r3
    2808:	3314      	adds	r3, #20
    280a:	2200      	movs	r2, #0
    280c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        return kStatus_USB_InvalidParameter;
    }
    return USB_DeviceControl(handle, kUSB_DeviceControlEndpointInit, epInit);
    280e:	68ba      	ldr	r2, [r7, #8]
    2810:	68fb      	ldr	r3, [r7, #12]
    2812:	2102      	movs	r1, #2
    2814:	0018      	movs	r0, r3
    2816:	f7ff fd15 	bl	2244 <USB_DeviceControl>
    281a:	0003      	movs	r3, r0
    281c:	e000      	b.n	2820 <USB_DeviceInitEndpoint+0xdc>
        return kStatus_USB_InvalidParameter;
    281e:	2304      	movs	r3, #4
}
    2820:	0018      	movs	r0, r3
    2822:	46bd      	mov	sp, r7
    2824:	b006      	add	sp, #24
    2826:	bd80      	pop	{r7, pc}

00002828 <USB_DeviceDeinitEndpoint>:
 * @retval kStatus_USB_InvalidParameter     The endpoint number is more than USB_DEVICE_CONFIG_ENDPOINTS.
 * @retval kStatus_USB_Busy                 The endpoint is busy in EHCI driver.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 */
usb_status_t USB_DeviceDeinitEndpoint(usb_device_handle handle, uint8_t endpointAddress)
{
    2828:	b590      	push	{r4, r7, lr}
    282a:	b085      	sub	sp, #20
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	000a      	movs	r2, r1
    2832:	1cfb      	adds	r3, r7, #3
    2834:	701a      	strb	r2, [r3, #0]
    usb_device_struct_t *deviceHandle = (usb_device_struct_t *)handle;
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	60fb      	str	r3, [r7, #12]
    uint8_t endpoint = endpointAddress & USB_ENDPOINT_NUMBER_MASK;
    283a:	1cfb      	adds	r3, r7, #3
    283c:	781a      	ldrb	r2, [r3, #0]
    283e:	230b      	movs	r3, #11
    2840:	18fb      	adds	r3, r7, r3
    2842:	210f      	movs	r1, #15
    2844:	400a      	ands	r2, r1
    2846:	701a      	strb	r2, [r3, #0]
    uint8_t direction = (endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
    2848:	1cfb      	adds	r3, r7, #3
    284a:	781a      	ldrb	r2, [r3, #0]
    284c:	230a      	movs	r3, #10
    284e:	18fb      	adds	r3, r7, r3
    2850:	09d2      	lsrs	r2, r2, #7
    2852:	701a      	strb	r2, [r3, #0]
                        USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT;
    usb_status_t error = kStatus_USB_Error;
    2854:	2309      	movs	r3, #9
    2856:	18fb      	adds	r3, r7, r3
    2858:	2201      	movs	r2, #1
    285a:	701a      	strb	r2, [r3, #0]

    if (!deviceHandle)
    285c:	68fb      	ldr	r3, [r7, #12]
    285e:	2b00      	cmp	r3, #0
    2860:	d101      	bne.n	2866 <USB_DeviceDeinitEndpoint+0x3e>
    {
        return kStatus_USB_InvalidHandle;
    2862:	2303      	movs	r3, #3
    2864:	e04f      	b.n	2906 <USB_DeviceDeinitEndpoint+0xde>
    }

    error = USB_DeviceControl(handle, kUSB_DeviceControlEndpointDeinit, &endpointAddress);
    2866:	2309      	movs	r3, #9
    2868:	18fc      	adds	r4, r7, r3
    286a:	1cfa      	adds	r2, r7, #3
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	2103      	movs	r1, #3
    2870:	0018      	movs	r0, r3
    2872:	f7ff fce7 	bl	2244 <USB_DeviceControl>
    2876:	0003      	movs	r3, r0
    2878:	7023      	strb	r3, [r4, #0]

    if (endpoint < USB_DEVICE_CONFIG_ENDPOINTS)
    287a:	230b      	movs	r3, #11
    287c:	18fb      	adds	r3, r7, r3
    287e:	781b      	ldrb	r3, [r3, #0]
    2880:	2b03      	cmp	r3, #3
    2882:	d83f      	bhi.n	2904 <USB_DeviceDeinitEndpoint+0xdc>
    {
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackFn =
    2884:	230b      	movs	r3, #11
    2886:	18fb      	adds	r3, r7, r3
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	18db      	adds	r3, r3, r3
    288c:	b2da      	uxtb	r2, r3
    288e:	230a      	movs	r3, #10
    2890:	18fb      	adds	r3, r7, r3
    2892:	781b      	ldrb	r3, [r3, #0]
    2894:	4313      	orrs	r3, r2
    2896:	b2db      	uxtb	r3, r3
    2898:	0019      	movs	r1, r3
    289a:	68fa      	ldr	r2, [r7, #12]
    289c:	000b      	movs	r3, r1
    289e:	005b      	lsls	r3, r3, #1
    28a0:	185b      	adds	r3, r3, r1
    28a2:	009b      	lsls	r3, r3, #2
    28a4:	18d3      	adds	r3, r2, r3
    28a6:	330c      	adds	r3, #12
    28a8:	2200      	movs	r2, #0
    28aa:	601a      	str	r2, [r3, #0]
            (usb_device_endpoint_callback_t)NULL;
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].callbackParam = NULL;
    28ac:	230b      	movs	r3, #11
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	18db      	adds	r3, r3, r3
    28b4:	b2da      	uxtb	r2, r3
    28b6:	230a      	movs	r3, #10
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	4313      	orrs	r3, r2
    28be:	b2db      	uxtb	r3, r3
    28c0:	0019      	movs	r1, r3
    28c2:	68fa      	ldr	r2, [r7, #12]
    28c4:	000b      	movs	r3, r1
    28c6:	005b      	lsls	r3, r3, #1
    28c8:	185b      	adds	r3, r3, r1
    28ca:	009b      	lsls	r3, r3, #2
    28cc:	18d3      	adds	r3, r2, r3
    28ce:	3310      	adds	r3, #16
    28d0:	2200      	movs	r2, #0
    28d2:	601a      	str	r2, [r3, #0]
        deviceHandle->endpointCallback[(uint8_t)((uint32_t)endpoint << 1U) | direction].isBusy = 0U;
    28d4:	230b      	movs	r3, #11
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	18db      	adds	r3, r3, r3
    28dc:	b2da      	uxtb	r2, r3
    28de:	230a      	movs	r3, #10
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	4313      	orrs	r3, r2
    28e6:	b2db      	uxtb	r3, r3
    28e8:	0019      	movs	r1, r3
    28ea:	68fa      	ldr	r2, [r7, #12]
    28ec:	000b      	movs	r3, r1
    28ee:	005b      	lsls	r3, r3, #1
    28f0:	185b      	adds	r3, r3, r1
    28f2:	009b      	lsls	r3, r3, #2
    28f4:	18d3      	adds	r3, r2, r3
    28f6:	3314      	adds	r3, #20
    28f8:	2200      	movs	r2, #0
    28fa:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        return kStatus_USB_InvalidParameter;
    }
    return error;
    28fc:	2309      	movs	r3, #9
    28fe:	18fb      	adds	r3, r7, r3
    2900:	781b      	ldrb	r3, [r3, #0]
    2902:	e000      	b.n	2906 <USB_DeviceDeinitEndpoint+0xde>
        return kStatus_USB_InvalidParameter;
    2904:	2304      	movs	r3, #4
}
    2906:	0018      	movs	r0, r3
    2908:	46bd      	mov	sp, r7
    290a:	b005      	add	sp, #20
    290c:	bd90      	pop	{r4, r7, pc}

0000290e <USB_DeviceStallEndpoint>:
 * @retval kStatus_USB_InvalidHandle        The handle is a NULL pointer. Or the controller handle is invalid.
 * @retval kStatus_USB_InvalidParameter     The endpoint number is more than USB_DEVICE_CONFIG_ENDPOINTS.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 */
usb_status_t USB_DeviceStallEndpoint(usb_device_handle handle, uint8_t endpointAddress)
{
    290e:	b580      	push	{r7, lr}
    2910:	b082      	sub	sp, #8
    2912:	af00      	add	r7, sp, #0
    2914:	6078      	str	r0, [r7, #4]
    2916:	000a      	movs	r2, r1
    2918:	1cfb      	adds	r3, r7, #3
    291a:	701a      	strb	r2, [r3, #0]
    if ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) < USB_DEVICE_CONFIG_ENDPOINTS)
    291c:	1cfb      	adds	r3, r7, #3
    291e:	781b      	ldrb	r3, [r3, #0]
    2920:	001a      	movs	r2, r3
    2922:	230f      	movs	r3, #15
    2924:	4013      	ands	r3, r2
    2926:	2b03      	cmp	r3, #3
    2928:	d807      	bhi.n	293a <USB_DeviceStallEndpoint+0x2c>
    {
        return USB_DeviceControl(handle, kUSB_DeviceControlEndpointStall, &endpointAddress);
    292a:	1cfa      	adds	r2, r7, #3
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	2104      	movs	r1, #4
    2930:	0018      	movs	r0, r3
    2932:	f7ff fc87 	bl	2244 <USB_DeviceControl>
    2936:	0003      	movs	r3, r0
    2938:	e000      	b.n	293c <USB_DeviceStallEndpoint+0x2e>
    }
    else
    {
        return kStatus_USB_InvalidParameter;
    293a:	2304      	movs	r3, #4
    }
}
    293c:	0018      	movs	r0, r3
    293e:	46bd      	mov	sp, r7
    2940:	b002      	add	sp, #8
    2942:	bd80      	pop	{r7, pc}

00002944 <USB_DeviceUnstallEndpoint>:
 * @retval kStatus_USB_InvalidHandle        The handle is a NULL pointer. Or the controller handle is invalid.
 * @retval kStatus_USB_InvalidParameter     The endpoint number is more than USB_DEVICE_CONFIG_ENDPOINTS.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 */
usb_status_t USB_DeviceUnstallEndpoint(usb_device_handle handle, uint8_t endpointAddress)
{
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
    294c:	000a      	movs	r2, r1
    294e:	1cfb      	adds	r3, r7, #3
    2950:	701a      	strb	r2, [r3, #0]
    if ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) < USB_DEVICE_CONFIG_ENDPOINTS)
    2952:	1cfb      	adds	r3, r7, #3
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	001a      	movs	r2, r3
    2958:	230f      	movs	r3, #15
    295a:	4013      	ands	r3, r2
    295c:	2b03      	cmp	r3, #3
    295e:	d807      	bhi.n	2970 <USB_DeviceUnstallEndpoint+0x2c>
    {
        return USB_DeviceControl(handle, kUSB_DeviceControlEndpointUnstall, &endpointAddress);
    2960:	1cfa      	adds	r2, r7, #3
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	2105      	movs	r1, #5
    2966:	0018      	movs	r0, r3
    2968:	f7ff fc6c 	bl	2244 <USB_DeviceControl>
    296c:	0003      	movs	r3, r0
    296e:	e000      	b.n	2972 <USB_DeviceUnstallEndpoint+0x2e>
    }
    else
    {
        return kStatus_USB_InvalidParameter;
    2970:	2304      	movs	r3, #4
    }
}
    2972:	0018      	movs	r0, r3
    2974:	46bd      	mov	sp, r7
    2976:	b002      	add	sp, #8
    2978:	bd80      	pop	{r7, pc}
	...

0000297c <USB_DeviceGetStatus>:
 * @retval kStatus_USB_InvalidParameter     The param is NULL pointer.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 * @retval kStatus_USB_Error                Unsupported type.
 */
usb_status_t USB_DeviceGetStatus(usb_device_handle handle, usb_device_status_t type, void *param)
{
    297c:	b590      	push	{r4, r7, lr}
    297e:	b087      	sub	sp, #28
    2980:	af00      	add	r7, sp, #0
    2982:	60f8      	str	r0, [r7, #12]
    2984:	607a      	str	r2, [r7, #4]
    2986:	230b      	movs	r3, #11
    2988:	18fb      	adds	r3, r7, r3
    298a:	1c0a      	adds	r2, r1, #0
    298c:	701a      	strb	r2, [r3, #0]
    uint8_t *temp8;
    usb_status_t error = kStatus_USB_Error;
    298e:	2317      	movs	r3, #23
    2990:	18fb      	adds	r3, r7, r3
    2992:	2201      	movs	r2, #1
    2994:	701a      	strb	r2, [r3, #0]

    if (NULL == param)
    2996:	687b      	ldr	r3, [r7, #4]
    2998:	2b00      	cmp	r3, #0
    299a:	d101      	bne.n	29a0 <USB_DeviceGetStatus+0x24>
    {
        return kStatus_USB_InvalidParameter;
    299c:	2304      	movs	r3, #4
    299e:	e05c      	b.n	2a5a <USB_DeviceGetStatus+0xde>
    }
    switch (type)
    29a0:	230b      	movs	r3, #11
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	2b08      	cmp	r3, #8
    29a8:	d853      	bhi.n	2a52 <USB_DeviceGetStatus+0xd6>
    29aa:	009a      	lsls	r2, r3, #2
    29ac:	4b2d      	ldr	r3, [pc, #180]	; (2a64 <USB_DeviceGetStatus+0xe8>)
    29ae:	18d3      	adds	r3, r2, r3
    29b0:	681b      	ldr	r3, [r3, #0]
    29b2:	469f      	mov	pc, r3
    {
        case kUSB_DeviceStatusSpeed:
            error = USB_DeviceControl(handle, kUSB_DeviceControlGetSpeed, param);
    29b4:	2317      	movs	r3, #23
    29b6:	18fc      	adds	r4, r7, r3
    29b8:	687a      	ldr	r2, [r7, #4]
    29ba:	68fb      	ldr	r3, [r7, #12]
    29bc:	210f      	movs	r1, #15
    29be:	0018      	movs	r0, r3
    29c0:	f7ff fc40 	bl	2244 <USB_DeviceControl>
    29c4:	0003      	movs	r3, r0
    29c6:	7023      	strb	r3, [r4, #0]
            break;
    29c8:	e044      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusOtg:
            error = USB_DeviceControl(handle, kUSB_DeviceControlGetOtgStatus, param);
    29ca:	2317      	movs	r3, #23
    29cc:	18fc      	adds	r4, r7, r3
    29ce:	687a      	ldr	r2, [r7, #4]
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	2110      	movs	r1, #16
    29d4:	0018      	movs	r0, r3
    29d6:	f7ff fc35 	bl	2244 <USB_DeviceControl>
    29da:	0003      	movs	r3, r0
    29dc:	7023      	strb	r3, [r4, #0]
            break;
    29de:	e039      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusDeviceState:
            temp8 = (uint8_t *)param;
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	613b      	str	r3, [r7, #16]
            error = kStatus_USB_Success;
    29e4:	2317      	movs	r3, #23
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	2200      	movs	r2, #0
    29ea:	701a      	strb	r2, [r3, #0]
            *temp8 = ((usb_device_struct_t *)handle)->state;
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	226e      	movs	r2, #110	; 0x6e
    29f0:	5c9a      	ldrb	r2, [r3, r2]
    29f2:	693b      	ldr	r3, [r7, #16]
    29f4:	701a      	strb	r2, [r3, #0]
            break;
    29f6:	e02d      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusAddress:
            temp8 = (uint8_t *)param;
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	613b      	str	r3, [r7, #16]
            error = kStatus_USB_Success;
    29fc:	2317      	movs	r3, #23
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	2200      	movs	r2, #0
    2a02:	701a      	strb	r2, [r3, #0]
            *temp8 = ((usb_device_struct_t *)handle)->deviceAddress;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	226c      	movs	r2, #108	; 0x6c
    2a08:	5c9a      	ldrb	r2, [r3, r2]
    2a0a:	693b      	ldr	r3, [r7, #16]
    2a0c:	701a      	strb	r2, [r3, #0]
            break;
    2a0e:	e021      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusDevice:
            error = USB_DeviceControl(handle, kUSB_DeviceControlGetDeviceStatus, param);
    2a10:	2317      	movs	r3, #23
    2a12:	18fc      	adds	r4, r7, r3
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	68fb      	ldr	r3, [r7, #12]
    2a18:	2106      	movs	r1, #6
    2a1a:	0018      	movs	r0, r3
    2a1c:	f7ff fc12 	bl	2244 <USB_DeviceControl>
    2a20:	0003      	movs	r3, r0
    2a22:	7023      	strb	r3, [r4, #0]
            break;
    2a24:	e016      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusEndpoint:
            error = USB_DeviceControl(handle, kUSB_DeviceControlGetEndpointStatus, param);
    2a26:	2317      	movs	r3, #23
    2a28:	18fc      	adds	r4, r7, r3
    2a2a:	687a      	ldr	r2, [r7, #4]
    2a2c:	68fb      	ldr	r3, [r7, #12]
    2a2e:	2107      	movs	r1, #7
    2a30:	0018      	movs	r0, r3
    2a32:	f7ff fc07 	bl	2244 <USB_DeviceControl>
    2a36:	0003      	movs	r3, r0
    2a38:	7023      	strb	r3, [r4, #0]
            break;
    2a3a:	e00b      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        case kUSB_DeviceStatusSynchFrame:
            error = USB_DeviceControl(handle, kUSB_DeviceControlGetSynchFrame, param);
    2a3c:	2317      	movs	r3, #23
    2a3e:	18fc      	adds	r4, r7, r3
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	2109      	movs	r1, #9
    2a46:	0018      	movs	r0, r3
    2a48:	f7ff fbfc 	bl	2244 <USB_DeviceControl>
    2a4c:	0003      	movs	r3, r0
    2a4e:	7023      	strb	r3, [r4, #0]
            break;
    2a50:	e000      	b.n	2a54 <USB_DeviceGetStatus+0xd8>
        default:
            break;
    2a52:	46c0      	nop			; (mov r8, r8)
    }
    return error;
    2a54:	2317      	movs	r3, #23
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	781b      	ldrb	r3, [r3, #0]
}
    2a5a:	0018      	movs	r0, r3
    2a5c:	46bd      	mov	sp, r7
    2a5e:	b007      	add	sp, #28
    2a60:	bd90      	pop	{r4, r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	00004f14 	.word	0x00004f14

00002a68 <USB_DeviceSetStatus>:
 * @retval kStatus_USB_InvalidHandle        The handle is a NULL pointer. Or the controller handle is invalid.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller.
 * @retval kStatus_USB_Error                Unsupported type, or the param is NULL pointer.
 */
usb_status_t USB_DeviceSetStatus(usb_device_handle handle, usb_device_status_t type, void *param)
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b087      	sub	sp, #28
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	60f8      	str	r0, [r7, #12]
    2a70:	607a      	str	r2, [r7, #4]
    2a72:	230b      	movs	r3, #11
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	1c0a      	adds	r2, r1, #0
    2a78:	701a      	strb	r2, [r3, #0]
    usb_status_t error = kStatus_USB_Error;
    2a7a:	2317      	movs	r3, #23
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	2201      	movs	r2, #1
    2a80:	701a      	strb	r2, [r3, #0]
    switch (type)
    2a82:	230b      	movs	r3, #11
    2a84:	18fb      	adds	r3, r7, r3
    2a86:	781b      	ldrb	r3, [r3, #0]
    2a88:	3b03      	subs	r3, #3
    2a8a:	2b0b      	cmp	r3, #11
    2a8c:	d86b      	bhi.n	2b66 <USB_DeviceSetStatus+0xfe>
    2a8e:	009a      	lsls	r2, r3, #2
    2a90:	4b3b      	ldr	r3, [pc, #236]	; (2b80 <USB_DeviceSetStatus+0x118>)
    2a92:	18d3      	adds	r3, r2, r3
    2a94:	681b      	ldr	r3, [r3, #0]
    2a96:	469f      	mov	pc, r3
    {
        case kUSB_DeviceStatusOtg:
            error = USB_DeviceControl(handle, kUSB_DeviceControlSetOtgStatus, param);
    2a98:	2317      	movs	r3, #23
    2a9a:	18fc      	adds	r4, r7, r3
    2a9c:	687a      	ldr	r2, [r7, #4]
    2a9e:	68fb      	ldr	r3, [r7, #12]
    2aa0:	2111      	movs	r1, #17
    2aa2:	0018      	movs	r0, r3
    2aa4:	f7ff fbce 	bl	2244 <USB_DeviceControl>
    2aa8:	0003      	movs	r3, r0
    2aaa:	7023      	strb	r3, [r4, #0]
            break;
    2aac:	e060      	b.n	2b70 <USB_DeviceSetStatus+0x108>
        case kUSB_DeviceStatusDeviceState:
            if (NULL != param)
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d05a      	beq.n	2b6a <USB_DeviceSetStatus+0x102>
            {
                error = kStatus_USB_Success;
    2ab4:	2317      	movs	r3, #23
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	2200      	movs	r2, #0
    2aba:	701a      	strb	r2, [r3, #0]
                ((usb_device_struct_t *)handle)->state = (uint8_t)(*(uint8_t *)param);
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	7819      	ldrb	r1, [r3, #0]
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	226e      	movs	r2, #110	; 0x6e
    2ac4:	5499      	strb	r1, [r3, r2]
            }
            break;
    2ac6:	e050      	b.n	2b6a <USB_DeviceSetStatus+0x102>
        case kUSB_DeviceStatusAddress:
            if (kUSB_DeviceStateAddressing != ((usb_device_struct_t *)handle)->state)
    2ac8:	68fb      	ldr	r3, [r7, #12]
    2aca:	226e      	movs	r2, #110	; 0x6e
    2acc:	5c9b      	ldrb	r3, [r3, r2]
    2ace:	2b03      	cmp	r3, #3
    2ad0:	d010      	beq.n	2af4 <USB_DeviceSetStatus+0x8c>
            {
                if (NULL != param)
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d04a      	beq.n	2b6e <USB_DeviceSetStatus+0x106>
                {
                    error = kStatus_USB_Success;
    2ad8:	2317      	movs	r3, #23
    2ada:	18fb      	adds	r3, r7, r3
    2adc:	2200      	movs	r2, #0
    2ade:	701a      	strb	r2, [r3, #0]
                    ((usb_device_struct_t *)handle)->deviceAddress = (uint8_t)(*(uint8_t *)param);
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	7819      	ldrb	r1, [r3, #0]
    2ae4:	68fb      	ldr	r3, [r7, #12]
    2ae6:	226c      	movs	r2, #108	; 0x6c
    2ae8:	5499      	strb	r1, [r3, r2]
                    ((usb_device_struct_t *)handle)->state = kUSB_DeviceStateAddressing;
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	226e      	movs	r2, #110	; 0x6e
    2aee:	2103      	movs	r1, #3
    2af0:	5499      	strb	r1, [r3, r2]
            else
            {
                error = USB_DeviceControl(handle, kUSB_DeviceControlSetDeviceAddress,
                                          &((usb_device_struct_t *)handle)->deviceAddress);
            }
            break;
    2af2:	e03c      	b.n	2b6e <USB_DeviceSetStatus+0x106>
                                          &((usb_device_struct_t *)handle)->deviceAddress);
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	336c      	adds	r3, #108	; 0x6c
    2af8:	001a      	movs	r2, r3
                error = USB_DeviceControl(handle, kUSB_DeviceControlSetDeviceAddress,
    2afa:	2317      	movs	r3, #23
    2afc:	18fc      	adds	r4, r7, r3
    2afe:	68fb      	ldr	r3, [r7, #12]
    2b00:	2108      	movs	r1, #8
    2b02:	0018      	movs	r0, r3
    2b04:	f7ff fb9e 	bl	2244 <USB_DeviceControl>
    2b08:	0003      	movs	r3, r0
    2b0a:	7023      	strb	r3, [r4, #0]
            break;
    2b0c:	e02f      	b.n	2b6e <USB_DeviceSetStatus+0x106>
        case kUSB_DeviceStatusBusResume:
            error = USB_DeviceControl(handle, kUSB_DeviceControlResume, param);
    2b0e:	2317      	movs	r3, #23
    2b10:	18fc      	adds	r4, r7, r3
    2b12:	687a      	ldr	r2, [r7, #4]
    2b14:	68fb      	ldr	r3, [r7, #12]
    2b16:	210a      	movs	r1, #10
    2b18:	0018      	movs	r0, r3
    2b1a:	f7ff fb93 	bl	2244 <USB_DeviceControl>
    2b1e:	0003      	movs	r3, r0
    2b20:	7023      	strb	r3, [r4, #0]
            break;
    2b22:	e025      	b.n	2b70 <USB_DeviceSetStatus+0x108>
        case kUSB_DeviceStatusBusSleepResume:
            error = USB_DeviceControl(handle, kUSB_DeviceControlSleepResume, param);
    2b24:	2317      	movs	r3, #23
    2b26:	18fc      	adds	r4, r7, r3
    2b28:	687a      	ldr	r2, [r7, #4]
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	210b      	movs	r1, #11
    2b2e:	0018      	movs	r0, r3
    2b30:	f7ff fb88 	bl	2244 <USB_DeviceControl>
    2b34:	0003      	movs	r3, r0
    2b36:	7023      	strb	r3, [r4, #0]
            break;
    2b38:	e01a      	b.n	2b70 <USB_DeviceSetStatus+0x108>
        case kUSB_DeviceStatusBusSuspend:
            error = USB_DeviceControl(handle, kUSB_DeviceControlSuspend, param);
    2b3a:	2317      	movs	r3, #23
    2b3c:	18fc      	adds	r4, r7, r3
    2b3e:	687a      	ldr	r2, [r7, #4]
    2b40:	68fb      	ldr	r3, [r7, #12]
    2b42:	210c      	movs	r1, #12
    2b44:	0018      	movs	r0, r3
    2b46:	f7ff fb7d 	bl	2244 <USB_DeviceControl>
    2b4a:	0003      	movs	r3, r0
    2b4c:	7023      	strb	r3, [r4, #0]
            break;
    2b4e:	e00f      	b.n	2b70 <USB_DeviceSetStatus+0x108>
        case kUSB_DeviceStatusBusSleep:
            error = USB_DeviceControl(handle, kUSB_DeviceControlSleep, param);
    2b50:	2317      	movs	r3, #23
    2b52:	18fc      	adds	r4, r7, r3
    2b54:	687a      	ldr	r2, [r7, #4]
    2b56:	68fb      	ldr	r3, [r7, #12]
    2b58:	210d      	movs	r1, #13
    2b5a:	0018      	movs	r0, r3
    2b5c:	f7ff fb72 	bl	2244 <USB_DeviceControl>
    2b60:	0003      	movs	r3, r0
    2b62:	7023      	strb	r3, [r4, #0]
            break;
    2b64:	e004      	b.n	2b70 <USB_DeviceSetStatus+0x108>
        default:
            break;
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	e002      	b.n	2b70 <USB_DeviceSetStatus+0x108>
            break;
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	e000      	b.n	2b70 <USB_DeviceSetStatus+0x108>
            break;
    2b6e:	46c0      	nop			; (mov r8, r8)
    }
    return error;
    2b70:	2317      	movs	r3, #23
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	781b      	ldrb	r3, [r3, #0]
}
    2b76:	0018      	movs	r0, r3
    2b78:	46bd      	mov	sp, r7
    2b7a:	b007      	add	sp, #28
    2b7c:	bd90      	pop	{r4, r7, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	00004f38 	.word	0x00004f38

00002b84 <USB_OsaEnterCritical>:
{
    free(p);
}

void USB_OsaEnterCritical(uint32_t *sr)
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b084      	sub	sp, #16
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2b8c:	f3ef 8310 	mrs	r3, PRIMASK
    2b90:	60fb      	str	r3, [r7, #12]
  return(result);
    2b92:	68fa      	ldr	r2, [r7, #12]
    *sr = __get_PRIMASK();
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2b98:	b672      	cpsid	i

    __disable_irq();
    __ASM("CPSID I");
    2b9a:	b672      	cpsid	i
}
    2b9c:	46c0      	nop			; (mov r8, r8)
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b004      	add	sp, #16
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <USB_OsaExitCritical>:

void USB_OsaExitCritical(uint32_t sr)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b084      	sub	sp, #16
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2bb0:	68fb      	ldr	r3, [r7, #12]
    2bb2:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(sr);
}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	46bd      	mov	sp, r7
    2bba:	b004      	add	sp, #16
    2bbc:	bd80      	pop	{r7, pc}
	...

00002bc0 <USB_DeviceCh9GetStatus>:
 */
static usb_status_t USB_DeviceCh9GetStatus(usb_device_handle handle,
                                           usb_setup_struct_t *setup,
                                           uint8_t **buffer,
                                           uint32_t *length)
{
    2bc0:	b590      	push	{r4, r7, lr}
    2bc2:	b087      	sub	sp, #28
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	60f8      	str	r0, [r7, #12]
    2bc8:	60b9      	str	r1, [r7, #8]
    2bca:	607a      	str	r2, [r7, #4]
    2bcc:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    2bce:	2317      	movs	r3, #23
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	2205      	movs	r2, #5
    2bd4:	701a      	strb	r2, [r3, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2bd6:	2316      	movs	r3, #22
    2bd8:	18fa      	adds	r2, r7, r3
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	2106      	movs	r1, #6
    2bde:	0018      	movs	r0, r3
    2be0:	f7ff fecc 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddress != state) && (kUSB_DeviceStateConfigured != state))
    2be4:	2316      	movs	r3, #22
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	2b01      	cmp	r3, #1
    2bec:	d008      	beq.n	2c00 <USB_DeviceCh9GetStatus+0x40>
    2bee:	2316      	movs	r3, #22
    2bf0:	18fb      	adds	r3, r7, r3
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d003      	beq.n	2c00 <USB_DeviceCh9GetStatus+0x40>
    {
        return error;
    2bf8:	2317      	movs	r3, #23
    2bfa:	18fb      	adds	r3, r7, r3
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	e061      	b.n	2cc4 <USB_DeviceCh9GetStatus+0x104>
    }

    if ((setup->bmRequestType & USB_REQUEST_TYPE_RECIPIENT_MASK) == USB_REQUEST_TYPE_RECIPIENT_DEVICE)
    2c00:	68bb      	ldr	r3, [r7, #8]
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	001a      	movs	r2, r3
    2c06:	231f      	movs	r3, #31
    2c08:	4013      	ands	r3, r2
    2c0a:	d118      	bne.n	2c3e <USB_DeviceCh9GetStatus+0x7e>
    {
        /* Get the device status */
        error = USB_DeviceGetStatus(handle, kUSB_DeviceStatusDevice, &s_UsbDeviceStandardRx);
    2c0c:	2317      	movs	r3, #23
    2c0e:	18fc      	adds	r4, r7, r3
    2c10:	4a2e      	ldr	r2, [pc, #184]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	2104      	movs	r1, #4
    2c16:	0018      	movs	r0, r3
    2c18:	f7ff feb0 	bl	297c <USB_DeviceGetStatus>
    2c1c:	0003      	movs	r3, r0
    2c1e:	7023      	strb	r3, [r4, #0]
        s_UsbDeviceStandardRx = s_UsbDeviceStandardRx & USB_GET_STATUS_DEVICE_MASK;
    2c20:	4b2a      	ldr	r3, [pc, #168]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c22:	881b      	ldrh	r3, [r3, #0]
    2c24:	2203      	movs	r2, #3
    2c26:	4013      	ands	r3, r2
    2c28:	b29a      	uxth	r2, r3
    2c2a:	4b28      	ldr	r3, [pc, #160]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c2c:	801a      	strh	r2, [r3, #0]
        s_UsbDeviceStandardRx = USB_SHORT_TO_LITTLE_ENDIAN(s_UsbDeviceStandardRx);
    2c2e:	4b27      	ldr	r3, [pc, #156]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c30:	881a      	ldrh	r2, [r3, #0]
    2c32:	4b26      	ldr	r3, [pc, #152]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c34:	801a      	strh	r2, [r3, #0]
        /* The device status length must be USB_DEVICE_STATUS_SIZE. */
        *length = USB_DEVICE_STATUS_SIZE;
    2c36:	683b      	ldr	r3, [r7, #0]
    2c38:	2202      	movs	r2, #2
    2c3a:	601a      	str	r2, [r3, #0]
    2c3c:	e03c      	b.n	2cb8 <USB_DeviceCh9GetStatus+0xf8>
    }
    else if ((setup->bmRequestType & USB_REQUEST_TYPE_RECIPIENT_MASK) == USB_REQUEST_TYPE_RECIPIENT_INTERFACE)
    2c3e:	68bb      	ldr	r3, [r7, #8]
    2c40:	781b      	ldrb	r3, [r3, #0]
    2c42:	001a      	movs	r2, r3
    2c44:	231f      	movs	r3, #31
    2c46:	4013      	ands	r3, r2
    2c48:	2b01      	cmp	r3, #1
    2c4a:	d10a      	bne.n	2c62 <USB_DeviceCh9GetStatus+0xa2>
    {
        /* Get the interface status */
        error = kStatus_USB_Success;
    2c4c:	2317      	movs	r3, #23
    2c4e:	18fb      	adds	r3, r7, r3
    2c50:	2200      	movs	r2, #0
    2c52:	701a      	strb	r2, [r3, #0]
        s_UsbDeviceStandardRx = 0U;
    2c54:	4b1d      	ldr	r3, [pc, #116]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2c56:	2200      	movs	r2, #0
    2c58:	801a      	strh	r2, [r3, #0]
        /* The interface status length must be USB_INTERFACE_STATUS_SIZE. */
        *length = USB_INTERFACE_STATUS_SIZE;
    2c5a:	683b      	ldr	r3, [r7, #0]
    2c5c:	2202      	movs	r2, #2
    2c5e:	601a      	str	r2, [r3, #0]
    2c60:	e02a      	b.n	2cb8 <USB_DeviceCh9GetStatus+0xf8>
    }
    else if ((setup->bmRequestType & USB_REQUEST_TYPE_RECIPIENT_MASK) == USB_REQUEST_TYPE_RECIPIENT_ENDPOINT)
    2c62:	68bb      	ldr	r3, [r7, #8]
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	001a      	movs	r2, r3
    2c68:	231f      	movs	r3, #31
    2c6a:	4013      	ands	r3, r2
    2c6c:	2b02      	cmp	r3, #2
    2c6e:	d123      	bne.n	2cb8 <USB_DeviceCh9GetStatus+0xf8>
    {
        /* Get the endpoint status */
        usb_device_endpoint_status_struct_t endpointStatus;
        endpointStatus.endpointAddress = (uint8_t)setup->wIndex;
    2c70:	68bb      	ldr	r3, [r7, #8]
    2c72:	889b      	ldrh	r3, [r3, #4]
    2c74:	b2da      	uxtb	r2, r3
    2c76:	2310      	movs	r3, #16
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	701a      	strb	r2, [r3, #0]
        endpointStatus.endpointStatus = kUSB_DeviceEndpointStateIdle;
    2c7c:	2310      	movs	r3, #16
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	2200      	movs	r2, #0
    2c82:	805a      	strh	r2, [r3, #2]
        error = USB_DeviceGetStatus(handle, kUSB_DeviceStatusEndpoint, &endpointStatus);
    2c84:	2317      	movs	r3, #23
    2c86:	18fc      	adds	r4, r7, r3
    2c88:	2310      	movs	r3, #16
    2c8a:	18fa      	adds	r2, r7, r3
    2c8c:	68fb      	ldr	r3, [r7, #12]
    2c8e:	2105      	movs	r1, #5
    2c90:	0018      	movs	r0, r3
    2c92:	f7ff fe73 	bl	297c <USB_DeviceGetStatus>
    2c96:	0003      	movs	r3, r0
    2c98:	7023      	strb	r3, [r4, #0]
        s_UsbDeviceStandardRx = endpointStatus.endpointStatus & USB_GET_STATUS_ENDPOINT_MASK;
    2c9a:	2310      	movs	r3, #16
    2c9c:	18fb      	adds	r3, r7, r3
    2c9e:	885b      	ldrh	r3, [r3, #2]
    2ca0:	2203      	movs	r2, #3
    2ca2:	4013      	ands	r3, r2
    2ca4:	b29a      	uxth	r2, r3
    2ca6:	4b09      	ldr	r3, [pc, #36]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2ca8:	801a      	strh	r2, [r3, #0]
        s_UsbDeviceStandardRx = USB_SHORT_TO_LITTLE_ENDIAN(s_UsbDeviceStandardRx);
    2caa:	4b08      	ldr	r3, [pc, #32]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2cac:	881a      	ldrh	r2, [r3, #0]
    2cae:	4b07      	ldr	r3, [pc, #28]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2cb0:	801a      	strh	r2, [r3, #0]
        /* The endpoint status length must be USB_INTERFACE_STATUS_SIZE. */
        *length = USB_ENDPOINT_STATUS_SIZE;
    2cb2:	683b      	ldr	r3, [r7, #0]
    2cb4:	2202      	movs	r2, #2
    2cb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
    }
    *buffer = (uint8_t *)&s_UsbDeviceStandardRx;
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	4a04      	ldr	r2, [pc, #16]	; (2ccc <USB_DeviceCh9GetStatus+0x10c>)
    2cbc:	601a      	str	r2, [r3, #0]

    return error;
    2cbe:	2317      	movs	r3, #23
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	781b      	ldrb	r3, [r3, #0]
}
    2cc4:	0018      	movs	r0, r3
    2cc6:	46bd      	mov	sp, r7
    2cc8:	b007      	add	sp, #28
    2cca:	bd90      	pop	{r4, r7, pc}
    2ccc:	1fff8ac8 	.word	0x1fff8ac8

00002cd0 <USB_DeviceCh9SetClearFeature>:
 */
static usb_status_t USB_DeviceCh9SetClearFeature(usb_device_handle handle,
                                                 usb_setup_struct_t *setup,
                                                 uint8_t **buffer,
                                                 uint32_t *length)
{
    2cd0:	b590      	push	{r4, r7, lr}
    2cd2:	b087      	sub	sp, #28
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	60f8      	str	r0, [r7, #12]
    2cd8:	60b9      	str	r1, [r7, #8]
    2cda:	607a      	str	r2, [r7, #4]
    2cdc:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    2cde:	2317      	movs	r3, #23
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	2205      	movs	r2, #5
    2ce4:	701a      	strb	r2, [r3, #0]
    uint8_t state;
    uint8_t isSet = 0U;
    2ce6:	2316      	movs	r3, #22
    2ce8:	18fb      	adds	r3, r7, r3
    2cea:	2200      	movs	r2, #0
    2cec:	701a      	strb	r2, [r3, #0]

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2cee:	2315      	movs	r3, #21
    2cf0:	18fa      	adds	r2, r7, r3
    2cf2:	68fb      	ldr	r3, [r7, #12]
    2cf4:	2106      	movs	r1, #6
    2cf6:	0018      	movs	r0, r3
    2cf8:	f7ff fe40 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddress != state) && (kUSB_DeviceStateConfigured != state))
    2cfc:	2315      	movs	r3, #21
    2cfe:	18fb      	adds	r3, r7, r3
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	2b01      	cmp	r3, #1
    2d04:	d008      	beq.n	2d18 <USB_DeviceCh9SetClearFeature+0x48>
    2d06:	2315      	movs	r3, #21
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	781b      	ldrb	r3, [r3, #0]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d003      	beq.n	2d18 <USB_DeviceCh9SetClearFeature+0x48>
    {
        return error;
    2d10:	2317      	movs	r3, #23
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	e056      	b.n	2dc6 <USB_DeviceCh9SetClearFeature+0xf6>
    }

    /* Identify the request is set or clear the feature. */
    if (USB_REQUEST_STANDARD_SET_FEATURE == setup->bRequest)
    2d18:	68bb      	ldr	r3, [r7, #8]
    2d1a:	785b      	ldrb	r3, [r3, #1]
    2d1c:	2b03      	cmp	r3, #3
    2d1e:	d103      	bne.n	2d28 <USB_DeviceCh9SetClearFeature+0x58>
    {
        isSet = 1U;
    2d20:	2316      	movs	r3, #22
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	2201      	movs	r2, #1
    2d26:	701a      	strb	r2, [r3, #0]
    }

    if ((setup->bmRequestType & USB_REQUEST_TYPE_RECIPIENT_MASK) == USB_REQUEST_TYPE_RECIPIENT_DEVICE)
    2d28:	68bb      	ldr	r3, [r7, #8]
    2d2a:	781b      	ldrb	r3, [r3, #0]
    2d2c:	001a      	movs	r2, r3
    2d2e:	231f      	movs	r3, #31
    2d30:	4013      	ands	r3, r2
    2d32:	d110      	bne.n	2d56 <USB_DeviceCh9SetClearFeature+0x86>
    {
        /* Set or Clear the device featrue. */
        if (USB_REQUEST_STANDARD_FEATURE_SELECTOR_DEVICE_REMOTE_WAKEUP == setup->wValue)
    2d34:	68bb      	ldr	r3, [r7, #8]
    2d36:	885b      	ldrh	r3, [r3, #2]
    2d38:	2b01      	cmp	r3, #1
    2d3a:	d141      	bne.n	2dc0 <USB_DeviceCh9SetClearFeature+0xf0>
        {
            /* Set or Clear the device remote wakeup featrue. */
            error = USB_DeviceConfigureRemoteWakeup(handle, isSet);
    2d3c:	2317      	movs	r3, #23
    2d3e:	18fc      	adds	r4, r7, r3
    2d40:	2316      	movs	r3, #22
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	781a      	ldrb	r2, [r3, #0]
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	0011      	movs	r1, r2
    2d4a:	0018      	movs	r0, r3
    2d4c:	f000 fe0a 	bl	3964 <USB_DeviceConfigureRemoteWakeup>
    2d50:	0003      	movs	r3, r0
    2d52:	7023      	strb	r3, [r4, #0]
    2d54:	e034      	b.n	2dc0 <USB_DeviceCh9SetClearFeature+0xf0>
        }
        else
        {
        }
    }
    else if ((setup->bmRequestType & USB_REQUEST_TYPE_RECIPIENT_MASK) == USB_REQUEST_TYPE_RECIPIENT_ENDPOINT)
    2d56:	68bb      	ldr	r3, [r7, #8]
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	001a      	movs	r2, r3
    2d5c:	231f      	movs	r3, #31
    2d5e:	4013      	ands	r3, r2
    2d60:	2b02      	cmp	r3, #2
    2d62:	d12d      	bne.n	2dc0 <USB_DeviceCh9SetClearFeature+0xf0>
    {
        /* Set or Clear the endpoint featrue. */
        if (USB_REQUEST_STANDARD_FEATURE_SELECTOR_ENDPOINT_HALT == setup->wValue)
    2d64:	68bb      	ldr	r3, [r7, #8]
    2d66:	885b      	ldrh	r3, [r3, #2]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d129      	bne.n	2dc0 <USB_DeviceCh9SetClearFeature+0xf0>
        {
            if (USB_CONTROL_ENDPOINT == (setup->wIndex & USB_ENDPOINT_NUMBER_MASK))
    2d6c:	68bb      	ldr	r3, [r7, #8]
    2d6e:	889b      	ldrh	r3, [r3, #4]
    2d70:	001a      	movs	r2, r3
    2d72:	230f      	movs	r3, #15
    2d74:	4013      	ands	r3, r2
    2d76:	d115      	bne.n	2da4 <USB_DeviceCh9SetClearFeature+0xd4>
            {
                /* Set or Clear the control endpoint status(halt or not). */
                if (isSet)
    2d78:	2316      	movs	r3, #22
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d008      	beq.n	2d94 <USB_DeviceCh9SetClearFeature+0xc4>
                {
                    USB_DeviceStallEndpoint(handle, (uint8_t)setup->wIndex);
    2d82:	68bb      	ldr	r3, [r7, #8]
    2d84:	889b      	ldrh	r3, [r3, #4]
    2d86:	b2da      	uxtb	r2, r3
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	0011      	movs	r1, r2
    2d8c:	0018      	movs	r0, r3
    2d8e:	f7ff fdbe 	bl	290e <USB_DeviceStallEndpoint>
    2d92:	e007      	b.n	2da4 <USB_DeviceCh9SetClearFeature+0xd4>
                }
                else
                {
                    USB_DeviceUnstallEndpoint(handle, (uint8_t)setup->wIndex);
    2d94:	68bb      	ldr	r3, [r7, #8]
    2d96:	889b      	ldrh	r3, [r3, #4]
    2d98:	b2da      	uxtb	r2, r3
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	0011      	movs	r1, r2
    2d9e:	0018      	movs	r0, r3
    2da0:	f7ff fdd0 	bl	2944 <USB_DeviceUnstallEndpoint>
                }
            }

            /* Set or Clear the endpoint status featrue. */
            error = USB_DeviceConfigureEndpointStatus(handle, setup->wIndex, isSet);
    2da4:	68bb      	ldr	r3, [r7, #8]
    2da6:	889b      	ldrh	r3, [r3, #4]
    2da8:	b2d9      	uxtb	r1, r3
    2daa:	2317      	movs	r3, #23
    2dac:	18fc      	adds	r4, r7, r3
    2dae:	2316      	movs	r3, #22
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	781a      	ldrb	r2, [r3, #0]
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	0018      	movs	r0, r3
    2db8:	f000 ffb4 	bl	3d24 <USB_DeviceConfigureEndpointStatus>
    2dbc:	0003      	movs	r3, r0
    2dbe:	7023      	strb	r3, [r4, #0]
    }
    else
    {
    }

    return error;
    2dc0:	2317      	movs	r3, #23
    2dc2:	18fb      	adds	r3, r7, r3
    2dc4:	781b      	ldrb	r3, [r3, #0]
}
    2dc6:	0018      	movs	r0, r3
    2dc8:	46bd      	mov	sp, r7
    2dca:	b007      	add	sp, #28
    2dcc:	bd90      	pop	{r4, r7, pc}

00002dce <USB_DeviceCh9SetAddress>:
 */
static usb_status_t USB_DeviceCh9SetAddress(usb_device_handle handle,
                                            usb_setup_struct_t *setup,
                                            uint8_t **buffer,
                                            uint32_t *length)
{
    2dce:	b590      	push	{r4, r7, lr}
    2dd0:	b087      	sub	sp, #28
    2dd2:	af00      	add	r7, sp, #0
    2dd4:	60f8      	str	r0, [r7, #12]
    2dd6:	60b9      	str	r1, [r7, #8]
    2dd8:	607a      	str	r2, [r7, #4]
    2dda:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    2ddc:	2317      	movs	r3, #23
    2dde:	18fb      	adds	r3, r7, r3
    2de0:	2205      	movs	r2, #5
    2de2:	701a      	strb	r2, [r3, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2de4:	2316      	movs	r3, #22
    2de6:	18fa      	adds	r2, r7, r3
    2de8:	68fb      	ldr	r3, [r7, #12]
    2dea:	2106      	movs	r1, #6
    2dec:	0018      	movs	r0, r3
    2dee:	f7ff fdc5 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddressing != state) && (kUSB_DeviceStateAddress != state) &&
    2df2:	2316      	movs	r3, #22
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	2b03      	cmp	r3, #3
    2dfa:	d00d      	beq.n	2e18 <USB_DeviceCh9SetAddress+0x4a>
    2dfc:	2316      	movs	r3, #22
    2dfe:	18fb      	adds	r3, r7, r3
    2e00:	781b      	ldrb	r3, [r3, #0]
    2e02:	2b01      	cmp	r3, #1
    2e04:	d008      	beq.n	2e18 <USB_DeviceCh9SetAddress+0x4a>
        (kUSB_DeviceStateDefault != state))
    2e06:	2316      	movs	r3, #22
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    if ((kUSB_DeviceStateAddressing != state) && (kUSB_DeviceStateAddress != state) &&
    2e0c:	2b02      	cmp	r3, #2
    2e0e:	d003      	beq.n	2e18 <USB_DeviceCh9SetAddress+0x4a>
    {
        return error;
    2e10:	2317      	movs	r3, #23
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	e037      	b.n	2e88 <USB_DeviceCh9SetAddress+0xba>
    }

    if (kUSB_DeviceStateAddressing != state)
    2e18:	2316      	movs	r3, #22
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	2b03      	cmp	r3, #3
    2e20:	d011      	beq.n	2e46 <USB_DeviceCh9SetAddress+0x78>
    {
        /* If the device address is not setting, pass the address and the device state will change to
         * kUSB_DeviceStateAddressing internally. */
        state = setup->wValue & 0xFFU;
    2e22:	68bb      	ldr	r3, [r7, #8]
    2e24:	885b      	ldrh	r3, [r3, #2]
    2e26:	b2da      	uxtb	r2, r3
    2e28:	2316      	movs	r3, #22
    2e2a:	18fb      	adds	r3, r7, r3
    2e2c:	701a      	strb	r2, [r3, #0]
        error = USB_DeviceSetStatus(handle, kUSB_DeviceStatusAddress, &state);
    2e2e:	2317      	movs	r3, #23
    2e30:	18fc      	adds	r4, r7, r3
    2e32:	2316      	movs	r3, #22
    2e34:	18fa      	adds	r2, r7, r3
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	2107      	movs	r1, #7
    2e3a:	0018      	movs	r0, r3
    2e3c:	f7ff fe14 	bl	2a68 <USB_DeviceSetStatus>
    2e40:	0003      	movs	r3, r0
    2e42:	7023      	strb	r3, [r4, #0]
    2e44:	e01d      	b.n	2e82 <USB_DeviceCh9SetAddress+0xb4>
    }
    else
    {
        /* If the device address is setting, set device address and the address will be write into the controller
         * internally. */
        error = USB_DeviceSetStatus(handle, kUSB_DeviceStatusAddress, NULL);
    2e46:	2317      	movs	r3, #23
    2e48:	18fc      	adds	r4, r7, r3
    2e4a:	68fb      	ldr	r3, [r7, #12]
    2e4c:	2200      	movs	r2, #0
    2e4e:	2107      	movs	r1, #7
    2e50:	0018      	movs	r0, r3
    2e52:	f7ff fe09 	bl	2a68 <USB_DeviceSetStatus>
    2e56:	0003      	movs	r3, r0
    2e58:	7023      	strb	r3, [r4, #0]
        /* And then change the device state to kUSB_DeviceStateAddress. */
        if (kStatus_USB_Success == error)
    2e5a:	2317      	movs	r3, #23
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	781b      	ldrb	r3, [r3, #0]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d10e      	bne.n	2e82 <USB_DeviceCh9SetAddress+0xb4>
        {
            state = kUSB_DeviceStateAddress;
    2e64:	2316      	movs	r3, #22
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	2201      	movs	r2, #1
    2e6a:	701a      	strb	r2, [r3, #0]
            error = USB_DeviceSetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2e6c:	2317      	movs	r3, #23
    2e6e:	18fc      	adds	r4, r7, r3
    2e70:	2316      	movs	r3, #22
    2e72:	18fa      	adds	r2, r7, r3
    2e74:	68fb      	ldr	r3, [r7, #12]
    2e76:	2106      	movs	r1, #6
    2e78:	0018      	movs	r0, r3
    2e7a:	f7ff fdf5 	bl	2a68 <USB_DeviceSetStatus>
    2e7e:	0003      	movs	r3, r0
    2e80:	7023      	strb	r3, [r4, #0]
        }
    }

    return error;
    2e82:	2317      	movs	r3, #23
    2e84:	18fb      	adds	r3, r7, r3
    2e86:	781b      	ldrb	r3, [r3, #0]
}
    2e88:	0018      	movs	r0, r3
    2e8a:	46bd      	mov	sp, r7
    2e8c:	b007      	add	sp, #28
    2e8e:	bd90      	pop	{r4, r7, pc}

00002e90 <USB_DeviceCh9GetDescriptor>:
 */
static usb_status_t USB_DeviceCh9GetDescriptor(usb_device_handle handle,
                                               usb_setup_struct_t *setup,
                                               uint8_t **buffer,
                                               uint32_t *length)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b086      	sub	sp, #24
    2e94:	af00      	add	r7, sp, #0
    2e96:	60f8      	str	r0, [r7, #12]
    2e98:	60b9      	str	r1, [r7, #8]
    2e9a:	607a      	str	r2, [r7, #4]
    2e9c:	603b      	str	r3, [r7, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2e9e:	2317      	movs	r3, #23
    2ea0:	18fa      	adds	r2, r7, r3
    2ea2:	68fb      	ldr	r3, [r7, #12]
    2ea4:	2106      	movs	r1, #6
    2ea6:	0018      	movs	r0, r3
    2ea8:	f7ff fd68 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddress != state) && (kUSB_DeviceStateConfigured != state) &&
    2eac:	2317      	movs	r3, #23
    2eae:	18fb      	adds	r3, r7, r3
    2eb0:	781b      	ldrb	r3, [r3, #0]
    2eb2:	2b01      	cmp	r3, #1
    2eb4:	d00b      	beq.n	2ece <USB_DeviceCh9GetDescriptor+0x3e>
    2eb6:	2317      	movs	r3, #23
    2eb8:	18fb      	adds	r3, r7, r3
    2eba:	781b      	ldrb	r3, [r3, #0]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d006      	beq.n	2ece <USB_DeviceCh9GetDescriptor+0x3e>
        (kUSB_DeviceStateDefault != state))
    2ec0:	2317      	movs	r3, #23
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	781b      	ldrb	r3, [r3, #0]
    if ((kUSB_DeviceStateAddress != state) && (kUSB_DeviceStateConfigured != state) &&
    2ec6:	2b02      	cmp	r3, #2
    2ec8:	d001      	beq.n	2ece <USB_DeviceCh9GetDescriptor+0x3e>
    {
        return kStatus_USB_InvalidRequest;
    2eca:	2305      	movs	r3, #5
    2ecc:	e006      	b.n	2edc <USB_DeviceCh9GetDescriptor+0x4c>
    }

    return USB_DeviceGetDescriptor(handle, setup, length, buffer);
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	683a      	ldr	r2, [r7, #0]
    2ed2:	68b9      	ldr	r1, [r7, #8]
    2ed4:	68f8      	ldr	r0, [r7, #12]
    2ed6:	f000 fae1 	bl	349c <USB_DeviceGetDescriptor>
    2eda:	0003      	movs	r3, r0
}
    2edc:	0018      	movs	r0, r3
    2ede:	46bd      	mov	sp, r7
    2ee0:	b006      	add	sp, #24
    2ee2:	bd80      	pop	{r7, pc}

00002ee4 <USB_DeviceCh9GetConfiguration>:
 */
static usb_status_t USB_DeviceCh9GetConfiguration(usb_device_handle handle,
                                                  usb_setup_struct_t *setup,
                                                  uint8_t **buffer,
                                                  uint32_t *length)
{
    2ee4:	b580      	push	{r7, lr}
    2ee6:	b086      	sub	sp, #24
    2ee8:	af00      	add	r7, sp, #0
    2eea:	60f8      	str	r0, [r7, #12]
    2eec:	60b9      	str	r1, [r7, #8]
    2eee:	607a      	str	r2, [r7, #4]
    2ef0:	603b      	str	r3, [r7, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2ef2:	2317      	movs	r3, #23
    2ef4:	18fa      	adds	r2, r7, r3
    2ef6:	68fb      	ldr	r3, [r7, #12]
    2ef8:	2106      	movs	r1, #6
    2efa:	0018      	movs	r0, r3
    2efc:	f7ff fd3e 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddress != state) && ((kUSB_DeviceStateConfigured != state)))
    2f00:	2317      	movs	r3, #23
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	2b01      	cmp	r3, #1
    2f08:	d006      	beq.n	2f18 <USB_DeviceCh9GetConfiguration+0x34>
    2f0a:	2317      	movs	r3, #23
    2f0c:	18fb      	adds	r3, r7, r3
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d001      	beq.n	2f18 <USB_DeviceCh9GetConfiguration+0x34>
    {
        return kStatus_USB_InvalidRequest;
    2f14:	2305      	movs	r3, #5
    2f16:	e00c      	b.n	2f32 <USB_DeviceCh9GetConfiguration+0x4e>
    }

    *length = USB_CONFIGURE_SIZE;
    2f18:	683b      	ldr	r3, [r7, #0]
    2f1a:	2201      	movs	r2, #1
    2f1c:	601a      	str	r2, [r3, #0]
    *buffer = (uint8_t *)&s_UsbDeviceStandardRx;
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	4a06      	ldr	r2, [pc, #24]	; (2f3c <USB_DeviceCh9GetConfiguration+0x58>)
    2f22:	601a      	str	r2, [r3, #0]
    return USB_DeviceGetConfigure(handle, (uint8_t *)&s_UsbDeviceStandardRx);
    2f24:	4a05      	ldr	r2, [pc, #20]	; (2f3c <USB_DeviceCh9GetConfiguration+0x58>)
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	0011      	movs	r1, r2
    2f2a:	0018      	movs	r0, r3
    2f2c:	f000 fb8e 	bl	364c <USB_DeviceGetConfigure>
    2f30:	0003      	movs	r3, r0
}
    2f32:	0018      	movs	r0, r3
    2f34:	46bd      	mov	sp, r7
    2f36:	b006      	add	sp, #24
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	1fff8ac8 	.word	0x1fff8ac8

00002f40 <USB_DeviceCh9SetConfiguration>:
 */
static usb_status_t USB_DeviceCh9SetConfiguration(usb_device_handle handle,
                                                  usb_setup_struct_t *setup,
                                                  uint8_t **buffer,
                                                  uint32_t *length)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b086      	sub	sp, #24
    2f44:	af00      	add	r7, sp, #0
    2f46:	60f8      	str	r0, [r7, #12]
    2f48:	60b9      	str	r1, [r7, #8]
    2f4a:	607a      	str	r2, [r7, #4]
    2f4c:	603b      	str	r3, [r7, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2f4e:	2317      	movs	r3, #23
    2f50:	18fa      	adds	r2, r7, r3
    2f52:	68fb      	ldr	r3, [r7, #12]
    2f54:	2106      	movs	r1, #6
    2f56:	0018      	movs	r0, r3
    2f58:	f7ff fd10 	bl	297c <USB_DeviceGetStatus>

    if ((kUSB_DeviceStateAddress != state) && (kUSB_DeviceStateConfigured != state))
    2f5c:	2317      	movs	r3, #23
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	781b      	ldrb	r3, [r3, #0]
    2f62:	2b01      	cmp	r3, #1
    2f64:	d006      	beq.n	2f74 <USB_DeviceCh9SetConfiguration+0x34>
    2f66:	2317      	movs	r3, #23
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d001      	beq.n	2f74 <USB_DeviceCh9SetConfiguration+0x34>
    {
        return kStatus_USB_InvalidRequest;
    2f70:	2305      	movs	r3, #5
    2f72:	e022      	b.n	2fba <USB_DeviceCh9SetConfiguration+0x7a>
    }

    /* The device state is changed to kUSB_DeviceStateConfigured */
    state = kUSB_DeviceStateConfigured;
    2f74:	2317      	movs	r3, #23
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	2200      	movs	r2, #0
    2f7a:	701a      	strb	r2, [r3, #0]
    USB_DeviceSetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2f7c:	2317      	movs	r3, #23
    2f7e:	18fa      	adds	r2, r7, r3
    2f80:	68fb      	ldr	r3, [r7, #12]
    2f82:	2106      	movs	r1, #6
    2f84:	0018      	movs	r0, r3
    2f86:	f7ff fd6f 	bl	2a68 <USB_DeviceSetStatus>
    if (!setup->wValue)
    2f8a:	68bb      	ldr	r3, [r7, #8]
    2f8c:	885b      	ldrh	r3, [r3, #2]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d10a      	bne.n	2fa8 <USB_DeviceCh9SetConfiguration+0x68>
    {
        /* If the new configuration is zero, the device state is changed to kUSB_DeviceStateAddress */
        state = kUSB_DeviceStateAddress;
    2f92:	2317      	movs	r3, #23
    2f94:	18fb      	adds	r3, r7, r3
    2f96:	2201      	movs	r2, #1
    2f98:	701a      	strb	r2, [r3, #0]
        USB_DeviceSetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2f9a:	2317      	movs	r3, #23
    2f9c:	18fa      	adds	r2, r7, r3
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	2106      	movs	r1, #6
    2fa2:	0018      	movs	r0, r3
    2fa4:	f7ff fd60 	bl	2a68 <USB_DeviceSetStatus>
    }

    return USB_DeviceSetConfigure(handle, setup->wValue);
    2fa8:	68bb      	ldr	r3, [r7, #8]
    2faa:	885b      	ldrh	r3, [r3, #2]
    2fac:	b2da      	uxtb	r2, r3
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	0011      	movs	r1, r2
    2fb2:	0018      	movs	r0, r3
    2fb4:	f000 fb2c 	bl	3610 <USB_DeviceSetConfigure>
    2fb8:	0003      	movs	r3, r0
}
    2fba:	0018      	movs	r0, r3
    2fbc:	46bd      	mov	sp, r7
    2fbe:	b006      	add	sp, #24
    2fc0:	bd80      	pop	{r7, pc}
	...

00002fc4 <USB_DeviceCh9GetInterface>:
 */
static usb_status_t USB_DeviceCh9GetInterface(usb_device_handle handle,
                                              usb_setup_struct_t *setup,
                                              uint8_t **buffer,
                                              uint32_t *length)
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	b086      	sub	sp, #24
    2fc8:	af00      	add	r7, sp, #0
    2fca:	60f8      	str	r0, [r7, #12]
    2fcc:	60b9      	str	r1, [r7, #8]
    2fce:	607a      	str	r2, [r7, #4]
    2fd0:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    2fd2:	2317      	movs	r3, #23
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	2205      	movs	r2, #5
    2fd8:	701a      	strb	r2, [r3, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    2fda:	2316      	movs	r3, #22
    2fdc:	18fa      	adds	r2, r7, r3
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	2106      	movs	r1, #6
    2fe2:	0018      	movs	r0, r3
    2fe4:	f7ff fcca 	bl	297c <USB_DeviceGetStatus>

    if (state != kUSB_DeviceStateConfigured)
    2fe8:	2316      	movs	r3, #22
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d003      	beq.n	2ffa <USB_DeviceCh9GetInterface+0x36>
    {
        return error;
    2ff2:	2317      	movs	r3, #23
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	781b      	ldrb	r3, [r3, #0]
    2ff8:	e00e      	b.n	3018 <USB_DeviceCh9GetInterface+0x54>
    }
    *length = USB_INTERFACE_SIZE;
    2ffa:	683b      	ldr	r3, [r7, #0]
    2ffc:	2201      	movs	r2, #1
    2ffe:	601a      	str	r2, [r3, #0]
    *buffer = (uint8_t *)&s_UsbDeviceStandardRx;
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	4a07      	ldr	r2, [pc, #28]	; (3020 <USB_DeviceCh9GetInterface+0x5c>)
    3004:	601a      	str	r2, [r3, #0]

    return USB_DeviceGetInterface(handle, setup->wIndex & 0xFFU, (uint8_t *)&s_UsbDeviceStandardRx);
    3006:	68bb      	ldr	r3, [r7, #8]
    3008:	889b      	ldrh	r3, [r3, #4]
    300a:	b2d9      	uxtb	r1, r3
    300c:	4a04      	ldr	r2, [pc, #16]	; (3020 <USB_DeviceCh9GetInterface+0x5c>)
    300e:	68fb      	ldr	r3, [r7, #12]
    3010:	0018      	movs	r0, r3
    3012:	f000 fb4b 	bl	36ac <USB_DeviceGetInterface>
    3016:	0003      	movs	r3, r0
}
    3018:	0018      	movs	r0, r3
    301a:	46bd      	mov	sp, r7
    301c:	b006      	add	sp, #24
    301e:	bd80      	pop	{r7, pc}
    3020:	1fff8ac8 	.word	0x1fff8ac8

00003024 <USB_DeviceCh9SetInterface>:
 */
static usb_status_t USB_DeviceCh9SetInterface(usb_device_handle handle,
                                              usb_setup_struct_t *setup,
                                              uint8_t **buffer,
                                              uint32_t *length)
{
    3024:	b580      	push	{r7, lr}
    3026:	b086      	sub	sp, #24
    3028:	af00      	add	r7, sp, #0
    302a:	60f8      	str	r0, [r7, #12]
    302c:	60b9      	str	r1, [r7, #8]
    302e:	607a      	str	r2, [r7, #4]
    3030:	603b      	str	r3, [r7, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    3032:	2317      	movs	r3, #23
    3034:	18fa      	adds	r2, r7, r3
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	2106      	movs	r1, #6
    303a:	0018      	movs	r0, r3
    303c:	f7ff fc9e 	bl	297c <USB_DeviceGetStatus>

    if (state != kUSB_DeviceStateConfigured)
    3040:	2317      	movs	r3, #23
    3042:	18fb      	adds	r3, r7, r3
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	2b00      	cmp	r3, #0
    3048:	d001      	beq.n	304e <USB_DeviceCh9SetInterface+0x2a>
    {
        return kStatus_USB_InvalidRequest;
    304a:	2305      	movs	r3, #5
    304c:	e00a      	b.n	3064 <USB_DeviceCh9SetInterface+0x40>
    }

    return USB_DeviceSetInterface(handle, (setup->wIndex & 0xFFU), (setup->wValue & 0xFFU));
    304e:	68bb      	ldr	r3, [r7, #8]
    3050:	889b      	ldrh	r3, [r3, #4]
    3052:	b2d9      	uxtb	r1, r3
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	885b      	ldrh	r3, [r3, #2]
    3058:	b2da      	uxtb	r2, r3
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	0018      	movs	r0, r3
    305e:	f000 fb05 	bl	366c <USB_DeviceSetInterface>
    3062:	0003      	movs	r3, r0
}
    3064:	0018      	movs	r0, r3
    3066:	46bd      	mov	sp, r7
    3068:	b006      	add	sp, #24
    306a:	bd80      	pop	{r7, pc}

0000306c <USB_DeviceCh9SynchFrame>:
 */
static usb_status_t USB_DeviceCh9SynchFrame(usb_device_handle handle,
                                            usb_setup_struct_t *setup,
                                            uint8_t **buffer,
                                            uint32_t *length)
{
    306c:	b590      	push	{r4, r7, lr}
    306e:	b087      	sub	sp, #28
    3070:	af00      	add	r7, sp, #0
    3072:	60f8      	str	r0, [r7, #12]
    3074:	60b9      	str	r1, [r7, #8]
    3076:	607a      	str	r2, [r7, #4]
    3078:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    307a:	2317      	movs	r3, #23
    307c:	18fb      	adds	r3, r7, r3
    307e:	2205      	movs	r2, #5
    3080:	701a      	strb	r2, [r3, #0]
    uint8_t state;

    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    3082:	2316      	movs	r3, #22
    3084:	18fa      	adds	r2, r7, r3
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	2106      	movs	r1, #6
    308a:	0018      	movs	r0, r3
    308c:	f7ff fc76 	bl	297c <USB_DeviceGetStatus>

    if (state != kUSB_DeviceStateConfigured)
    3090:	2316      	movs	r3, #22
    3092:	18fb      	adds	r3, r7, r3
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2b00      	cmp	r3, #0
    3098:	d003      	beq.n	30a2 <USB_DeviceCh9SynchFrame+0x36>
    {
        return error;
    309a:	2317      	movs	r3, #23
    309c:	18fb      	adds	r3, r7, r3
    309e:	781b      	ldrb	r3, [r3, #0]
    30a0:	e016      	b.n	30d0 <USB_DeviceCh9SynchFrame+0x64>
    }

    s_UsbDeviceStandardRx = setup->wIndex;
    30a2:	68bb      	ldr	r3, [r7, #8]
    30a4:	889a      	ldrh	r2, [r3, #4]
    30a6:	4b0c      	ldr	r3, [pc, #48]	; (30d8 <USB_DeviceCh9SynchFrame+0x6c>)
    30a8:	801a      	strh	r2, [r3, #0]
    /* Get the sync frame value */
    error = USB_DeviceGetStatus(handle, kUSB_DeviceStatusSynchFrame, &s_UsbDeviceStandardRx);
    30aa:	2317      	movs	r3, #23
    30ac:	18fc      	adds	r4, r7, r3
    30ae:	4a0a      	ldr	r2, [pc, #40]	; (30d8 <USB_DeviceCh9SynchFrame+0x6c>)
    30b0:	68fb      	ldr	r3, [r7, #12]
    30b2:	2108      	movs	r1, #8
    30b4:	0018      	movs	r0, r3
    30b6:	f7ff fc61 	bl	297c <USB_DeviceGetStatus>
    30ba:	0003      	movs	r3, r0
    30bc:	7023      	strb	r3, [r4, #0]
    *buffer = (uint8_t *)&s_UsbDeviceStandardRx;
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	4a05      	ldr	r2, [pc, #20]	; (30d8 <USB_DeviceCh9SynchFrame+0x6c>)
    30c2:	601a      	str	r2, [r3, #0]
    *length = sizeof(s_UsbDeviceStandardRx);
    30c4:	683b      	ldr	r3, [r7, #0]
    30c6:	2202      	movs	r2, #2
    30c8:	601a      	str	r2, [r3, #0]

    return error;
    30ca:	2317      	movs	r3, #23
    30cc:	18fb      	adds	r3, r7, r3
    30ce:	781b      	ldrb	r3, [r3, #0]
}
    30d0:	0018      	movs	r0, r3
    30d2:	46bd      	mov	sp, r7
    30d4:	b007      	add	sp, #28
    30d6:	bd90      	pop	{r4, r7, pc}
    30d8:	1fff8ac8 	.word	0x1fff8ac8

000030dc <USB_DeviceControlCallbackFeedback>:
                                                      usb_setup_struct_t *setup,
                                                      usb_status_t error,
                                                      usb_device_control_read_write_sequence_t stage,
                                                      uint8_t **buffer,
                                                      uint32_t *length)
{
    30dc:	b590      	push	{r4, r7, lr}
    30de:	b087      	sub	sp, #28
    30e0:	af00      	add	r7, sp, #0
    30e2:	60f8      	str	r0, [r7, #12]
    30e4:	60b9      	str	r1, [r7, #8]
    30e6:	0019      	movs	r1, r3
    30e8:	1dfb      	adds	r3, r7, #7
    30ea:	701a      	strb	r2, [r3, #0]
    30ec:	1dbb      	adds	r3, r7, #6
    30ee:	1c0a      	adds	r2, r1, #0
    30f0:	701a      	strb	r2, [r3, #0]
    usb_status_t errorCode = kStatus_USB_Error;
    30f2:	2317      	movs	r3, #23
    30f4:	18fb      	adds	r3, r7, r3
    30f6:	2201      	movs	r2, #1
    30f8:	701a      	strb	r2, [r3, #0]
    uint8_t direction = USB_IN;
    30fa:	2316      	movs	r3, #22
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	2201      	movs	r2, #1
    3100:	701a      	strb	r2, [r3, #0]

    if (kStatus_USB_InvalidRequest == error)
    3102:	1dfb      	adds	r3, r7, #7
    3104:	781b      	ldrb	r3, [r3, #0]
    3106:	2b05      	cmp	r3, #5
    3108:	d125      	bne.n	3156 <USB_DeviceControlCallbackFeedback+0x7a>
    {
        /* Stall the control pipe when the request is unsupported. */
        if ((!((setup->bmRequestType & USB_REQUEST_TYPE_TYPE_MASK) == USB_REQUEST_TYPE_TYPE_STANDARD)) &&
    310a:	68bb      	ldr	r3, [r7, #8]
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	001a      	movs	r2, r3
    3110:	2360      	movs	r3, #96	; 0x60
    3112:	4013      	ands	r3, r2
    3114:	d010      	beq.n	3138 <USB_DeviceControlCallbackFeedback+0x5c>
            ((setup->bmRequestType & USB_REQUEST_TYPE_DIR_MASK) == USB_REQUEST_TYPE_DIR_OUT) && (setup->wLength) &&
    3116:	68bb      	ldr	r3, [r7, #8]
    3118:	781b      	ldrb	r3, [r3, #0]
    311a:	b25b      	sxtb	r3, r3
        if ((!((setup->bmRequestType & USB_REQUEST_TYPE_TYPE_MASK) == USB_REQUEST_TYPE_TYPE_STANDARD)) &&
    311c:	2b00      	cmp	r3, #0
    311e:	db0b      	blt.n	3138 <USB_DeviceControlCallbackFeedback+0x5c>
            ((setup->bmRequestType & USB_REQUEST_TYPE_DIR_MASK) == USB_REQUEST_TYPE_DIR_OUT) && (setup->wLength) &&
    3120:	68bb      	ldr	r3, [r7, #8]
    3122:	88db      	ldrh	r3, [r3, #6]
    3124:	2b00      	cmp	r3, #0
    3126:	d007      	beq.n	3138 <USB_DeviceControlCallbackFeedback+0x5c>
    3128:	1dbb      	adds	r3, r7, #6
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	2b00      	cmp	r3, #0
    312e:	d103      	bne.n	3138 <USB_DeviceControlCallbackFeedback+0x5c>
            (kUSB_DeviceControlPipeSetupStage == stage))
        {
            direction = USB_OUT;
    3130:	2316      	movs	r3, #22
    3132:	18fb      	adds	r3, r7, r3
    3134:	2200      	movs	r2, #0
    3136:	701a      	strb	r2, [r3, #0]
        }
        errorCode = USB_DeviceStallEndpoint(
    3138:	2316      	movs	r3, #22
    313a:	18fb      	adds	r3, r7, r3
    313c:	781b      	ldrb	r3, [r3, #0]
    313e:	01db      	lsls	r3, r3, #7
    3140:	b2da      	uxtb	r2, r3
    3142:	2317      	movs	r3, #23
    3144:	18fc      	adds	r4, r7, r3
    3146:	68fb      	ldr	r3, [r7, #12]
    3148:	0011      	movs	r1, r2
    314a:	0018      	movs	r0, r3
    314c:	f7ff fbdf 	bl	290e <USB_DeviceStallEndpoint>
    3150:	0003      	movs	r3, r0
    3152:	7023      	strb	r3, [r4, #0]
    3154:	e02a      	b.n	31ac <USB_DeviceControlCallbackFeedback+0xd0>
            handle,
            (USB_CONTROL_ENDPOINT) | (uint8_t)((uint32_t)direction << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT));
    }
    else
    {
        if (*length > setup->wLength)
    3156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3158:	681b      	ldr	r3, [r3, #0]
    315a:	68ba      	ldr	r2, [r7, #8]
    315c:	88d2      	ldrh	r2, [r2, #6]
    315e:	4293      	cmp	r3, r2
    3160:	d904      	bls.n	316c <USB_DeviceControlCallbackFeedback+0x90>
        {
            *length = setup->wLength;
    3162:	68bb      	ldr	r3, [r7, #8]
    3164:	88db      	ldrh	r3, [r3, #6]
    3166:	001a      	movs	r2, r3
    3168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    316a:	601a      	str	r2, [r3, #0]
        }
        errorCode = USB_DeviceSendRequest(handle, (USB_CONTROL_ENDPOINT), *buffer, *length);
    316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    316e:	681a      	ldr	r2, [r3, #0]
    3170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	2117      	movs	r1, #23
    3176:	187c      	adds	r4, r7, r1
    3178:	68f8      	ldr	r0, [r7, #12]
    317a:	2100      	movs	r1, #0
    317c:	f7ff faaa 	bl	26d4 <USB_DeviceSendRequest>
    3180:	0003      	movs	r3, r0
    3182:	7023      	strb	r3, [r4, #0]

        if ((kStatus_USB_Success == errorCode) &&
    3184:	2317      	movs	r3, #23
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2b00      	cmp	r3, #0
    318c:	d10e      	bne.n	31ac <USB_DeviceControlCallbackFeedback+0xd0>
            (USB_REQUEST_TYPE_DIR_IN == (setup->bmRequestType & USB_REQUEST_TYPE_DIR_MASK)))
    318e:	68bb      	ldr	r3, [r7, #8]
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	b25b      	sxtb	r3, r3
        if ((kStatus_USB_Success == errorCode) &&
    3194:	2b00      	cmp	r3, #0
    3196:	da09      	bge.n	31ac <USB_DeviceControlCallbackFeedback+0xd0>
        {
            errorCode = USB_DeviceRecvRequest(handle, (USB_CONTROL_ENDPOINT), (uint8_t *)NULL, 0U);
    3198:	2317      	movs	r3, #23
    319a:	18fc      	adds	r4, r7, r3
    319c:	68f8      	ldr	r0, [r7, #12]
    319e:	2300      	movs	r3, #0
    31a0:	2200      	movs	r2, #0
    31a2:	2100      	movs	r1, #0
    31a4:	f7ff fab4 	bl	2710 <USB_DeviceRecvRequest>
    31a8:	0003      	movs	r3, r0
    31aa:	7023      	strb	r3, [r4, #0]
        }
    }
    return errorCode;
    31ac:	2317      	movs	r3, #23
    31ae:	18fb      	adds	r3, r7, r3
    31b0:	781b      	ldrb	r3, [r3, #0]
}
    31b2:	0018      	movs	r0, r3
    31b4:	46bd      	mov	sp, r7
    31b6:	b007      	add	sp, #28
    31b8:	bd90      	pop	{r4, r7, pc}
	...

000031bc <USB_DeviceControlCallback>:
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceControlCallback(usb_device_handle handle,
                                       usb_device_endpoint_callback_message_struct_t *message,
                                       void *callbackParam)
{
    31bc:	b5b0      	push	{r4, r5, r7, lr}
    31be:	b08e      	sub	sp, #56	; 0x38
    31c0:	af02      	add	r7, sp, #8
    31c2:	60f8      	str	r0, [r7, #12]
    31c4:	60b9      	str	r1, [r7, #8]
    31c6:	607a      	str	r2, [r7, #4]
    usb_setup_struct_t *deviceSetup;
    uint8_t *setupOutBuffer;
    uint8_t *buffer = (uint8_t *)NULL;
    31c8:	2300      	movs	r3, #0
    31ca:	61fb      	str	r3, [r7, #28]
    uint32_t length = 0U;
    31cc:	2300      	movs	r3, #0
    31ce:	61bb      	str	r3, [r7, #24]
    usb_status_t error = kStatus_USB_InvalidRequest;
    31d0:	232f      	movs	r3, #47	; 0x2f
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	2205      	movs	r2, #5
    31d6:	701a      	strb	r2, [r3, #0]
    uint8_t state;

    if (USB_UNINITIALIZED_VAL_32 == message->length)
    31d8:	68bb      	ldr	r3, [r7, #8]
    31da:	685b      	ldr	r3, [r3, #4]
    31dc:	3301      	adds	r3, #1
    31de:	d103      	bne.n	31e8 <USB_DeviceControlCallback+0x2c>
    {
        return error;
    31e0:	232f      	movs	r3, #47	; 0x2f
    31e2:	18fb      	adds	r3, r7, r3
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	e0fc      	b.n	33e2 <USB_DeviceControlCallback+0x226>
    }

    USB_DeviceGetSetupBuffer(handle, &deviceSetup);
    31e8:	2324      	movs	r3, #36	; 0x24
    31ea:	18fa      	adds	r2, r7, r3
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	0011      	movs	r1, r2
    31f0:	0018      	movs	r0, r3
    31f2:	f000 fb89 	bl	3908 <USB_DeviceGetSetupBuffer>
    USB_DeviceGetStatus(handle, kUSB_DeviceStatusDeviceState, &state);
    31f6:	2317      	movs	r3, #23
    31f8:	18fa      	adds	r2, r7, r3
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	2106      	movs	r1, #6
    31fe:	0018      	movs	r0, r3
    3200:	f7ff fbbc 	bl	297c <USB_DeviceGetStatus>

    if (message->isSetup)
    3204:	68bb      	ldr	r3, [r7, #8]
    3206:	7a1b      	ldrb	r3, [r3, #8]
    3208:	2b00      	cmp	r3, #0
    320a:	d100      	bne.n	320e <USB_DeviceControlCallback+0x52>
    320c:	e09f      	b.n	334e <USB_DeviceControlCallback+0x192>
    {
        if ((USB_SETUP_PACKET_SIZE != message->length) || (NULL == message->buffer))
    320e:	68bb      	ldr	r3, [r7, #8]
    3210:	685b      	ldr	r3, [r3, #4]
    3212:	2b08      	cmp	r3, #8
    3214:	d103      	bne.n	321e <USB_DeviceControlCallback+0x62>
    3216:	68bb      	ldr	r3, [r7, #8]
    3218:	681b      	ldr	r3, [r3, #0]
    321a:	2b00      	cmp	r3, #0
    321c:	d103      	bne.n	3226 <USB_DeviceControlCallback+0x6a>
                         USB_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT));
            USB_DeviceDeinitEndpoint(handle,
                         USB_CONTROL_ENDPOINT | (USB_OUT << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT));
            USB_DeviceControlPipeInit(handle);
            */
            return error;
    321e:	232f      	movs	r3, #47	; 0x2f
    3220:	18fb      	adds	r3, r7, r3
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	e0dd      	b.n	33e2 <USB_DeviceControlCallback+0x226>
        }
        /* Receive a setup request */
        usb_setup_struct_t *setup = (usb_setup_struct_t *)(message->buffer);
    3226:	68bb      	ldr	r3, [r7, #8]
    3228:	681b      	ldr	r3, [r3, #0]
    322a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Copy the setup packet to the application buffer */
        deviceSetup->wValue = USB_SHORT_FROM_LITTLE_ENDIAN(setup->wValue);
    322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    322e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3230:	8852      	ldrh	r2, [r2, #2]
    3232:	805a      	strh	r2, [r3, #2]
        deviceSetup->wIndex = USB_SHORT_FROM_LITTLE_ENDIAN(setup->wIndex);
    3234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3236:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3238:	8892      	ldrh	r2, [r2, #4]
    323a:	809a      	strh	r2, [r3, #4]
        deviceSetup->wLength = USB_SHORT_FROM_LITTLE_ENDIAN(setup->wLength);
    323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    323e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3240:	88d2      	ldrh	r2, [r2, #6]
    3242:	80da      	strh	r2, [r3, #6]
        deviceSetup->bRequest = setup->bRequest;
    3244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3246:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3248:	7852      	ldrb	r2, [r2, #1]
    324a:	705a      	strb	r2, [r3, #1]
        deviceSetup->bmRequestType = setup->bmRequestType;
    324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    324e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3250:	7812      	ldrb	r2, [r2, #0]
    3252:	701a      	strb	r2, [r3, #0]

        if ((deviceSetup->bmRequestType & USB_REQUEST_TYPE_TYPE_MASK) == USB_REQUEST_TYPE_TYPE_STANDARD)
    3254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3256:	781b      	ldrb	r3, [r3, #0]
    3258:	001a      	movs	r2, r3
    325a:	2360      	movs	r3, #96	; 0x60
    325c:	4013      	ands	r3, r2
    325e:	d119      	bne.n	3294 <USB_DeviceControlCallback+0xd8>
        {
            /* Handle the standard request */
            if (s_UsbDeviceStandardRequest[deviceSetup->bRequest] != (usb_standard_request_callback_t)NULL)
    3260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3262:	785b      	ldrb	r3, [r3, #1]
    3264:	001a      	movs	r2, r3
    3266:	4b61      	ldr	r3, [pc, #388]	; (33ec <USB_DeviceControlCallback+0x230>)
    3268:	0092      	lsls	r2, r2, #2
    326a:	58d3      	ldr	r3, [r2, r3]
    326c:	2b00      	cmp	r3, #0
    326e:	d05b      	beq.n	3328 <USB_DeviceControlCallback+0x16c>
            {
                error = s_UsbDeviceStandardRequest[deviceSetup->bRequest](handle, deviceSetup, &buffer, &length);
    3270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3272:	785b      	ldrb	r3, [r3, #1]
    3274:	001a      	movs	r2, r3
    3276:	4b5d      	ldr	r3, [pc, #372]	; (33ec <USB_DeviceControlCallback+0x230>)
    3278:	0092      	lsls	r2, r2, #2
    327a:	58d5      	ldr	r5, [r2, r3]
    327c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    327e:	232f      	movs	r3, #47	; 0x2f
    3280:	18fc      	adds	r4, r7, r3
    3282:	2318      	movs	r3, #24
    3284:	18fb      	adds	r3, r7, r3
    3286:	221c      	movs	r2, #28
    3288:	18ba      	adds	r2, r7, r2
    328a:	68f8      	ldr	r0, [r7, #12]
    328c:	47a8      	blx	r5
    328e:	0003      	movs	r3, r0
    3290:	7023      	strb	r3, [r4, #0]
    3292:	e049      	b.n	3328 <USB_DeviceControlCallback+0x16c>
            }
        }
        else
        {
            if ((deviceSetup->wLength) &&
    3294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3296:	88db      	ldrh	r3, [r3, #6]
    3298:	2b00      	cmp	r3, #0
    329a:	d033      	beq.n	3304 <USB_DeviceControlCallback+0x148>
                ((deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_MASK) == USB_REQUEST_TYPE_DIR_OUT))
    329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    329e:	781b      	ldrb	r3, [r3, #0]
    32a0:	b25b      	sxtb	r3, r3
            if ((deviceSetup->wLength) &&
    32a2:	2b00      	cmp	r3, #0
    32a4:	db2e      	blt.n	3304 <USB_DeviceControlCallback+0x148>
            {
                /* Class or vendor request with the OUT data phase. */
                if ((deviceSetup->wLength) &&
    32a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32a8:	88db      	ldrh	r3, [r3, #6]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d016      	beq.n	32dc <USB_DeviceControlCallback+0x120>
                    ((deviceSetup->bmRequestType & USB_REQUEST_TYPE_TYPE_CLASS) == USB_REQUEST_TYPE_TYPE_CLASS))
    32ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	001a      	movs	r2, r3
    32b4:	2320      	movs	r3, #32
    32b6:	4013      	ands	r3, r2
                if ((deviceSetup->wLength) &&
    32b8:	d010      	beq.n	32dc <USB_DeviceControlCallback+0x120>
                {
                    /* Get data buffer to receive the data from the host. */
                    length = deviceSetup->wLength;
    32ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32bc:	88db      	ldrh	r3, [r3, #6]
    32be:	61bb      	str	r3, [r7, #24]
                    error = USB_DeviceGetClassReceiveBuffer(handle, deviceSetup, &length, &setupOutBuffer);
    32c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    32c2:	232f      	movs	r3, #47	; 0x2f
    32c4:	18fc      	adds	r4, r7, r3
    32c6:	2320      	movs	r3, #32
    32c8:	18fb      	adds	r3, r7, r3
    32ca:	2218      	movs	r2, #24
    32cc:	18ba      	adds	r2, r7, r2
    32ce:	68f8      	ldr	r0, [r7, #12]
    32d0:	f000 fb2e 	bl	3930 <USB_DeviceGetClassReceiveBuffer>
    32d4:	0003      	movs	r3, r0
    32d6:	7023      	strb	r3, [r4, #0]
                    length = 0U;
    32d8:	2300      	movs	r3, #0
    32da:	61bb      	str	r3, [r7, #24]
                }
                else
                {
                }
                if (kStatus_USB_Success == error)
    32dc:	232f      	movs	r3, #47	; 0x2f
    32de:	18fb      	adds	r3, r7, r3
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d120      	bne.n	3328 <USB_DeviceControlCallback+0x16c>
                {
                    /* Prime an OUT transfer */
                    error = USB_DeviceRecvRequest(handle, USB_CONTROL_ENDPOINT, setupOutBuffer, deviceSetup->wLength);
    32e6:	6a3a      	ldr	r2, [r7, #32]
    32e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32ea:	88db      	ldrh	r3, [r3, #6]
    32ec:	212f      	movs	r1, #47	; 0x2f
    32ee:	187c      	adds	r4, r7, r1
    32f0:	68f8      	ldr	r0, [r7, #12]
    32f2:	2100      	movs	r1, #0
    32f4:	f7ff fa0c 	bl	2710 <USB_DeviceRecvRequest>
    32f8:	0003      	movs	r3, r0
    32fa:	7023      	strb	r3, [r4, #0]
                    return error;
    32fc:	232f      	movs	r3, #47	; 0x2f
    32fe:	18fb      	adds	r3, r7, r3
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	e06e      	b.n	33e2 <USB_DeviceControlCallback+0x226>
                }
            }
            else
            {
                /* Class or vendor request with the IN data phase. */
                if (((deviceSetup->bmRequestType & USB_REQUEST_TYPE_TYPE_CLASS) == USB_REQUEST_TYPE_TYPE_CLASS))
    3304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3306:	781b      	ldrb	r3, [r3, #0]
    3308:	001a      	movs	r2, r3
    330a:	2320      	movs	r3, #32
    330c:	4013      	ands	r3, r2
    330e:	d00b      	beq.n	3328 <USB_DeviceControlCallback+0x16c>
                {
                    /* Get data buffer to response the host. */
                    error = USB_DeviceProcessClassRequest(handle, deviceSetup, &length, &buffer);
    3310:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3312:	232f      	movs	r3, #47	; 0x2f
    3314:	18fc      	adds	r4, r7, r3
    3316:	231c      	movs	r3, #28
    3318:	18fb      	adds	r3, r7, r3
    331a:	2218      	movs	r2, #24
    331c:	18ba      	adds	r2, r7, r2
    331e:	68f8      	ldr	r0, [r7, #12]
    3320:	f000 fb2c 	bl	397c <USB_DeviceProcessClassRequest>
    3324:	0003      	movs	r3, r0
    3326:	7023      	strb	r3, [r4, #0]
                {
                }
            }
        }
        /* Send the reponse to the host. */
        error = USB_DeviceControlCallbackFeedback(handle, deviceSetup, error, kUSB_DeviceControlPipeSetupStage, &buffer,
    3328:	6a79      	ldr	r1, [r7, #36]	; 0x24
    332a:	232f      	movs	r3, #47	; 0x2f
    332c:	18fc      	adds	r4, r7, r3
    332e:	232f      	movs	r3, #47	; 0x2f
    3330:	18fb      	adds	r3, r7, r3
    3332:	781a      	ldrb	r2, [r3, #0]
    3334:	68f8      	ldr	r0, [r7, #12]
    3336:	2318      	movs	r3, #24
    3338:	18fb      	adds	r3, r7, r3
    333a:	9301      	str	r3, [sp, #4]
    333c:	231c      	movs	r3, #28
    333e:	18fb      	adds	r3, r7, r3
    3340:	9300      	str	r3, [sp, #0]
    3342:	2300      	movs	r3, #0
    3344:	f7ff feca 	bl	30dc <USB_DeviceControlCallbackFeedback>
    3348:	0003      	movs	r3, r0
    334a:	7023      	strb	r3, [r4, #0]
    334c:	e046      	b.n	33dc <USB_DeviceControlCallback+0x220>
                                                  &length);
    }
    else if (kUSB_DeviceStateAddressing == state)
    334e:	2317      	movs	r3, #23
    3350:	18fb      	adds	r3, r7, r3
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	2b03      	cmp	r3, #3
    3356:	d111      	bne.n	337c <USB_DeviceControlCallback+0x1c0>
    {
        /* Set the device address to controller. */
        error = s_UsbDeviceStandardRequest[deviceSetup->bRequest](handle, deviceSetup, &buffer, &length);
    3358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    335a:	785b      	ldrb	r3, [r3, #1]
    335c:	001a      	movs	r2, r3
    335e:	4b23      	ldr	r3, [pc, #140]	; (33ec <USB_DeviceControlCallback+0x230>)
    3360:	0092      	lsls	r2, r2, #2
    3362:	58d5      	ldr	r5, [r2, r3]
    3364:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3366:	232f      	movs	r3, #47	; 0x2f
    3368:	18fc      	adds	r4, r7, r3
    336a:	2318      	movs	r3, #24
    336c:	18fb      	adds	r3, r7, r3
    336e:	221c      	movs	r2, #28
    3370:	18ba      	adds	r2, r7, r2
    3372:	68f8      	ldr	r0, [r7, #12]
    3374:	47a8      	blx	r5
    3376:	0003      	movs	r3, r0
    3378:	7023      	strb	r3, [r4, #0]
    337a:	e02f      	b.n	33dc <USB_DeviceControlCallback+0x220>
    }
    else if ((message->length) && (deviceSetup->wLength) &&
    337c:	68bb      	ldr	r3, [r7, #8]
    337e:	685b      	ldr	r3, [r3, #4]
    3380:	2b00      	cmp	r3, #0
    3382:	d02b      	beq.n	33dc <USB_DeviceControlCallback+0x220>
    3384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3386:	88db      	ldrh	r3, [r3, #6]
    3388:	2b00      	cmp	r3, #0
    338a:	d027      	beq.n	33dc <USB_DeviceControlCallback+0x220>
             ((deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_MASK) == USB_REQUEST_TYPE_DIR_OUT))
    338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    338e:	781b      	ldrb	r3, [r3, #0]
    3390:	b25b      	sxtb	r3, r3
    else if ((message->length) && (deviceSetup->wLength) &&
    3392:	2b00      	cmp	r3, #0
    3394:	db22      	blt.n	33dc <USB_DeviceControlCallback+0x220>
    {
        if (((deviceSetup->bmRequestType & USB_REQUEST_TYPE_TYPE_CLASS) == USB_REQUEST_TYPE_TYPE_CLASS))
    3396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3398:	781b      	ldrb	r3, [r3, #0]
    339a:	001a      	movs	r2, r3
    339c:	2320      	movs	r3, #32
    339e:	4013      	ands	r3, r2
    33a0:	d00a      	beq.n	33b8 <USB_DeviceControlCallback+0x1fc>
        {
            /* Data received in OUT phase, and notify the class driver. */
            error = USB_DeviceProcessClassRequest(handle, deviceSetup, &message->length, &message->buffer);
    33a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    33a4:	68bb      	ldr	r3, [r7, #8]
    33a6:	1d1a      	adds	r2, r3, #4
    33a8:	68bb      	ldr	r3, [r7, #8]
    33aa:	202f      	movs	r0, #47	; 0x2f
    33ac:	183c      	adds	r4, r7, r0
    33ae:	68f8      	ldr	r0, [r7, #12]
    33b0:	f000 fae4 	bl	397c <USB_DeviceProcessClassRequest>
    33b4:	0003      	movs	r3, r0
    33b6:	7023      	strb	r3, [r4, #0]
        }
        else
        {
        }
        /* Send the reponse to the host. */
        error = USB_DeviceControlCallbackFeedback(handle, deviceSetup, error, kUSB_DeviceControlPipeDataStage, &buffer,
    33b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    33ba:	232f      	movs	r3, #47	; 0x2f
    33bc:	18fc      	adds	r4, r7, r3
    33be:	232f      	movs	r3, #47	; 0x2f
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	781a      	ldrb	r2, [r3, #0]
    33c4:	68f8      	ldr	r0, [r7, #12]
    33c6:	2318      	movs	r3, #24
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	9301      	str	r3, [sp, #4]
    33cc:	231c      	movs	r3, #28
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	9300      	str	r3, [sp, #0]
    33d2:	2301      	movs	r3, #1
    33d4:	f7ff fe82 	bl	30dc <USB_DeviceControlCallbackFeedback>
    33d8:	0003      	movs	r3, r0
    33da:	7023      	strb	r3, [r4, #0]
                                                  &length);
    }
    else
    {
    }
    return error;
    33dc:	232f      	movs	r3, #47	; 0x2f
    33de:	18fb      	adds	r3, r7, r3
    33e0:	781b      	ldrb	r3, [r3, #0]
}
    33e2:	0018      	movs	r0, r3
    33e4:	46bd      	mov	sp, r7
    33e6:	b00c      	add	sp, #48	; 0x30
    33e8:	bdb0      	pop	{r4, r5, r7, pc}
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00004f68 	.word	0x00004f68

000033f0 <USB_DeviceControlPipeInit>:
 * @param param           The up layer handle.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceControlPipeInit(usb_device_handle handle)
{
    33f0:	b590      	push	{r4, r7, lr}
    33f2:	b089      	sub	sp, #36	; 0x24
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    usb_device_endpoint_init_struct_t epInitStruct;
    usb_device_endpoint_callback_struct_t endpointCallback;
    usb_status_t error;

    endpointCallback.callbackFn = USB_DeviceControlCallback;
    33f8:	230c      	movs	r3, #12
    33fa:	18fb      	adds	r3, r7, r3
    33fc:	4a26      	ldr	r2, [pc, #152]	; (3498 <USB_DeviceControlPipeInit+0xa8>)
    33fe:	601a      	str	r2, [r3, #0]
    endpointCallback.callbackParam = handle;
    3400:	230c      	movs	r3, #12
    3402:	18fb      	adds	r3, r7, r3
    3404:	687a      	ldr	r2, [r7, #4]
    3406:	605a      	str	r2, [r3, #4]

    epInitStruct.zlt = 1U;
    3408:	2318      	movs	r3, #24
    340a:	18fb      	adds	r3, r7, r3
    340c:	2201      	movs	r2, #1
    340e:	711a      	strb	r2, [r3, #4]
    epInitStruct.transferType = USB_ENDPOINT_CONTROL;
    3410:	2318      	movs	r3, #24
    3412:	18fb      	adds	r3, r7, r3
    3414:	2200      	movs	r2, #0
    3416:	70da      	strb	r2, [r3, #3]
    epInitStruct.endpointAddress = USB_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT);
    3418:	2318      	movs	r3, #24
    341a:	18fb      	adds	r3, r7, r3
    341c:	2280      	movs	r2, #128	; 0x80
    341e:	709a      	strb	r2, [r3, #2]
    epInitStruct.maxPacketSize = USB_CONTROL_MAX_PACKET_SIZE;
    3420:	2318      	movs	r3, #24
    3422:	18fb      	adds	r3, r7, r3
    3424:	2240      	movs	r2, #64	; 0x40
    3426:	801a      	strh	r2, [r3, #0]
    /* Initialize the control IN pipe */
    error = USB_DeviceInitEndpoint(handle, &epInitStruct, &endpointCallback);
    3428:	231f      	movs	r3, #31
    342a:	18fc      	adds	r4, r7, r3
    342c:	230c      	movs	r3, #12
    342e:	18fa      	adds	r2, r7, r3
    3430:	2318      	movs	r3, #24
    3432:	18f9      	adds	r1, r7, r3
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	0018      	movs	r0, r3
    3438:	f7ff f984 	bl	2744 <USB_DeviceInitEndpoint>
    343c:	0003      	movs	r3, r0
    343e:	7023      	strb	r3, [r4, #0]

    if (kStatus_USB_Success != error)
    3440:	231f      	movs	r3, #31
    3442:	18fb      	adds	r3, r7, r3
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	2b00      	cmp	r3, #0
    3448:	d003      	beq.n	3452 <USB_DeviceControlPipeInit+0x62>
    {
        return error;
    344a:	231f      	movs	r3, #31
    344c:	18fb      	adds	r3, r7, r3
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	e01e      	b.n	3490 <USB_DeviceControlPipeInit+0xa0>
    }
    epInitStruct.endpointAddress = USB_CONTROL_ENDPOINT | (USB_OUT << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT);
    3452:	2318      	movs	r3, #24
    3454:	18fb      	adds	r3, r7, r3
    3456:	2200      	movs	r2, #0
    3458:	709a      	strb	r2, [r3, #2]
    /* Initialize the control OUT pipe */
    error = USB_DeviceInitEndpoint(handle, &epInitStruct, &endpointCallback);
    345a:	231f      	movs	r3, #31
    345c:	18fc      	adds	r4, r7, r3
    345e:	230c      	movs	r3, #12
    3460:	18fa      	adds	r2, r7, r3
    3462:	2318      	movs	r3, #24
    3464:	18f9      	adds	r1, r7, r3
    3466:	687b      	ldr	r3, [r7, #4]
    3468:	0018      	movs	r0, r3
    346a:	f7ff f96b 	bl	2744 <USB_DeviceInitEndpoint>
    346e:	0003      	movs	r3, r0
    3470:	7023      	strb	r3, [r4, #0]

    if (kStatus_USB_Success != error)
    3472:	231f      	movs	r3, #31
    3474:	18fb      	adds	r3, r7, r3
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	2b00      	cmp	r3, #0
    347a:	d008      	beq.n	348e <USB_DeviceControlPipeInit+0x9e>
    {
        USB_DeviceDeinitEndpoint(handle,
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	2180      	movs	r1, #128	; 0x80
    3480:	0018      	movs	r0, r3
    3482:	f7ff f9d1 	bl	2828 <USB_DeviceDeinitEndpoint>
                                 USB_CONTROL_ENDPOINT | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT));
        return error;
    3486:	231f      	movs	r3, #31
    3488:	18fb      	adds	r3, r7, r3
    348a:	781b      	ldrb	r3, [r3, #0]
    348c:	e000      	b.n	3490 <USB_DeviceControlPipeInit+0xa0>
    }

    return kStatus_USB_Success;
    348e:	2300      	movs	r3, #0
}
    3490:	0018      	movs	r0, r3
    3492:	46bd      	mov	sp, r7
    3494:	b009      	add	sp, #36	; 0x24
    3496:	bd90      	pop	{r4, r7, pc}
    3498:	000031bd 	.word	0x000031bd

0000349c <USB_DeviceGetDescriptor>:
 */
usb_status_t USB_DeviceGetDescriptor(usb_device_handle handle,
                                     usb_setup_struct_t *setup,
                                     uint32_t *length,
                                     uint8_t **buffer)
{
    349c:	b580      	push	{r7, lr}
    349e:	b086      	sub	sp, #24
    34a0:	af00      	add	r7, sp, #0
    34a2:	60f8      	str	r0, [r7, #12]
    34a4:	60b9      	str	r1, [r7, #8]
    34a6:	607a      	str	r2, [r7, #4]
    34a8:	603b      	str	r3, [r7, #0]
    uint8_t descriptorType = (uint8_t)((setup->wValue & 0xFF00U) >> 8U);
    34aa:	68bb      	ldr	r3, [r7, #8]
    34ac:	885b      	ldrh	r3, [r3, #2]
    34ae:	0a1b      	lsrs	r3, r3, #8
    34b0:	b29a      	uxth	r2, r3
    34b2:	2314      	movs	r3, #20
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	701a      	strb	r2, [r3, #0]
    uint8_t descriptorIndex = (uint8_t)((setup->wValue & 0x00FFU));
    34b8:	68bb      	ldr	r3, [r7, #8]
    34ba:	885a      	ldrh	r2, [r3, #2]
    34bc:	2313      	movs	r3, #19
    34be:	18fb      	adds	r3, r7, r3
    34c0:	701a      	strb	r2, [r3, #0]
    usb_status_t ret = kStatus_USB_Success;
    34c2:	2317      	movs	r3, #23
    34c4:	18fb      	adds	r3, r7, r3
    34c6:	2200      	movs	r2, #0
    34c8:	701a      	strb	r2, [r3, #0]
    if (USB_REQUEST_STANDARD_GET_DESCRIPTOR != setup->bRequest)
    34ca:	68bb      	ldr	r3, [r7, #8]
    34cc:	785b      	ldrb	r3, [r3, #1]
    34ce:	2b06      	cmp	r3, #6
    34d0:	d001      	beq.n	34d6 <USB_DeviceGetDescriptor+0x3a>
    {
        return kStatus_USB_InvalidRequest;
    34d2:	2305      	movs	r3, #5
    34d4:	e091      	b.n	35fa <USB_DeviceGetDescriptor+0x15e>
    }
    switch (descriptorType)
    34d6:	2314      	movs	r3, #20
    34d8:	18fb      	adds	r3, r7, r3
    34da:	781b      	ldrb	r3, [r3, #0]
    34dc:	2b02      	cmp	r3, #2
    34de:	d100      	bne.n	34e2 <USB_DeviceGetDescriptor+0x46>
    34e0:	e07c      	b.n	35dc <USB_DeviceGetDescriptor+0x140>
    34e2:	2b03      	cmp	r3, #3
    34e4:	d003      	beq.n	34ee <USB_DeviceGetDescriptor+0x52>
    34e6:	2b01      	cmp	r3, #1
    34e8:	d100      	bne.n	34ec <USB_DeviceGetDescriptor+0x50>
    34ea:	e070      	b.n	35ce <USB_DeviceGetDescriptor+0x132>
    34ec:	e07d      	b.n	35ea <USB_DeviceGetDescriptor+0x14e>
    {
        case USB_DESCRIPTOR_TYPE_STRING:
        {
            if (descriptorIndex == 0)
    34ee:	2313      	movs	r3, #19
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	2b00      	cmp	r3, #0
    34f6:	d108      	bne.n	350a <USB_DeviceGetDescriptor+0x6e>
            {
                *buffer = (uint8_t *)g_UsbDeviceLanguageList.languageString;
    34f8:	4b42      	ldr	r3, [pc, #264]	; (3604 <USB_DeviceGetDescriptor+0x168>)
    34fa:	681a      	ldr	r2, [r3, #0]
    34fc:	683b      	ldr	r3, [r7, #0]
    34fe:	601a      	str	r2, [r3, #0]
                *length = g_UsbDeviceLanguageList.stringLength;
    3500:	4b40      	ldr	r3, [pc, #256]	; (3604 <USB_DeviceGetDescriptor+0x168>)
    3502:	685a      	ldr	r2, [r3, #4]
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	601a      	str	r2, [r3, #0]
                }
                *buffer = (uint8_t *)g_UsbDeviceLanguageList.languageList[langId].string[langIndex];
                *length = g_UsbDeviceLanguageList.languageList[langId].length[langIndex];
            }
        }
        break;
    3508:	e074      	b.n	35f4 <USB_DeviceGetDescriptor+0x158>
                uint8_t langId = 0;
    350a:	2316      	movs	r3, #22
    350c:	18fb      	adds	r3, r7, r3
    350e:	2200      	movs	r2, #0
    3510:	701a      	strb	r2, [r3, #0]
                uint8_t langIndex = USB_DEVICE_STRING_COUNT;
    3512:	2315      	movs	r3, #21
    3514:	18fb      	adds	r3, r7, r3
    3516:	2203      	movs	r2, #3
    3518:	701a      	strb	r2, [r3, #0]
                for (; langId < USB_DEVICE_LANGUAGE_COUNT; langId++)
    351a:	e021      	b.n	3560 <USB_DeviceGetDescriptor+0xc4>
                    if (setup->wIndex == g_UsbDeviceLanguageList.languageList[langId].languageId)
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	8899      	ldrh	r1, [r3, #4]
    3520:	4b38      	ldr	r3, [pc, #224]	; (3604 <USB_DeviceGetDescriptor+0x168>)
    3522:	6898      	ldr	r0, [r3, #8]
    3524:	2316      	movs	r3, #22
    3526:	18fb      	adds	r3, r7, r3
    3528:	781a      	ldrb	r2, [r3, #0]
    352a:	0013      	movs	r3, r2
    352c:	005b      	lsls	r3, r3, #1
    352e:	189b      	adds	r3, r3, r2
    3530:	009b      	lsls	r3, r3, #2
    3532:	18c3      	adds	r3, r0, r3
    3534:	891b      	ldrh	r3, [r3, #8]
    3536:	4299      	cmp	r1, r3
    3538:	d10b      	bne.n	3552 <USB_DeviceGetDescriptor+0xb6>
                        if (descriptorIndex < USB_DEVICE_STRING_COUNT)
    353a:	2313      	movs	r3, #19
    353c:	18fb      	adds	r3, r7, r3
    353e:	781b      	ldrb	r3, [r3, #0]
    3540:	2b02      	cmp	r3, #2
    3542:	d813      	bhi.n	356c <USB_DeviceGetDescriptor+0xd0>
                            langIndex = descriptorIndex;
    3544:	2315      	movs	r3, #21
    3546:	18fb      	adds	r3, r7, r3
    3548:	2213      	movs	r2, #19
    354a:	18ba      	adds	r2, r7, r2
    354c:	7812      	ldrb	r2, [r2, #0]
    354e:	701a      	strb	r2, [r3, #0]
                        break;
    3550:	e00c      	b.n	356c <USB_DeviceGetDescriptor+0xd0>
                for (; langId < USB_DEVICE_LANGUAGE_COUNT; langId++)
    3552:	2316      	movs	r3, #22
    3554:	18fb      	adds	r3, r7, r3
    3556:	781a      	ldrb	r2, [r3, #0]
    3558:	2316      	movs	r3, #22
    355a:	18fb      	adds	r3, r7, r3
    355c:	3201      	adds	r2, #1
    355e:	701a      	strb	r2, [r3, #0]
    3560:	2316      	movs	r3, #22
    3562:	18fb      	adds	r3, r7, r3
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	d0d8      	beq.n	351c <USB_DeviceGetDescriptor+0x80>
    356a:	e000      	b.n	356e <USB_DeviceGetDescriptor+0xd2>
                        break;
    356c:	46c0      	nop			; (mov r8, r8)
                if (USB_DEVICE_STRING_COUNT == langIndex)
    356e:	2315      	movs	r3, #21
    3570:	18fb      	adds	r3, r7, r3
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	2b03      	cmp	r3, #3
    3576:	d103      	bne.n	3580 <USB_DeviceGetDescriptor+0xe4>
                    langId = 0;
    3578:	2316      	movs	r3, #22
    357a:	18fb      	adds	r3, r7, r3
    357c:	2200      	movs	r2, #0
    357e:	701a      	strb	r2, [r3, #0]
                *buffer = (uint8_t *)g_UsbDeviceLanguageList.languageList[langId].string[langIndex];
    3580:	4b20      	ldr	r3, [pc, #128]	; (3604 <USB_DeviceGetDescriptor+0x168>)
    3582:	6899      	ldr	r1, [r3, #8]
    3584:	2316      	movs	r3, #22
    3586:	18fb      	adds	r3, r7, r3
    3588:	781a      	ldrb	r2, [r3, #0]
    358a:	0013      	movs	r3, r2
    358c:	005b      	lsls	r3, r3, #1
    358e:	189b      	adds	r3, r3, r2
    3590:	009b      	lsls	r3, r3, #2
    3592:	18cb      	adds	r3, r1, r3
    3594:	681a      	ldr	r2, [r3, #0]
    3596:	2315      	movs	r3, #21
    3598:	18fb      	adds	r3, r7, r3
    359a:	781b      	ldrb	r3, [r3, #0]
    359c:	009b      	lsls	r3, r3, #2
    359e:	18d3      	adds	r3, r2, r3
    35a0:	681a      	ldr	r2, [r3, #0]
    35a2:	683b      	ldr	r3, [r7, #0]
    35a4:	601a      	str	r2, [r3, #0]
                *length = g_UsbDeviceLanguageList.languageList[langId].length[langIndex];
    35a6:	4b17      	ldr	r3, [pc, #92]	; (3604 <USB_DeviceGetDescriptor+0x168>)
    35a8:	6899      	ldr	r1, [r3, #8]
    35aa:	2316      	movs	r3, #22
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	781a      	ldrb	r2, [r3, #0]
    35b0:	0013      	movs	r3, r2
    35b2:	005b      	lsls	r3, r3, #1
    35b4:	189b      	adds	r3, r3, r2
    35b6:	009b      	lsls	r3, r3, #2
    35b8:	18cb      	adds	r3, r1, r3
    35ba:	685a      	ldr	r2, [r3, #4]
    35bc:	2315      	movs	r3, #21
    35be:	18fb      	adds	r3, r7, r3
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	009b      	lsls	r3, r3, #2
    35c4:	18d3      	adds	r3, r2, r3
    35c6:	681a      	ldr	r2, [r3, #0]
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	601a      	str	r2, [r3, #0]
        break;
    35cc:	e012      	b.n	35f4 <USB_DeviceGetDescriptor+0x158>
        case USB_DESCRIPTOR_TYPE_DEVICE:
        {
            *buffer = g_UsbDeviceDescriptor;
    35ce:	683b      	ldr	r3, [r7, #0]
    35d0:	4a0d      	ldr	r2, [pc, #52]	; (3608 <USB_DeviceGetDescriptor+0x16c>)
    35d2:	601a      	str	r2, [r3, #0]
            *length = USB_DESCRIPTOR_LENGTH_DEVICE;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	2212      	movs	r2, #18
    35d8:	601a      	str	r2, [r3, #0]
        }
        break;
    35da:	e00b      	b.n	35f4 <USB_DeviceGetDescriptor+0x158>
        case USB_DESCRIPTOR_TYPE_CONFIGURE:
        {
            *buffer = g_UsbDeviceConfigurationDescriptor;
    35dc:	683b      	ldr	r3, [r7, #0]
    35de:	4a0b      	ldr	r2, [pc, #44]	; (360c <USB_DeviceGetDescriptor+0x170>)
    35e0:	601a      	str	r2, [r3, #0]
            *length = USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	2243      	movs	r2, #67	; 0x43
    35e6:	601a      	str	r2, [r3, #0]
        }
        break;
    35e8:	e004      	b.n	35f4 <USB_DeviceGetDescriptor+0x158>
        default:
            ret = kStatus_USB_InvalidRequest;
    35ea:	2317      	movs	r3, #23
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	2205      	movs	r2, #5
    35f0:	701a      	strb	r2, [r3, #0]
            break;
    35f2:	46c0      	nop			; (mov r8, r8)
    } /* End Switch */
    return ret;
    35f4:	2317      	movs	r3, #23
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	781b      	ldrb	r3, [r3, #0]
}
    35fa:	0018      	movs	r0, r3
    35fc:	46bd      	mov	sp, r7
    35fe:	b006      	add	sp, #24
    3600:	bd80      	pop	{r7, pc}
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	1fff88d8 	.word	0x1fff88d8
    3608:	1fff8804 	.word	0x1fff8804
    360c:	1fff8818 	.word	0x1fff8818

00003610 <USB_DeviceSetConfigure>:
 * @param configure           The configuration value.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceSetConfigure(usb_device_handle handle, uint8_t configure)
{
    3610:	b580      	push	{r7, lr}
    3612:	b082      	sub	sp, #8
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
    3618:	000a      	movs	r2, r1
    361a:	1cfb      	adds	r3, r7, #3
    361c:	701a      	strb	r2, [r3, #0]
    if (!configure)
    361e:	1cfb      	adds	r3, r7, #3
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	2b00      	cmp	r3, #0
    3624:	d101      	bne.n	362a <USB_DeviceSetConfigure+0x1a>
    {
        return kStatus_USB_Error;
    3626:	2301      	movs	r3, #1
    3628:	e00a      	b.n	3640 <USB_DeviceSetConfigure+0x30>
    }
    g_currentConfigure = configure;
    362a:	1cfb      	adds	r3, r7, #3
    362c:	781a      	ldrb	r2, [r3, #0]
    362e:	4b06      	ldr	r3, [pc, #24]	; (3648 <USB_DeviceSetConfigure+0x38>)
    3630:	701a      	strb	r2, [r3, #0]
    return USB_DeviceCallback(handle, kUSB_DeviceEventSetConfiguration, &configure);
    3632:	1cfa      	adds	r2, r7, #3
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	2109      	movs	r1, #9
    3638:	0018      	movs	r0, r3
    363a:	f000 faa1 	bl	3b80 <USB_DeviceCallback>
    363e:	0003      	movs	r3, r0
}
    3640:	0018      	movs	r0, r3
    3642:	46bd      	mov	sp, r7
    3644:	b002      	add	sp, #8
    3646:	bd80      	pop	{r7, pc}
    3648:	1fff8aca 	.word	0x1fff8aca

0000364c <USB_DeviceGetConfigure>:
 * @param configure It is an OUT parameter, save the current configuration value.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceGetConfigure(usb_device_handle handle, uint8_t *configure)
{
    364c:	b580      	push	{r7, lr}
    364e:	b082      	sub	sp, #8
    3650:	af00      	add	r7, sp, #0
    3652:	6078      	str	r0, [r7, #4]
    3654:	6039      	str	r1, [r7, #0]
    *configure = g_currentConfigure;
    3656:	4b04      	ldr	r3, [pc, #16]	; (3668 <USB_DeviceGetConfigure+0x1c>)
    3658:	781a      	ldrb	r2, [r3, #0]
    365a:	683b      	ldr	r3, [r7, #0]
    365c:	701a      	strb	r2, [r3, #0]
    return kStatus_USB_Success;
    365e:	2300      	movs	r3, #0
}
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b002      	add	sp, #8
    3666:	bd80      	pop	{r7, pc}
    3668:	1fff8aca 	.word	0x1fff8aca

0000366c <USB_DeviceSetInterface>:
 * @param alternateSetting The new alternate setting value.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceSetInterface(usb_device_handle handle, uint8_t interface, uint8_t alternateSetting)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
    3674:	0008      	movs	r0, r1
    3676:	0011      	movs	r1, r2
    3678:	1cfb      	adds	r3, r7, #3
    367a:	1c02      	adds	r2, r0, #0
    367c:	701a      	strb	r2, [r3, #0]
    367e:	1cbb      	adds	r3, r7, #2
    3680:	1c0a      	adds	r2, r1, #0
    3682:	701a      	strb	r2, [r3, #0]
    g_interface[interface] = alternateSetting;
    3684:	1cfb      	adds	r3, r7, #3
    3686:	781b      	ldrb	r3, [r3, #0]
    3688:	0019      	movs	r1, r3
    368a:	4b07      	ldr	r3, [pc, #28]	; (36a8 <USB_DeviceSetInterface+0x3c>)
    368c:	1cba      	adds	r2, r7, #2
    368e:	7812      	ldrb	r2, [r2, #0]
    3690:	545a      	strb	r2, [r3, r1]
    return USB_DeviceCallback(handle, kUSB_DeviceEventSetInterface, &interface);
    3692:	1cfa      	adds	r2, r7, #3
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	210a      	movs	r1, #10
    3698:	0018      	movs	r0, r3
    369a:	f000 fa71 	bl	3b80 <USB_DeviceCallback>
    369e:	0003      	movs	r3, r0
}
    36a0:	0018      	movs	r0, r3
    36a2:	46bd      	mov	sp, r7
    36a4:	b002      	add	sp, #8
    36a6:	bd80      	pop	{r7, pc}
    36a8:	1fff8ce4 	.word	0x1fff8ce4

000036ac <USB_DeviceGetInterface>:
 * @param alternateSetting It is an OUT parameter, save the new alternate setting value of the interface.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceGetInterface(usb_device_handle handle, uint8_t interface, uint8_t *alternateSetting)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b084      	sub	sp, #16
    36b0:	af00      	add	r7, sp, #0
    36b2:	60f8      	str	r0, [r7, #12]
    36b4:	607a      	str	r2, [r7, #4]
    36b6:	230b      	movs	r3, #11
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	1c0a      	adds	r2, r1, #0
    36bc:	701a      	strb	r2, [r3, #0]
    *alternateSetting = g_interface[interface];
    36be:	230b      	movs	r3, #11
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	4a04      	ldr	r2, [pc, #16]	; (36d8 <USB_DeviceGetInterface+0x2c>)
    36c6:	5cd2      	ldrb	r2, [r2, r3]
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	701a      	strb	r2, [r3, #0]
    return kStatus_USB_Success;
    36cc:	2300      	movs	r3, #0
}
    36ce:	0018      	movs	r0, r3
    36d0:	46bd      	mov	sp, r7
    36d2:	b004      	add	sp, #16
    36d4:	bd80      	pop	{r7, pc}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	1fff8ce4 	.word	0x1fff8ce4

000036dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    36dc:	b580      	push	{r7, lr}
    36de:	b082      	sub	sp, #8
    36e0:	af00      	add	r7, sp, #0
    36e2:	0002      	movs	r2, r0
    36e4:	1dfb      	adds	r3, r7, #7
    36e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    36e8:	4b06      	ldr	r3, [pc, #24]	; (3704 <NVIC_EnableIRQ+0x28>)
    36ea:	1dfa      	adds	r2, r7, #7
    36ec:	7812      	ldrb	r2, [r2, #0]
    36ee:	0011      	movs	r1, r2
    36f0:	221f      	movs	r2, #31
    36f2:	400a      	ands	r2, r1
    36f4:	2101      	movs	r1, #1
    36f6:	4091      	lsls	r1, r2
    36f8:	000a      	movs	r2, r1
    36fa:	601a      	str	r2, [r3, #0]
}
    36fc:	46c0      	nop			; (mov r8, r8)
    36fe:	46bd      	mov	sp, r7
    3700:	b002      	add	sp, #8
    3702:	bd80      	pop	{r7, pc}
    3704:	e000e100 	.word	0xe000e100

00003708 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3708:	b5b0      	push	{r4, r5, r7, lr}
    370a:	b082      	sub	sp, #8
    370c:	af00      	add	r7, sp, #0
    370e:	0002      	movs	r2, r0
    3710:	6039      	str	r1, [r7, #0]
    3712:	1dfb      	adds	r3, r7, #7
    3714:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    3716:	1dfb      	adds	r3, r7, #7
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	2b7f      	cmp	r3, #127	; 0x7f
    371c:	d932      	bls.n	3784 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    371e:	4c2f      	ldr	r4, [pc, #188]	; (37dc <NVIC_SetPriority+0xd4>)
    3720:	1dfb      	adds	r3, r7, #7
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	001a      	movs	r2, r3
    3726:	230f      	movs	r3, #15
    3728:	4013      	ands	r3, r2
    372a:	3b08      	subs	r3, #8
    372c:	0899      	lsrs	r1, r3, #2
    372e:	4a2b      	ldr	r2, [pc, #172]	; (37dc <NVIC_SetPriority+0xd4>)
    3730:	1dfb      	adds	r3, r7, #7
    3732:	781b      	ldrb	r3, [r3, #0]
    3734:	0018      	movs	r0, r3
    3736:	230f      	movs	r3, #15
    3738:	4003      	ands	r3, r0
    373a:	3b08      	subs	r3, #8
    373c:	089b      	lsrs	r3, r3, #2
    373e:	3306      	adds	r3, #6
    3740:	009b      	lsls	r3, r3, #2
    3742:	18d3      	adds	r3, r2, r3
    3744:	3304      	adds	r3, #4
    3746:	681b      	ldr	r3, [r3, #0]
    3748:	1dfa      	adds	r2, r7, #7
    374a:	7812      	ldrb	r2, [r2, #0]
    374c:	0010      	movs	r0, r2
    374e:	2203      	movs	r2, #3
    3750:	4002      	ands	r2, r0
    3752:	00d2      	lsls	r2, r2, #3
    3754:	20ff      	movs	r0, #255	; 0xff
    3756:	4090      	lsls	r0, r2
    3758:	0002      	movs	r2, r0
    375a:	43d2      	mvns	r2, r2
    375c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	019b      	lsls	r3, r3, #6
    3762:	20ff      	movs	r0, #255	; 0xff
    3764:	4018      	ands	r0, r3
    3766:	1dfb      	adds	r3, r7, #7
    3768:	781b      	ldrb	r3, [r3, #0]
    376a:	001d      	movs	r5, r3
    376c:	2303      	movs	r3, #3
    376e:	402b      	ands	r3, r5
    3770:	00db      	lsls	r3, r3, #3
    3772:	4098      	lsls	r0, r3
    3774:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3776:	431a      	orrs	r2, r3
    3778:	1d8b      	adds	r3, r1, #6
    377a:	009b      	lsls	r3, r3, #2
    377c:	18e3      	adds	r3, r4, r3
    377e:	3304      	adds	r3, #4
    3780:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    3782:	e027      	b.n	37d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3784:	4c16      	ldr	r4, [pc, #88]	; (37e0 <NVIC_SetPriority+0xd8>)
    3786:	1dfb      	adds	r3, r7, #7
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	b25b      	sxtb	r3, r3
    378c:	089b      	lsrs	r3, r3, #2
    378e:	4914      	ldr	r1, [pc, #80]	; (37e0 <NVIC_SetPriority+0xd8>)
    3790:	1dfa      	adds	r2, r7, #7
    3792:	7812      	ldrb	r2, [r2, #0]
    3794:	b252      	sxtb	r2, r2
    3796:	0892      	lsrs	r2, r2, #2
    3798:	32c0      	adds	r2, #192	; 0xc0
    379a:	0092      	lsls	r2, r2, #2
    379c:	5852      	ldr	r2, [r2, r1]
    379e:	1df9      	adds	r1, r7, #7
    37a0:	7809      	ldrb	r1, [r1, #0]
    37a2:	0008      	movs	r0, r1
    37a4:	2103      	movs	r1, #3
    37a6:	4001      	ands	r1, r0
    37a8:	00c9      	lsls	r1, r1, #3
    37aa:	20ff      	movs	r0, #255	; 0xff
    37ac:	4088      	lsls	r0, r1
    37ae:	0001      	movs	r1, r0
    37b0:	43c9      	mvns	r1, r1
    37b2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    37b4:	683a      	ldr	r2, [r7, #0]
    37b6:	0192      	lsls	r2, r2, #6
    37b8:	20ff      	movs	r0, #255	; 0xff
    37ba:	4010      	ands	r0, r2
    37bc:	1dfa      	adds	r2, r7, #7
    37be:	7812      	ldrb	r2, [r2, #0]
    37c0:	0015      	movs	r5, r2
    37c2:	2203      	movs	r2, #3
    37c4:	402a      	ands	r2, r5
    37c6:	00d2      	lsls	r2, r2, #3
    37c8:	4090      	lsls	r0, r2
    37ca:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    37cc:	430a      	orrs	r2, r1
    37ce:	33c0      	adds	r3, #192	; 0xc0
    37d0:	009b      	lsls	r3, r3, #2
    37d2:	511a      	str	r2, [r3, r4]
}
    37d4:	46c0      	nop			; (mov r8, r8)
    37d6:	46bd      	mov	sp, r7
    37d8:	b002      	add	sp, #8
    37da:	bdb0      	pop	{r4, r5, r7, pc}
    37dc:	e000ed00 	.word	0xe000ed00
    37e0:	e000e100 	.word	0xe000e100

000037e4 <USB_DeviceCdcAcmInterruptIn>:


usb_status_t USB_DeviceCdcAcmInterruptIn(usb_device_handle handle,
                                         usb_device_endpoint_callback_message_struct_t *message,
                                         void *callbackParam)
{
    37e4:	b580      	push	{r7, lr}
    37e6:	b086      	sub	sp, #24
    37e8:	af00      	add	r7, sp, #0
    37ea:	60f8      	str	r0, [r7, #12]
    37ec:	60b9      	str	r1, [r7, #8]
    37ee:	607a      	str	r2, [r7, #4]
    usb_status_t error = kStatus_USB_Error;
    37f0:	2317      	movs	r3, #23
    37f2:	18fb      	adds	r3, r7, r3
    37f4:	2201      	movs	r2, #1
    37f6:	701a      	strb	r2, [r3, #0]
    s_cdcVcom.hasSentState = 0;
    37f8:	4b04      	ldr	r3, [pc, #16]	; (380c <USB_DeviceCdcAcmInterruptIn+0x28>)
    37fa:	2200      	movs	r2, #0
    37fc:	729a      	strb	r2, [r3, #10]
    return error;
    37fe:	2317      	movs	r3, #23
    3800:	18fb      	adds	r3, r7, r3
    3802:	781b      	ldrb	r3, [r3, #0]
}
    3804:	0018      	movs	r0, r3
    3806:	46bd      	mov	sp, r7
    3808:	b006      	add	sp, #24
    380a:	bd80      	pop	{r7, pc}
    380c:	1fff8acc 	.word	0x1fff8acc

00003810 <USB_DeviceCdcAcmBulkIn>:
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceCdcAcmBulkIn(usb_device_handle handle,
                                    usb_device_endpoint_callback_message_struct_t *message,
                                    void *callbackParam)
{
    3810:	b580      	push	{r7, lr}
    3812:	b086      	sub	sp, #24
    3814:	af00      	add	r7, sp, #0
    3816:	60f8      	str	r0, [r7, #12]
    3818:	60b9      	str	r1, [r7, #8]
    381a:	607a      	str	r2, [r7, #4]
    usb_status_t error = kStatus_USB_Error;
    381c:	2317      	movs	r3, #23
    381e:	18fb      	adds	r3, r7, r3
    3820:	2201      	movs	r2, #1
    3822:	701a      	strb	r2, [r3, #0]

    if ((message->length != 0) && (!(message->length % s_usbBulkMaxPacketSize)))
    3824:	68bb      	ldr	r3, [r7, #8]
    3826:	685b      	ldr	r3, [r3, #4]
    3828:	2b00      	cmp	r3, #0
    382a:	d010      	beq.n	384e <USB_DeviceCdcAcmBulkIn+0x3e>
    382c:	68bb      	ldr	r3, [r7, #8]
    382e:	685a      	ldr	r2, [r3, #4]
    3830:	4b19      	ldr	r3, [pc, #100]	; (3898 <USB_DeviceCdcAcmBulkIn+0x88>)
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	0019      	movs	r1, r3
    3836:	0010      	movs	r0, r2
    3838:	f7fc fe70 	bl	51c <__aeabi_uidivmod>
    383c:	1e0b      	subs	r3, r1, #0
    383e:	d106      	bne.n	384e <USB_DeviceCdcAcmBulkIn+0x3e>
    {
        /* If the last packet is the size of endpoint, then send also zero-ended packet,
         ** meaning that we want to inform the host that we do not have any additional
         ** data, so it can flush the output.
         */
        USB_DeviceSendRequest(handle, USB_CDC_VCOM_BULK_IN_ENDPOINT, NULL, 0);
    3840:	68f8      	ldr	r0, [r7, #12]
    3842:	2300      	movs	r3, #0
    3844:	2200      	movs	r2, #0
    3846:	2102      	movs	r1, #2
    3848:	f7fe ff44 	bl	26d4 <USB_DeviceSendRequest>
    384c:	e01c      	b.n	3888 <USB_DeviceCdcAcmBulkIn+0x78>
    }
    else if ((1 == s_cdcVcom.attach) && (1 == s_cdcVcom.startTransactions))
    384e:	4b13      	ldr	r3, [pc, #76]	; (389c <USB_DeviceCdcAcmBulkIn+0x8c>)
    3850:	791b      	ldrb	r3, [r3, #4]
    3852:	b2db      	uxtb	r3, r3
    3854:	2b01      	cmp	r3, #1
    3856:	d117      	bne.n	3888 <USB_DeviceCdcAcmBulkIn+0x78>
    3858:	4b10      	ldr	r3, [pc, #64]	; (389c <USB_DeviceCdcAcmBulkIn+0x8c>)
    385a:	799b      	ldrb	r3, [r3, #6]
    385c:	b2db      	uxtb	r3, r3
    385e:	2b01      	cmp	r3, #1
    3860:	d112      	bne.n	3888 <USB_DeviceCdcAcmBulkIn+0x78>
    {
        if ((message->buffer != NULL) || ((message->buffer == NULL) && (message->length == 0)))
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	2b00      	cmp	r3, #0
    3868:	d107      	bne.n	387a <USB_DeviceCdcAcmBulkIn+0x6a>
    386a:	68bb      	ldr	r3, [r7, #8]
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	2b00      	cmp	r3, #0
    3870:	d10a      	bne.n	3888 <USB_DeviceCdcAcmBulkIn+0x78>
    3872:	68bb      	ldr	r3, [r7, #8]
    3874:	685b      	ldr	r3, [r3, #4]
    3876:	2b00      	cmp	r3, #0
    3878:	d106      	bne.n	3888 <USB_DeviceCdcAcmBulkIn+0x78>
        {
            /* User: add your own code for send complete event */
            /* Schedule buffer for next receive event */
            USB_DeviceRecvRequest(handle, USB_CDC_VCOM_BULK_OUT_ENDPOINT, s_currRecvBuf, s_usbBulkMaxPacketSize);
    387a:	4b07      	ldr	r3, [pc, #28]	; (3898 <USB_DeviceCdcAcmBulkIn+0x88>)
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	4a08      	ldr	r2, [pc, #32]	; (38a0 <USB_DeviceCdcAcmBulkIn+0x90>)
    3880:	68f8      	ldr	r0, [r7, #12]
    3882:	2103      	movs	r1, #3
    3884:	f7fe ff44 	bl	2710 <USB_DeviceRecvRequest>
        }
    }
    else
    {
    }
    return error;
    3888:	2317      	movs	r3, #23
    388a:	18fb      	adds	r3, r7, r3
    388c:	781b      	ldrb	r3, [r3, #0]
}
    388e:	0018      	movs	r0, r3
    3890:	46bd      	mov	sp, r7
    3892:	b006      	add	sp, #24
    3894:	bd80      	pop	{r7, pc}
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	1fff88f0 	.word	0x1fff88f0
    389c:	1fff8acc 	.word	0x1fff8acc
    38a0:	1fff8af4 	.word	0x1fff8af4

000038a4 <USB_DeviceCdcAcmBulkOut>:
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceCdcAcmBulkOut(usb_device_handle handle,
                                     usb_device_endpoint_callback_message_struct_t *message,
                                     void *callbackParam)
{
    38a4:	b580      	push	{r7, lr}
    38a6:	b086      	sub	sp, #24
    38a8:	af00      	add	r7, sp, #0
    38aa:	60f8      	str	r0, [r7, #12]
    38ac:	60b9      	str	r1, [r7, #8]
    38ae:	607a      	str	r2, [r7, #4]
    usb_status_t error = kStatus_USB_Error;
    38b0:	2317      	movs	r3, #23
    38b2:	18fb      	adds	r3, r7, r3
    38b4:	2201      	movs	r2, #1
    38b6:	701a      	strb	r2, [r3, #0]

    if ((1 == s_cdcVcom.attach) && (1 == s_cdcVcom.startTransactions))
    38b8:	4b0f      	ldr	r3, [pc, #60]	; (38f8 <USB_DeviceCdcAcmBulkOut+0x54>)
    38ba:	791b      	ldrb	r3, [r3, #4]
    38bc:	b2db      	uxtb	r3, r3
    38be:	2b01      	cmp	r3, #1
    38c0:	d113      	bne.n	38ea <USB_DeviceCdcAcmBulkOut+0x46>
    38c2:	4b0d      	ldr	r3, [pc, #52]	; (38f8 <USB_DeviceCdcAcmBulkOut+0x54>)
    38c4:	799b      	ldrb	r3, [r3, #6]
    38c6:	b2db      	uxtb	r3, r3
    38c8:	2b01      	cmp	r3, #1
    38ca:	d10e      	bne.n	38ea <USB_DeviceCdcAcmBulkOut+0x46>
    {
        USB_VCOM_recBuffSize = message->length;
    38cc:	68bb      	ldr	r3, [r7, #8]
    38ce:	685a      	ldr	r2, [r3, #4]
    38d0:	4b0a      	ldr	r3, [pc, #40]	; (38fc <USB_DeviceCdcAcmBulkOut+0x58>)
    38d2:	601a      	str	r2, [r3, #0]

        if (!USB_VCOM_recBuffSize)
    38d4:	4b09      	ldr	r3, [pc, #36]	; (38fc <USB_DeviceCdcAcmBulkOut+0x58>)
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	2b00      	cmp	r3, #0
    38da:	d106      	bne.n	38ea <USB_DeviceCdcAcmBulkOut+0x46>
        {
            /* Schedule buffer for next receive event */
            USB_DeviceRecvRequest(handle, USB_CDC_VCOM_BULK_OUT_ENDPOINT, s_currRecvBuf, s_usbBulkMaxPacketSize);
    38dc:	4b08      	ldr	r3, [pc, #32]	; (3900 <USB_DeviceCdcAcmBulkOut+0x5c>)
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	4a08      	ldr	r2, [pc, #32]	; (3904 <USB_DeviceCdcAcmBulkOut+0x60>)
    38e2:	68f8      	ldr	r0, [r7, #12]
    38e4:	2103      	movs	r1, #3
    38e6:	f7fe ff13 	bl	2710 <USB_DeviceRecvRequest>
        }
    }
    return error;
    38ea:	2317      	movs	r3, #23
    38ec:	18fb      	adds	r3, r7, r3
    38ee:	781b      	ldrb	r3, [r3, #0]
}
    38f0:	0018      	movs	r0, r3
    38f2:	46bd      	mov	sp, r7
    38f4:	b006      	add	sp, #24
    38f6:	bd80      	pop	{r7, pc}
    38f8:	1fff8acc 	.word	0x1fff8acc
    38fc:	1fff8b74 	.word	0x1fff8b74
    3900:	1fff88f0 	.word	0x1fff88f0
    3904:	1fff8af4 	.word	0x1fff8af4

00003908 <USB_DeviceGetSetupBuffer>:
 * @param setupBuffer The pointer to the address of setup packet buffer.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceGetSetupBuffer(usb_device_handle handle, usb_setup_struct_t **setupBuffer)
{
    3908:	b580      	push	{r7, lr}
    390a:	b082      	sub	sp, #8
    390c:	af00      	add	r7, sp, #0
    390e:	6078      	str	r0, [r7, #4]
    3910:	6039      	str	r1, [r7, #0]
    static uint32_t cdcVcomSetup[2];
    if (NULL == setupBuffer)
    3912:	683b      	ldr	r3, [r7, #0]
    3914:	2b00      	cmp	r3, #0
    3916:	d101      	bne.n	391c <USB_DeviceGetSetupBuffer+0x14>
    {
        return kStatus_USB_InvalidParameter;
    3918:	2304      	movs	r3, #4
    391a:	e003      	b.n	3924 <USB_DeviceGetSetupBuffer+0x1c>
    }
    *setupBuffer = (usb_setup_struct_t *)&cdcVcomSetup;
    391c:	683b      	ldr	r3, [r7, #0]
    391e:	4a03      	ldr	r2, [pc, #12]	; (392c <USB_DeviceGetSetupBuffer+0x24>)
    3920:	601a      	str	r2, [r3, #0]
    return kStatus_USB_Success;
    3922:	2300      	movs	r3, #0
}
    3924:	0018      	movs	r0, r3
    3926:	46bd      	mov	sp, r7
    3928:	b002      	add	sp, #8
    392a:	bd80      	pop	{r7, pc}
    392c:	1fff8b7c 	.word	0x1fff8b7c

00003930 <USB_DeviceGetClassReceiveBuffer>:
 */
usb_status_t USB_DeviceGetClassReceiveBuffer(usb_device_handle handle,
                                             usb_setup_struct_t *setup,
                                             uint32_t *length,
                                             uint8_t **buffer)
{
    3930:	b580      	push	{r7, lr}
    3932:	b084      	sub	sp, #16
    3934:	af00      	add	r7, sp, #0
    3936:	60f8      	str	r0, [r7, #12]
    3938:	60b9      	str	r1, [r7, #8]
    393a:	607a      	str	r2, [r7, #4]
    393c:	603b      	str	r3, [r7, #0]
    static uint8_t setupOut[8];
    if ((NULL == buffer) || ((*length) > sizeof(setupOut)))
    393e:	683b      	ldr	r3, [r7, #0]
    3940:	2b00      	cmp	r3, #0
    3942:	d003      	beq.n	394c <USB_DeviceGetClassReceiveBuffer+0x1c>
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	2b08      	cmp	r3, #8
    394a:	d901      	bls.n	3950 <USB_DeviceGetClassReceiveBuffer+0x20>
    {
        return kStatus_USB_InvalidRequest;
    394c:	2305      	movs	r3, #5
    394e:	e003      	b.n	3958 <USB_DeviceGetClassReceiveBuffer+0x28>
    }
    *buffer = setupOut;
    3950:	683b      	ldr	r3, [r7, #0]
    3952:	4a03      	ldr	r2, [pc, #12]	; (3960 <USB_DeviceGetClassReceiveBuffer+0x30>)
    3954:	601a      	str	r2, [r3, #0]
    return kStatus_USB_Success;
    3956:	2300      	movs	r3, #0
}
    3958:	0018      	movs	r0, r3
    395a:	46bd      	mov	sp, r7
    395c:	b004      	add	sp, #16
    395e:	bd80      	pop	{r7, pc}
    3960:	1fff8b84 	.word	0x1fff8b84

00003964 <USB_DeviceConfigureRemoteWakeup>:
 * @param enable 1: enable, 0: disable.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceConfigureRemoteWakeup(usb_device_handle handle, uint8_t enable)
{
    3964:	b580      	push	{r7, lr}
    3966:	b082      	sub	sp, #8
    3968:	af00      	add	r7, sp, #0
    396a:	6078      	str	r0, [r7, #4]
    396c:	000a      	movs	r2, r1
    396e:	1cfb      	adds	r3, r7, #3
    3970:	701a      	strb	r2, [r3, #0]
    return kStatus_USB_InvalidRequest;
    3972:	2305      	movs	r3, #5
}
    3974:	0018      	movs	r0, r3
    3976:	46bd      	mov	sp, r7
    3978:	b002      	add	sp, #8
    397a:	bd80      	pop	{r7, pc}

0000397c <USB_DeviceProcessClassRequest>:
 */
usb_status_t USB_DeviceProcessClassRequest(usb_device_handle handle,
                                           usb_setup_struct_t *setup,
                                           uint32_t *length,
                                           uint8_t **buffer)
{
    397c:	b590      	push	{r4, r7, lr}
    397e:	b089      	sub	sp, #36	; 0x24
    3980:	af00      	add	r7, sp, #0
    3982:	60f8      	str	r0, [r7, #12]
    3984:	60b9      	str	r1, [r7, #8]
    3986:	607a      	str	r2, [r7, #4]
    3988:	603b      	str	r3, [r7, #0]
    usb_status_t error = kStatus_USB_InvalidRequest;
    398a:	231f      	movs	r3, #31
    398c:	18fb      	adds	r3, r7, r3
    398e:	2205      	movs	r2, #5
    3990:	701a      	strb	r2, [r3, #0]

    usb_cdc_acm_info_t *acmInfo = &s_usbCdcAcmInfo;
    3992:	4b75      	ldr	r3, [pc, #468]	; (3b68 <USB_DeviceProcessClassRequest+0x1ec>)
    3994:	61bb      	str	r3, [r7, #24]
    uint32_t len;
    uint16_t *uartBitmap;
    if (setup->wIndex != USB_CDC_VCOM_COMM_INTERFACE_INDEX)
    3996:	68bb      	ldr	r3, [r7, #8]
    3998:	889b      	ldrh	r3, [r3, #4]
    399a:	2b00      	cmp	r3, #0
    399c:	d003      	beq.n	39a6 <USB_DeviceProcessClassRequest+0x2a>
    {
        return error;
    399e:	231f      	movs	r3, #31
    39a0:	18fb      	adds	r3, r7, r3
    39a2:	781b      	ldrb	r3, [r3, #0]
    39a4:	e0dc      	b.n	3b60 <USB_DeviceProcessClassRequest+0x1e4>
    }

    switch (setup->bRequest)
    39a6:	68bb      	ldr	r3, [r7, #8]
    39a8:	785b      	ldrb	r3, [r3, #1]
    39aa:	2b23      	cmp	r3, #35	; 0x23
    39ac:	d900      	bls.n	39b0 <USB_DeviceProcessClassRequest+0x34>
    39ae:	e0d1      	b.n	3b54 <USB_DeviceProcessClassRequest+0x1d8>
    39b0:	009a      	lsls	r2, r3, #2
    39b2:	4b6e      	ldr	r3, [pc, #440]	; (3b6c <USB_DeviceProcessClassRequest+0x1f0>)
    39b4:	18d3      	adds	r3, r2, r3
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	469f      	mov	pc, r3
        case USB_DEVICE_CDC_REQUEST_SEND_ENCAPSULATED_COMMAND:
            break;
        case USB_DEVICE_CDC_REQUEST_GET_ENCAPSULATED_RESPONSE:
            break;
        case USB_DEVICE_CDC_REQUEST_SET_COMM_FEATURE:
            if (USB_DEVICE_CDC_FEATURE_ABSTRACT_STATE == setup->wValue)
    39ba:	68bb      	ldr	r3, [r7, #8]
    39bc:	885b      	ldrh	r3, [r3, #2]
    39be:	2b01      	cmp	r3, #1
    39c0:	d103      	bne.n	39ca <USB_DeviceProcessClassRequest+0x4e>
            {
                *buffer = s_abstractState;
    39c2:	683b      	ldr	r3, [r7, #0]
    39c4:	4a6a      	ldr	r2, [pc, #424]	; (3b70 <USB_DeviceProcessClassRequest+0x1f4>)
    39c6:	601a      	str	r2, [r3, #0]
    39c8:	e006      	b.n	39d8 <USB_DeviceProcessClassRequest+0x5c>
            }
            else if (USB_DEVICE_CDC_FEATURE_COUNTRY_SETTING == setup->wValue)
    39ca:	68bb      	ldr	r3, [r7, #8]
    39cc:	885b      	ldrh	r3, [r3, #2]
    39ce:	2b02      	cmp	r3, #2
    39d0:	d102      	bne.n	39d8 <USB_DeviceProcessClassRequest+0x5c>
            {
                *buffer = s_countryCode;
    39d2:	683b      	ldr	r3, [r7, #0]
    39d4:	4a67      	ldr	r2, [pc, #412]	; (3b74 <USB_DeviceProcessClassRequest+0x1f8>)
    39d6:	601a      	str	r2, [r3, #0]
            }
            else
            {
            }
            error = kStatus_USB_Success;
    39d8:	231f      	movs	r3, #31
    39da:	18fb      	adds	r3, r7, r3
    39dc:	2200      	movs	r2, #0
    39de:	701a      	strb	r2, [r3, #0]
            break;
    39e0:	e0bb      	b.n	3b5a <USB_DeviceProcessClassRequest+0x1de>
        case USB_DEVICE_CDC_REQUEST_GET_COMM_FEATURE:
            if (USB_DEVICE_CDC_FEATURE_ABSTRACT_STATE == setup->wValue)
    39e2:	68bb      	ldr	r3, [r7, #8]
    39e4:	885b      	ldrh	r3, [r3, #2]
    39e6:	2b01      	cmp	r3, #1
    39e8:	d106      	bne.n	39f8 <USB_DeviceProcessClassRequest+0x7c>
            {
                *buffer = s_abstractState;
    39ea:	683b      	ldr	r3, [r7, #0]
    39ec:	4a60      	ldr	r2, [pc, #384]	; (3b70 <USB_DeviceProcessClassRequest+0x1f4>)
    39ee:	601a      	str	r2, [r3, #0]
                *length = COMM_FEATURE_DATA_SIZE;
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	2202      	movs	r2, #2
    39f4:	601a      	str	r2, [r3, #0]
    39f6:	e009      	b.n	3a0c <USB_DeviceProcessClassRequest+0x90>
            }
            else if (USB_DEVICE_CDC_FEATURE_COUNTRY_SETTING == setup->wValue)
    39f8:	68bb      	ldr	r3, [r7, #8]
    39fa:	885b      	ldrh	r3, [r3, #2]
    39fc:	2b02      	cmp	r3, #2
    39fe:	d105      	bne.n	3a0c <USB_DeviceProcessClassRequest+0x90>
            {
                *buffer = s_countryCode;
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	4a5c      	ldr	r2, [pc, #368]	; (3b74 <USB_DeviceProcessClassRequest+0x1f8>)
    3a04:	601a      	str	r2, [r3, #0]
                *length = COMM_FEATURE_DATA_SIZE;
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	2202      	movs	r2, #2
    3a0a:	601a      	str	r2, [r3, #0]
            }
            else
            {
            }
            error = kStatus_USB_Success;
    3a0c:	231f      	movs	r3, #31
    3a0e:	18fb      	adds	r3, r7, r3
    3a10:	2200      	movs	r2, #0
    3a12:	701a      	strb	r2, [r3, #0]
            break;
    3a14:	e0a1      	b.n	3b5a <USB_DeviceProcessClassRequest+0x1de>
        case USB_DEVICE_CDC_REQUEST_CLEAR_COMM_FEATURE:
            break;
        case USB_DEVICE_CDC_REQUEST_GET_LINE_CODING:
            *buffer = s_lineCoding;
    3a16:	683b      	ldr	r3, [r7, #0]
    3a18:	4a57      	ldr	r2, [pc, #348]	; (3b78 <USB_DeviceProcessClassRequest+0x1fc>)
    3a1a:	601a      	str	r2, [r3, #0]
            *length = LINE_CODING_SIZE;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	2207      	movs	r2, #7
    3a20:	601a      	str	r2, [r3, #0]
            error = kStatus_USB_Success;
    3a22:	231f      	movs	r3, #31
    3a24:	18fb      	adds	r3, r7, r3
    3a26:	2200      	movs	r2, #0
    3a28:	701a      	strb	r2, [r3, #0]
            break;
    3a2a:	e096      	b.n	3b5a <USB_DeviceProcessClassRequest+0x1de>
        case USB_DEVICE_CDC_REQUEST_SET_LINE_CODING:
            *buffer = s_lineCoding;
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	4a52      	ldr	r2, [pc, #328]	; (3b78 <USB_DeviceProcessClassRequest+0x1fc>)
    3a30:	601a      	str	r2, [r3, #0]
            error = kStatus_USB_Success;
    3a32:	231f      	movs	r3, #31
    3a34:	18fb      	adds	r3, r7, r3
    3a36:	2200      	movs	r2, #0
    3a38:	701a      	strb	r2, [r3, #0]
            break;
    3a3a:	e08e      	b.n	3b5a <USB_DeviceProcessClassRequest+0x1de>
        case USB_DEVICE_CDC_REQUEST_SET_CONTROL_LINE_STATE:
        {
            error = kStatus_USB_Success;
    3a3c:	231f      	movs	r3, #31
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	2200      	movs	r2, #0
    3a42:	701a      	strb	r2, [r3, #0]
            acmInfo->dteStatus = setup->wValue;
    3a44:	68bb      	ldr	r3, [r7, #8]
    3a46:	885b      	ldrh	r3, [r3, #2]
    3a48:	b2da      	uxtb	r2, r3
    3a4a:	69bb      	ldr	r3, [r7, #24]
    3a4c:	739a      	strb	r2, [r3, #14]
            /* activate/deactivate Tx carrier */
            if (acmInfo->dteStatus & USB_DEVICE_CDC_CONTROL_SIG_BITMAP_CARRIER_ACTIVATION)
    3a4e:	69bb      	ldr	r3, [r7, #24]
    3a50:	7b9b      	ldrb	r3, [r3, #14]
    3a52:	001a      	movs	r2, r3
    3a54:	2302      	movs	r3, #2
    3a56:	4013      	ands	r3, r2
    3a58:	d007      	beq.n	3a6a <USB_DeviceProcessClassRequest+0xee>
            {
                acmInfo->uartState |= USB_DEVICE_CDC_UART_STATE_TX_CARRIER;
    3a5a:	69bb      	ldr	r3, [r7, #24]
    3a5c:	8a1b      	ldrh	r3, [r3, #16]
    3a5e:	2202      	movs	r2, #2
    3a60:	4313      	orrs	r3, r2
    3a62:	b29a      	uxth	r2, r3
    3a64:	69bb      	ldr	r3, [r7, #24]
    3a66:	821a      	strh	r2, [r3, #16]
    3a68:	e006      	b.n	3a78 <USB_DeviceProcessClassRequest+0xfc>
            }
            else
            {
                acmInfo->uartState &= (uint16_t)~USB_DEVICE_CDC_UART_STATE_TX_CARRIER;
    3a6a:	69bb      	ldr	r3, [r7, #24]
    3a6c:	8a1b      	ldrh	r3, [r3, #16]
    3a6e:	2202      	movs	r2, #2
    3a70:	4393      	bics	r3, r2
    3a72:	b29a      	uxth	r2, r3
    3a74:	69bb      	ldr	r3, [r7, #24]
    3a76:	821a      	strh	r2, [r3, #16]
            }

            /* activate carrier and DTE */
            if (acmInfo->dteStatus & USB_DEVICE_CDC_CONTROL_SIG_BITMAP_DTE_PRESENCE)
    3a78:	69bb      	ldr	r3, [r7, #24]
    3a7a:	7b9b      	ldrb	r3, [r3, #14]
    3a7c:	001a      	movs	r2, r3
    3a7e:	2301      	movs	r3, #1
    3a80:	4013      	ands	r3, r2
    3a82:	d007      	beq.n	3a94 <USB_DeviceProcessClassRequest+0x118>
            {
                acmInfo->uartState |= USB_DEVICE_CDC_UART_STATE_RX_CARRIER;
    3a84:	69bb      	ldr	r3, [r7, #24]
    3a86:	8a1b      	ldrh	r3, [r3, #16]
    3a88:	2201      	movs	r2, #1
    3a8a:	4313      	orrs	r3, r2
    3a8c:	b29a      	uxth	r2, r3
    3a8e:	69bb      	ldr	r3, [r7, #24]
    3a90:	821a      	strh	r2, [r3, #16]
    3a92:	e006      	b.n	3aa2 <USB_DeviceProcessClassRequest+0x126>
            }
            else
            {
                acmInfo->uartState &= (uint16_t)~USB_DEVICE_CDC_UART_STATE_RX_CARRIER;
    3a94:	69bb      	ldr	r3, [r7, #24]
    3a96:	8a1b      	ldrh	r3, [r3, #16]
    3a98:	2201      	movs	r2, #1
    3a9a:	4393      	bics	r3, r2
    3a9c:	b29a      	uxth	r2, r3
    3a9e:	69bb      	ldr	r3, [r7, #24]
    3aa0:	821a      	strh	r2, [r3, #16]
            }

            /* Indicates to DCE if DTE is present or not */
            acmInfo->dtePresent = (acmInfo->dteStatus & USB_DEVICE_CDC_CONTROL_SIG_BITMAP_DTE_PRESENCE) ? true : false;
    3aa2:	69bb      	ldr	r3, [r7, #24]
    3aa4:	7b9b      	ldrb	r3, [r3, #14]
    3aa6:	001a      	movs	r2, r3
    3aa8:	2301      	movs	r3, #1
    3aaa:	4013      	ands	r3, r2
    3aac:	1e5a      	subs	r2, r3, #1
    3aae:	4193      	sbcs	r3, r2
    3ab0:	b2da      	uxtb	r2, r3
    3ab2:	69bb      	ldr	r3, [r7, #24]
    3ab4:	729a      	strb	r2, [r3, #10]

            /* Initialize the serial state buffer */
            acmInfo->serialStateBuf[0] = NOTIF_REQUEST_TYPE;                        /* bmRequestType */
    3ab6:	69bb      	ldr	r3, [r7, #24]
    3ab8:	22a1      	movs	r2, #161	; 0xa1
    3aba:	701a      	strb	r2, [r3, #0]
            acmInfo->serialStateBuf[1] = USB_DEVICE_CDC_REQUEST_SERIAL_STATE_NOTIF; /* bNotification */
    3abc:	69bb      	ldr	r3, [r7, #24]
    3abe:	2220      	movs	r2, #32
    3ac0:	705a      	strb	r2, [r3, #1]
            acmInfo->serialStateBuf[2] = 0x00;                                      /* wValue */
    3ac2:	69bb      	ldr	r3, [r7, #24]
    3ac4:	2200      	movs	r2, #0
    3ac6:	709a      	strb	r2, [r3, #2]
            acmInfo->serialStateBuf[3] = 0x00;
    3ac8:	69bb      	ldr	r3, [r7, #24]
    3aca:	2200      	movs	r2, #0
    3acc:	70da      	strb	r2, [r3, #3]
            acmInfo->serialStateBuf[4] = 0x00; /* wIndex */
    3ace:	69bb      	ldr	r3, [r7, #24]
    3ad0:	2200      	movs	r2, #0
    3ad2:	711a      	strb	r2, [r3, #4]
            acmInfo->serialStateBuf[5] = 0x00;
    3ad4:	69bb      	ldr	r3, [r7, #24]
    3ad6:	2200      	movs	r2, #0
    3ad8:	715a      	strb	r2, [r3, #5]
            acmInfo->serialStateBuf[6] = UART_BITMAP_SIZE; /* wLength */
    3ada:	69bb      	ldr	r3, [r7, #24]
    3adc:	2202      	movs	r2, #2
    3ade:	719a      	strb	r2, [r3, #6]
            acmInfo->serialStateBuf[7] = 0x00;
    3ae0:	69bb      	ldr	r3, [r7, #24]
    3ae2:	2200      	movs	r2, #0
    3ae4:	71da      	strb	r2, [r3, #7]
            /* Notifiy to host the line state */
            acmInfo->serialStateBuf[4] = setup->wIndex;
    3ae6:	68bb      	ldr	r3, [r7, #8]
    3ae8:	889b      	ldrh	r3, [r3, #4]
    3aea:	b2da      	uxtb	r2, r3
    3aec:	69bb      	ldr	r3, [r7, #24]
    3aee:	711a      	strb	r2, [r3, #4]
            /* Lower byte of UART BITMAP */
            uartBitmap = (uint16_t *)&acmInfo->serialStateBuf[NOTIF_PACKET_SIZE + UART_BITMAP_SIZE - 2];
    3af0:	69bb      	ldr	r3, [r7, #24]
    3af2:	3308      	adds	r3, #8
    3af4:	617b      	str	r3, [r7, #20]
            *uartBitmap = acmInfo->uartState;
    3af6:	69bb      	ldr	r3, [r7, #24]
    3af8:	8a1a      	ldrh	r2, [r3, #16]
    3afa:	697b      	ldr	r3, [r7, #20]
    3afc:	801a      	strh	r2, [r3, #0]
            len = (uint32_t)(NOTIF_PACKET_SIZE + UART_BITMAP_SIZE);
    3afe:	230a      	movs	r3, #10
    3b00:	613b      	str	r3, [r7, #16]
            if (0 == s_cdcVcom.hasSentState)
    3b02:	4b1e      	ldr	r3, [pc, #120]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b04:	7a9b      	ldrb	r3, [r3, #10]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d10c      	bne.n	3b24 <USB_DeviceProcessClassRequest+0x1a8>
            {
                error = USB_DeviceSendRequest(handle, USB_CDC_VCOM_INTERRUPT_IN_ENDPOINT, acmInfo->serialStateBuf, len);
    3b0a:	69ba      	ldr	r2, [r7, #24]
    3b0c:	231f      	movs	r3, #31
    3b0e:	18fc      	adds	r4, r7, r3
    3b10:	693b      	ldr	r3, [r7, #16]
    3b12:	68f8      	ldr	r0, [r7, #12]
    3b14:	2101      	movs	r1, #1
    3b16:	f7fe fddd 	bl	26d4 <USB_DeviceSendRequest>
    3b1a:	0003      	movs	r3, r0
    3b1c:	7023      	strb	r3, [r4, #0]
                if (kStatus_USB_Success != error)
                {
                    //usb_echo("kUSB_DeviceCdcEventSetControlLineState error!");
                }
                s_cdcVcom.hasSentState = 1;
    3b1e:	4b17      	ldr	r3, [pc, #92]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b20:	2201      	movs	r2, #1
    3b22:	729a      	strb	r2, [r3, #10]
            }
            else
            {
                /* To do: CARRIER_DEACTIVATED */
            }
            if (acmInfo->dteStatus & USB_DEVICE_CDC_CONTROL_SIG_BITMAP_DTE_PRESENCE)
    3b24:	69bb      	ldr	r3, [r7, #24]
    3b26:	7b9b      	ldrb	r3, [r3, #14]
    3b28:	001a      	movs	r2, r3
    3b2a:	2301      	movs	r3, #1
    3b2c:	4013      	ands	r3, r2
    3b2e:	d008      	beq.n	3b42 <USB_DeviceProcessClassRequest+0x1c6>
            {
                /* DTE_ACTIVATED */
                if (1 == s_cdcVcom.attach)
    3b30:	4b12      	ldr	r3, [pc, #72]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b32:	791b      	ldrb	r3, [r3, #4]
    3b34:	b2db      	uxtb	r3, r3
    3b36:	2b01      	cmp	r3, #1
    3b38:	d10e      	bne.n	3b58 <USB_DeviceProcessClassRequest+0x1dc>
                {
                    s_cdcVcom.startTransactions = 1;
    3b3a:	4b10      	ldr	r3, [pc, #64]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b3c:	2201      	movs	r2, #1
    3b3e:	719a      	strb	r2, [r3, #6]
                {
                    s_cdcVcom.startTransactions = 0;
                }
            }
        }
        break;
    3b40:	e00a      	b.n	3b58 <USB_DeviceProcessClassRequest+0x1dc>
                if (1 == s_cdcVcom.attach)
    3b42:	4b0e      	ldr	r3, [pc, #56]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b44:	791b      	ldrb	r3, [r3, #4]
    3b46:	b2db      	uxtb	r3, r3
    3b48:	2b01      	cmp	r3, #1
    3b4a:	d105      	bne.n	3b58 <USB_DeviceProcessClassRequest+0x1dc>
                    s_cdcVcom.startTransactions = 0;
    3b4c:	4b0b      	ldr	r3, [pc, #44]	; (3b7c <USB_DeviceProcessClassRequest+0x200>)
    3b4e:	2200      	movs	r2, #0
    3b50:	719a      	strb	r2, [r3, #6]
        break;
    3b52:	e001      	b.n	3b58 <USB_DeviceProcessClassRequest+0x1dc>
        case USB_DEVICE_CDC_REQUEST_SEND_BREAK:
            break;
        default:
            break;
    3b54:	46c0      	nop			; (mov r8, r8)
    3b56:	e000      	b.n	3b5a <USB_DeviceProcessClassRequest+0x1de>
        break;
    3b58:	46c0      	nop			; (mov r8, r8)
    }

    return error;
    3b5a:	231f      	movs	r3, #31
    3b5c:	18fb      	adds	r3, r7, r3
    3b5e:	781b      	ldrb	r3, [r3, #0]
}
    3b60:	0018      	movs	r0, r3
    3b62:	46bd      	mov	sp, r7
    3b64:	b009      	add	sp, #36	; 0x24
    3b66:	bd90      	pop	{r4, r7, pc}
    3b68:	1fff8ae0 	.word	0x1fff8ae0
    3b6c:	00004f9c 	.word	0x00004f9c
    3b70:	1fff8ad8 	.word	0x1fff8ad8
    3b74:	1fff8adc 	.word	0x1fff8adc
    3b78:	1fff88e8 	.word	0x1fff88e8
    3b7c:	1fff8acc 	.word	0x1fff8acc

00003b80 <USB_DeviceCallback>:
 * @param param           The parameter of the device specific request.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceCallback(usb_device_handle handle, uint32_t event, void *param)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b08c      	sub	sp, #48	; 0x30
    3b84:	af00      	add	r7, sp, #0
    3b86:	60f8      	str	r0, [r7, #12]
    3b88:	60b9      	str	r1, [r7, #8]
    3b8a:	607a      	str	r2, [r7, #4]
    usb_status_t error = kStatus_USB_Error;
    3b8c:	232f      	movs	r3, #47	; 0x2f
    3b8e:	18fb      	adds	r3, r7, r3
    3b90:	2201      	movs	r2, #1
    3b92:	701a      	strb	r2, [r3, #0]
    uint8_t *temp8 = (uint8_t *)param;
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (event)
    3b98:	68bb      	ldr	r3, [r7, #8]
    3b9a:	2b01      	cmp	r3, #1
    3b9c:	d002      	beq.n	3ba4 <USB_DeviceCallback+0x24>
    3b9e:	2b09      	cmp	r3, #9
    3ba0:	d009      	beq.n	3bb6 <USB_DeviceCallback+0x36>
                                          s_usbBulkMaxPacketSize);
                }
            }
            break;
        default:
            break;
    3ba2:	e0ac      	b.n	3cfe <USB_DeviceCallback+0x17e>
            USB_DeviceControlPipeInit(s_cdcVcom.deviceHandle);
    3ba4:	4b59      	ldr	r3, [pc, #356]	; (3d0c <USB_DeviceCallback+0x18c>)
    3ba6:	681b      	ldr	r3, [r3, #0]
    3ba8:	0018      	movs	r0, r3
    3baa:	f7ff fc21 	bl	33f0 <USB_DeviceControlPipeInit>
            s_cdcVcom.attach = 0;
    3bae:	4b57      	ldr	r3, [pc, #348]	; (3d0c <USB_DeviceCallback+0x18c>)
    3bb0:	2200      	movs	r2, #0
    3bb2:	711a      	strb	r2, [r3, #4]
        break;
    3bb4:	e0a3      	b.n	3cfe <USB_DeviceCallback+0x17e>
            if (param)
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	2b00      	cmp	r3, #0
    3bba:	d100      	bne.n	3bbe <USB_DeviceCallback+0x3e>
    3bbc:	e09e      	b.n	3cfc <USB_DeviceCallback+0x17c>
                s_cdcVcom.attach = 1;
    3bbe:	4b53      	ldr	r3, [pc, #332]	; (3d0c <USB_DeviceCallback+0x18c>)
    3bc0:	2201      	movs	r2, #1
    3bc2:	711a      	strb	r2, [r3, #4]
                s_cdcVcom.currentConfiguration = *temp8;
    3bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bc6:	781a      	ldrb	r2, [r3, #0]
    3bc8:	4b50      	ldr	r3, [pc, #320]	; (3d0c <USB_DeviceCallback+0x18c>)
    3bca:	71da      	strb	r2, [r3, #7]
                if (USB_CDC_VCOM_CONFIGURE_INDEX == (*temp8))
    3bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bce:	781b      	ldrb	r3, [r3, #0]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d000      	beq.n	3bd6 <USB_DeviceCallback+0x56>
    3bd4:	e092      	b.n	3cfc <USB_DeviceCallback+0x17c>
                    endpointCallback.callbackFn = USB_DeviceCdcAcmInterruptIn;
    3bd6:	2314      	movs	r3, #20
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	4a4d      	ldr	r2, [pc, #308]	; (3d10 <USB_DeviceCallback+0x190>)
    3bdc:	601a      	str	r2, [r3, #0]
                    endpointCallback.callbackParam = handle;
    3bde:	2314      	movs	r3, #20
    3be0:	18fb      	adds	r3, r7, r3
    3be2:	68fa      	ldr	r2, [r7, #12]
    3be4:	605a      	str	r2, [r3, #4]
                    epInitStruct.zlt = 0;
    3be6:	2320      	movs	r3, #32
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	2200      	movs	r2, #0
    3bec:	711a      	strb	r2, [r3, #4]
                    epInitStruct.transferType = USB_ENDPOINT_INTERRUPT;
    3bee:	2320      	movs	r3, #32
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	2203      	movs	r2, #3
    3bf4:	70da      	strb	r2, [r3, #3]
                    epInitStruct.endpointAddress = USB_CDC_VCOM_INTERRUPT_IN_ENDPOINT |
    3bf6:	2320      	movs	r3, #32
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	2281      	movs	r2, #129	; 0x81
    3bfc:	709a      	strb	r2, [r3, #2]
                    if (USB_SPEED_HIGH == s_cdcVcom.speed)
    3bfe:	4b43      	ldr	r3, [pc, #268]	; (3d0c <USB_DeviceCallback+0x18c>)
    3c00:	795b      	ldrb	r3, [r3, #5]
    3c02:	2b02      	cmp	r3, #2
    3c04:	d104      	bne.n	3c10 <USB_DeviceCallback+0x90>
                        epInitStruct.maxPacketSize = HS_CDC_VCOM_INTERRUPT_IN_PACKET_SIZE;
    3c06:	2320      	movs	r3, #32
    3c08:	18fb      	adds	r3, r7, r3
    3c0a:	2210      	movs	r2, #16
    3c0c:	801a      	strh	r2, [r3, #0]
    3c0e:	e003      	b.n	3c18 <USB_DeviceCallback+0x98>
                        epInitStruct.maxPacketSize = FS_CDC_VCOM_INTERRUPT_IN_PACKET_SIZE;
    3c10:	2320      	movs	r3, #32
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	2210      	movs	r2, #16
    3c16:	801a      	strh	r2, [r3, #0]
                    USB_DeviceInitEndpoint(s_cdcVcom.deviceHandle, &epInitStruct, &endpointCallback);
    3c18:	4b3c      	ldr	r3, [pc, #240]	; (3d0c <USB_DeviceCallback+0x18c>)
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	2214      	movs	r2, #20
    3c1e:	18ba      	adds	r2, r7, r2
    3c20:	2120      	movs	r1, #32
    3c22:	1879      	adds	r1, r7, r1
    3c24:	0018      	movs	r0, r3
    3c26:	f7fe fd8d 	bl	2744 <USB_DeviceInitEndpoint>
                    endpointCallback.callbackFn = USB_DeviceCdcAcmBulkIn;
    3c2a:	2314      	movs	r3, #20
    3c2c:	18fb      	adds	r3, r7, r3
    3c2e:	4a39      	ldr	r2, [pc, #228]	; (3d14 <USB_DeviceCallback+0x194>)
    3c30:	601a      	str	r2, [r3, #0]
                    endpointCallback.callbackParam = handle;
    3c32:	2314      	movs	r3, #20
    3c34:	18fb      	adds	r3, r7, r3
    3c36:	68fa      	ldr	r2, [r7, #12]
    3c38:	605a      	str	r2, [r3, #4]
                    epInitStruct.zlt = 0;
    3c3a:	2320      	movs	r3, #32
    3c3c:	18fb      	adds	r3, r7, r3
    3c3e:	2200      	movs	r2, #0
    3c40:	711a      	strb	r2, [r3, #4]
                    epInitStruct.transferType = USB_ENDPOINT_BULK;
    3c42:	2320      	movs	r3, #32
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	2202      	movs	r2, #2
    3c48:	70da      	strb	r2, [r3, #3]
                    epInitStruct.endpointAddress =
    3c4a:	2320      	movs	r3, #32
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	2282      	movs	r2, #130	; 0x82
    3c50:	709a      	strb	r2, [r3, #2]
                    if (USB_SPEED_HIGH == s_cdcVcom.speed)
    3c52:	4b2e      	ldr	r3, [pc, #184]	; (3d0c <USB_DeviceCallback+0x18c>)
    3c54:	795b      	ldrb	r3, [r3, #5]
    3c56:	2b02      	cmp	r3, #2
    3c58:	d105      	bne.n	3c66 <USB_DeviceCallback+0xe6>
                        epInitStruct.maxPacketSize = HS_CDC_VCOM_BULK_IN_PACKET_SIZE;
    3c5a:	2320      	movs	r3, #32
    3c5c:	18fb      	adds	r3, r7, r3
    3c5e:	2280      	movs	r2, #128	; 0x80
    3c60:	0092      	lsls	r2, r2, #2
    3c62:	801a      	strh	r2, [r3, #0]
    3c64:	e003      	b.n	3c6e <USB_DeviceCallback+0xee>
                        epInitStruct.maxPacketSize = FS_CDC_VCOM_BULK_IN_PACKET_SIZE;
    3c66:	2320      	movs	r3, #32
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	2240      	movs	r2, #64	; 0x40
    3c6c:	801a      	strh	r2, [r3, #0]
                    USB_DeviceInitEndpoint(s_cdcVcom.deviceHandle, &epInitStruct, &endpointCallback);
    3c6e:	4b27      	ldr	r3, [pc, #156]	; (3d0c <USB_DeviceCallback+0x18c>)
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	2214      	movs	r2, #20
    3c74:	18ba      	adds	r2, r7, r2
    3c76:	2120      	movs	r1, #32
    3c78:	1879      	adds	r1, r7, r1
    3c7a:	0018      	movs	r0, r3
    3c7c:	f7fe fd62 	bl	2744 <USB_DeviceInitEndpoint>
                    endpointCallback.callbackFn = USB_DeviceCdcAcmBulkOut;
    3c80:	2314      	movs	r3, #20
    3c82:	18fb      	adds	r3, r7, r3
    3c84:	4a24      	ldr	r2, [pc, #144]	; (3d18 <USB_DeviceCallback+0x198>)
    3c86:	601a      	str	r2, [r3, #0]
                    endpointCallback.callbackParam = handle;
    3c88:	2314      	movs	r3, #20
    3c8a:	18fb      	adds	r3, r7, r3
    3c8c:	68fa      	ldr	r2, [r7, #12]
    3c8e:	605a      	str	r2, [r3, #4]
                    epInitStruct.zlt = 0;
    3c90:	2320      	movs	r3, #32
    3c92:	18fb      	adds	r3, r7, r3
    3c94:	2200      	movs	r2, #0
    3c96:	711a      	strb	r2, [r3, #4]
                    epInitStruct.transferType = USB_ENDPOINT_BULK;
    3c98:	2320      	movs	r3, #32
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	2202      	movs	r2, #2
    3c9e:	70da      	strb	r2, [r3, #3]
                    epInitStruct.endpointAddress =
    3ca0:	2320      	movs	r3, #32
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	2203      	movs	r2, #3
    3ca6:	709a      	strb	r2, [r3, #2]
                    if (USB_SPEED_HIGH == s_cdcVcom.speed)
    3ca8:	4b18      	ldr	r3, [pc, #96]	; (3d0c <USB_DeviceCallback+0x18c>)
    3caa:	795b      	ldrb	r3, [r3, #5]
    3cac:	2b02      	cmp	r3, #2
    3cae:	d105      	bne.n	3cbc <USB_DeviceCallback+0x13c>
                        epInitStruct.maxPacketSize = HS_CDC_VCOM_BULK_OUT_PACKET_SIZE;
    3cb0:	2320      	movs	r3, #32
    3cb2:	18fb      	adds	r3, r7, r3
    3cb4:	2280      	movs	r2, #128	; 0x80
    3cb6:	0092      	lsls	r2, r2, #2
    3cb8:	801a      	strh	r2, [r3, #0]
    3cba:	e003      	b.n	3cc4 <USB_DeviceCallback+0x144>
                        epInitStruct.maxPacketSize = FS_CDC_VCOM_BULK_OUT_PACKET_SIZE;
    3cbc:	2320      	movs	r3, #32
    3cbe:	18fb      	adds	r3, r7, r3
    3cc0:	2240      	movs	r2, #64	; 0x40
    3cc2:	801a      	strh	r2, [r3, #0]
                    USB_DeviceInitEndpoint(s_cdcVcom.deviceHandle, &epInitStruct, &endpointCallback);
    3cc4:	4b11      	ldr	r3, [pc, #68]	; (3d0c <USB_DeviceCallback+0x18c>)
    3cc6:	681b      	ldr	r3, [r3, #0]
    3cc8:	2214      	movs	r2, #20
    3cca:	18ba      	adds	r2, r7, r2
    3ccc:	2120      	movs	r1, #32
    3cce:	1879      	adds	r1, r7, r1
    3cd0:	0018      	movs	r0, r3
    3cd2:	f7fe fd37 	bl	2744 <USB_DeviceInitEndpoint>
                    if (USB_SPEED_HIGH == s_cdcVcom.speed)
    3cd6:	4b0d      	ldr	r3, [pc, #52]	; (3d0c <USB_DeviceCallback+0x18c>)
    3cd8:	795b      	ldrb	r3, [r3, #5]
    3cda:	2b02      	cmp	r3, #2
    3cdc:	d104      	bne.n	3ce8 <USB_DeviceCallback+0x168>
                        s_usbBulkMaxPacketSize = HS_CDC_VCOM_BULK_OUT_PACKET_SIZE;
    3cde:	4b0f      	ldr	r3, [pc, #60]	; (3d1c <USB_DeviceCallback+0x19c>)
    3ce0:	2280      	movs	r2, #128	; 0x80
    3ce2:	0092      	lsls	r2, r2, #2
    3ce4:	601a      	str	r2, [r3, #0]
    3ce6:	e002      	b.n	3cee <USB_DeviceCallback+0x16e>
                        s_usbBulkMaxPacketSize = FS_CDC_VCOM_BULK_OUT_PACKET_SIZE;
    3ce8:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <USB_DeviceCallback+0x19c>)
    3cea:	2240      	movs	r2, #64	; 0x40
    3cec:	601a      	str	r2, [r3, #0]
                    USB_DeviceRecvRequest(handle, USB_CDC_VCOM_BULK_OUT_ENDPOINT, s_currRecvBuf,
    3cee:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <USB_DeviceCallback+0x19c>)
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	4a0b      	ldr	r2, [pc, #44]	; (3d20 <USB_DeviceCallback+0x1a0>)
    3cf4:	68f8      	ldr	r0, [r7, #12]
    3cf6:	2103      	movs	r1, #3
    3cf8:	f7fe fd0a 	bl	2710 <USB_DeviceRecvRequest>
            break;
    3cfc:	46c0      	nop			; (mov r8, r8)
    }

    return error;
    3cfe:	232f      	movs	r3, #47	; 0x2f
    3d00:	18fb      	adds	r3, r7, r3
    3d02:	781b      	ldrb	r3, [r3, #0]
}
    3d04:	0018      	movs	r0, r3
    3d06:	46bd      	mov	sp, r7
    3d08:	b00c      	add	sp, #48	; 0x30
    3d0a:	bd80      	pop	{r7, pc}
    3d0c:	1fff8acc 	.word	0x1fff8acc
    3d10:	000037e5 	.word	0x000037e5
    3d14:	00003811 	.word	0x00003811
    3d18:	000038a5 	.word	0x000038a5
    3d1c:	1fff88f0 	.word	0x1fff88f0
    3d20:	1fff8af4 	.word	0x1fff8af4

00003d24 <USB_DeviceConfigureEndpointStatus>:
 * @param status A flag to indicate whether to stall the endpoint. 1: stall, 0: unstall.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceConfigureEndpointStatus(usb_device_handle handle, uint8_t ep, uint8_t status)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	0008      	movs	r0, r1
    3d2e:	0011      	movs	r1, r2
    3d30:	1cfb      	adds	r3, r7, #3
    3d32:	1c02      	adds	r2, r0, #0
    3d34:	701a      	strb	r2, [r3, #0]
    3d36:	1cbb      	adds	r3, r7, #2
    3d38:	1c0a      	adds	r2, r1, #0
    3d3a:	701a      	strb	r2, [r3, #0]
    if (status)
    3d3c:	1cbb      	adds	r3, r7, #2
    3d3e:	781b      	ldrb	r3, [r3, #0]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d008      	beq.n	3d56 <USB_DeviceConfigureEndpointStatus+0x32>
    {
        return USB_DeviceStallEndpoint(handle, ep);
    3d44:	1cfb      	adds	r3, r7, #3
    3d46:	781a      	ldrb	r2, [r3, #0]
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	0011      	movs	r1, r2
    3d4c:	0018      	movs	r0, r3
    3d4e:	f7fe fdde 	bl	290e <USB_DeviceStallEndpoint>
    3d52:	0003      	movs	r3, r0
    3d54:	e007      	b.n	3d66 <USB_DeviceConfigureEndpointStatus+0x42>
    }
    else
    {
        return USB_DeviceUnstallEndpoint(handle, ep);
    3d56:	1cfb      	adds	r3, r7, #3
    3d58:	781a      	ldrb	r2, [r3, #0]
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	0011      	movs	r1, r2
    3d5e:	0018      	movs	r0, r3
    3d60:	f7fe fdf0 	bl	2944 <USB_DeviceUnstallEndpoint>
    3d64:	0003      	movs	r3, r0
    }
}
    3d66:	0018      	movs	r0, r3
    3d68:	46bd      	mov	sp, r7
    3d6a:	b002      	add	sp, #8
    3d6c:	bd80      	pop	{r7, pc}
	...

00003d70 <USB0_IRQHandler>:
 *
 * @return None.
 */

void USB0_IRQHandler(void)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	af00      	add	r7, sp, #0
    USB_DeviceKhciIsrFunction(s_cdcVcom.deviceHandle);
    3d74:	4b03      	ldr	r3, [pc, #12]	; (3d84 <USB0_IRQHandler+0x14>)
    3d76:	681b      	ldr	r3, [r3, #0]
    3d78:	0018      	movs	r0, r3
    3d7a:	f7fe f901 	bl	1f80 <USB_DeviceKhciIsrFunction>
}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	46bd      	mov	sp, r7
    3d82:	bd80      	pop	{r7, pc}
    3d84:	1fff8acc 	.word	0x1fff8acc

00003d88 <USB_VCOM_Init>:
 * This function initializes the application.
 *
 * @return None.
 */
bool USB_VCOM_Init(void)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
	bool retVal = false;
    3d8e:	1dfb      	adds	r3, r7, #7
    3d90:	2200      	movs	r2, #0
    3d92:	701a      	strb	r2, [r3, #0]

    SystemCoreClockUpdate();
    3d94:	f7fc fd7c 	bl	890 <SystemCoreClockUpdate>

    PCC_USB0FS = PCC_CLKCFG_CGC_MASK | PCC_CLKCFG_PCS(PCC_CKFG_PCS_VAL_FIRCLK);
    3d98:	491d      	ldr	r1, [pc, #116]	; (3e10 <USB_VCOM_Init+0x88>)
    3d9a:	23aa      	movs	r3, #170	; 0xaa
    3d9c:	005b      	lsls	r3, r3, #1
    3d9e:	2286      	movs	r2, #134	; 0x86
    3da0:	05d2      	lsls	r2, r2, #23
    3da2:	50ca      	str	r2, [r1, r3]

    for (int i = 0; i < FSL_FEATURE_USB_KHCI_USB_RAM; i++)
    3da4:	2300      	movs	r3, #0
    3da6:	603b      	str	r3, [r7, #0]
    3da8:	e008      	b.n	3dbc <USB_VCOM_Init+0x34>
    {
        ((uint8_t *)FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    3daa:	683b      	ldr	r3, [r7, #0]
    3dac:	4a19      	ldr	r2, [pc, #100]	; (3e14 <USB_VCOM_Init+0x8c>)
    3dae:	4694      	mov	ip, r2
    3db0:	4463      	add	r3, ip
    3db2:	2200      	movs	r2, #0
    3db4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < FSL_FEATURE_USB_KHCI_USB_RAM; i++)
    3db6:	683b      	ldr	r3, [r7, #0]
    3db8:	3301      	adds	r3, #1
    3dba:	603b      	str	r3, [r7, #0]
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	4a16      	ldr	r2, [pc, #88]	; (3e18 <USB_VCOM_Init+0x90>)
    3dc0:	4293      	cmp	r3, r2
    3dc2:	ddf2      	ble.n	3daa <USB_VCOM_Init+0x22>
    }

    s_cdcVcom.speed = USB_SPEED_FULL;
    3dc4:	4b15      	ldr	r3, [pc, #84]	; (3e1c <USB_VCOM_Init+0x94>)
    3dc6:	2200      	movs	r2, #0
    3dc8:	715a      	strb	r2, [r3, #5]
    s_cdcVcom.attach = 0;
    3dca:	4b14      	ldr	r3, [pc, #80]	; (3e1c <USB_VCOM_Init+0x94>)
    3dcc:	2200      	movs	r2, #0
    3dce:	711a      	strb	r2, [r3, #4]
    s_cdcVcom.deviceHandle = NULL;
    3dd0:	4b12      	ldr	r3, [pc, #72]	; (3e1c <USB_VCOM_Init+0x94>)
    3dd2:	2200      	movs	r2, #0
    3dd4:	601a      	str	r2, [r3, #0]

    if (kStatus_USB_Success == USB_DeviceInit(CONTROLLER_ID, USB_DeviceCallback, &s_cdcVcom.deviceHandle))
    3dd6:	4a11      	ldr	r2, [pc, #68]	; (3e1c <USB_VCOM_Init+0x94>)
    3dd8:	4b11      	ldr	r3, [pc, #68]	; (3e20 <USB_VCOM_Init+0x98>)
    3dda:	0019      	movs	r1, r3
    3ddc:	2000      	movs	r0, #0
    3dde:	f7fe fb78 	bl	24d2 <USB_DeviceInit>
    3de2:	1e03      	subs	r3, r0, #0
    3de4:	d10e      	bne.n	3e04 <USB_VCOM_Init+0x7c>
    {
    	retVal = true;
    3de6:	1dfb      	adds	r3, r7, #7
    3de8:	2201      	movs	r2, #1
    3dea:	701a      	strb	r2, [r3, #0]

        NVIC_SetPriority(USB0_IRQn, 3);
    3dec:	2103      	movs	r1, #3
    3dee:	2018      	movs	r0, #24
    3df0:	f7ff fc8a 	bl	3708 <NVIC_SetPriority>
        NVIC_EnableIRQ(USB0_IRQn);
    3df4:	2018      	movs	r0, #24
    3df6:	f7ff fc71 	bl	36dc <NVIC_EnableIRQ>

        USB_DeviceRun(s_cdcVcom.deviceHandle);
    3dfa:	4b08      	ldr	r3, [pc, #32]	; (3e1c <USB_VCOM_Init+0x94>)
    3dfc:	681b      	ldr	r3, [r3, #0]
    3dfe:	0018      	movs	r0, r3
    3e00:	f7fe fc37 	bl	2672 <USB_DeviceRun>
    }

    return retVal;
    3e04:	1dfb      	adds	r3, r7, #7
    3e06:	781b      	ldrb	r3, [r3, #0]
}
    3e08:	0018      	movs	r0, r3
    3e0a:	46bd      	mov	sp, r7
    3e0c:	b002      	add	sp, #8
    3e0e:	bd80      	pop	{r7, pc}
    3e10:	4007a000 	.word	0x4007a000
    3e14:	40100000 	.word	0x40100000
    3e18:	000007ff 	.word	0x000007ff
    3e1c:	1fff8acc 	.word	0x1fff8acc
    3e20:	00003b81 	.word	0x00003b81

00003e24 <USB_VCOM_Service>:
 *
 * @return None.
 */

void USB_VCOM_Service(void)
{
    3e24:	b590      	push	{r4, r7, lr}
    3e26:	b085      	sub	sp, #20
    3e28:	af00      	add	r7, sp, #0
    usb_status_t error = kStatus_USB_Error;
    3e2a:	230b      	movs	r3, #11
    3e2c:	18fb      	adds	r3, r7, r3
    3e2e:	2201      	movs	r2, #1
    3e30:	701a      	strb	r2, [r3, #0]
    if ((1 == s_cdcVcom.attach) && (1 == s_cdcVcom.startTransactions))
    3e32:	4b22      	ldr	r3, [pc, #136]	; (3ebc <USB_VCOM_Service+0x98>)
    3e34:	791b      	ldrb	r3, [r3, #4]
    3e36:	b2db      	uxtb	r3, r3
    3e38:	2b01      	cmp	r3, #1
    3e3a:	d13a      	bne.n	3eb2 <USB_VCOM_Service+0x8e>
    3e3c:	4b1f      	ldr	r3, [pc, #124]	; (3ebc <USB_VCOM_Service+0x98>)
    3e3e:	799b      	ldrb	r3, [r3, #6]
    3e40:	b2db      	uxtb	r3, r3
    3e42:	2b01      	cmp	r3, #1
    3e44:	d135      	bne.n	3eb2 <USB_VCOM_Service+0x8e>
    {
        /* User Code */
        if ((0 != USB_VCOM_recBuffSize) && (0xFFFFFFFFU != USB_VCOM_recBuffSize))
    3e46:	4b1e      	ldr	r3, [pc, #120]	; (3ec0 <USB_VCOM_Service+0x9c>)
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d01c      	beq.n	3e88 <USB_VCOM_Service+0x64>
    3e4e:	4b1c      	ldr	r3, [pc, #112]	; (3ec0 <USB_VCOM_Service+0x9c>)
    3e50:	681b      	ldr	r3, [r3, #0]
    3e52:	3301      	adds	r3, #1
    3e54:	d018      	beq.n	3e88 <USB_VCOM_Service+0x64>
        {
            int32_t i;

            /* Copy Buffer to Send Buff */
            for (i = 0; i < USB_VCOM_recBuffSize; i++)
    3e56:	2300      	movs	r3, #0
    3e58:	60fb      	str	r3, [r7, #12]
    3e5a:	e00d      	b.n	3e78 <USB_VCOM_Service+0x54>
            {
                s_currSendBuf[s_sendSize++] = s_currRecvBuf[i];
    3e5c:	4b19      	ldr	r3, [pc, #100]	; (3ec4 <USB_VCOM_Service+0xa0>)
    3e5e:	681b      	ldr	r3, [r3, #0]
    3e60:	1c59      	adds	r1, r3, #1
    3e62:	4a18      	ldr	r2, [pc, #96]	; (3ec4 <USB_VCOM_Service+0xa0>)
    3e64:	6011      	str	r1, [r2, #0]
    3e66:	4918      	ldr	r1, [pc, #96]	; (3ec8 <USB_VCOM_Service+0xa4>)
    3e68:	68fa      	ldr	r2, [r7, #12]
    3e6a:	188a      	adds	r2, r1, r2
    3e6c:	7811      	ldrb	r1, [r2, #0]
    3e6e:	4a17      	ldr	r2, [pc, #92]	; (3ecc <USB_VCOM_Service+0xa8>)
    3e70:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < USB_VCOM_recBuffSize; i++)
    3e72:	68fb      	ldr	r3, [r7, #12]
    3e74:	3301      	adds	r3, #1
    3e76:	60fb      	str	r3, [r7, #12]
    3e78:	68fa      	ldr	r2, [r7, #12]
    3e7a:	4b11      	ldr	r3, [pc, #68]	; (3ec0 <USB_VCOM_Service+0x9c>)
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	429a      	cmp	r2, r3
    3e80:	d3ec      	bcc.n	3e5c <USB_VCOM_Service+0x38>
            }
            USB_VCOM_recBuffSize = 0;
    3e82:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <USB_VCOM_Service+0x9c>)
    3e84:	2200      	movs	r2, #0
    3e86:	601a      	str	r2, [r3, #0]
        }
        if (s_sendSize)
    3e88:	4b0e      	ldr	r3, [pc, #56]	; (3ec4 <USB_VCOM_Service+0xa0>)
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d010      	beq.n	3eb2 <USB_VCOM_Service+0x8e>
        {
            uint32_t size = s_sendSize;
    3e90:	4b0c      	ldr	r3, [pc, #48]	; (3ec4 <USB_VCOM_Service+0xa0>)
    3e92:	681b      	ldr	r3, [r3, #0]
    3e94:	607b      	str	r3, [r7, #4]
            s_sendSize = 0;
    3e96:	4b0b      	ldr	r3, [pc, #44]	; (3ec4 <USB_VCOM_Service+0xa0>)
    3e98:	2200      	movs	r2, #0
    3e9a:	601a      	str	r2, [r3, #0]

            error = USB_DeviceSendRequest(s_cdcVcom.deviceHandle, USB_CDC_VCOM_BULK_IN_ENDPOINT, s_currSendBuf, size);
    3e9c:	4b07      	ldr	r3, [pc, #28]	; (3ebc <USB_VCOM_Service+0x98>)
    3e9e:	6818      	ldr	r0, [r3, #0]
    3ea0:	230b      	movs	r3, #11
    3ea2:	18fc      	adds	r4, r7, r3
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	4a09      	ldr	r2, [pc, #36]	; (3ecc <USB_VCOM_Service+0xa8>)
    3ea8:	2102      	movs	r1, #2
    3eaa:	f7fe fc13 	bl	26d4 <USB_DeviceSendRequest>
    3eae:	0003      	movs	r3, r0
    3eb0:	7023      	strb	r3, [r4, #0]
            {
                /* Failure to send Data Handling code here */
            }
        }
    }
}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	46bd      	mov	sp, r7
    3eb6:	b005      	add	sp, #20
    3eb8:	bd90      	pop	{r4, r7, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	1fff8acc 	.word	0x1fff8acc
    3ec0:	1fff8b74 	.word	0x1fff8b74
    3ec4:	1fff8b78 	.word	0x1fff8b78
    3ec8:	1fff8af4 	.word	0x1fff8af4
    3ecc:	1fff8b34 	.word	0x1fff8b34

00003ed0 <HardFault_Handler>:
    3ed0:	be00      	bkpt	0x0000
    3ed2:	e7fd      	b.n	3ed0 <HardFault_Handler>

00003ed4 <INTMUX0_0_IRQHandler>:
    3ed4:	b500      	push	{lr}
    3ed6:	f3ef 8005 	mrs	r0, IPSR
    3eda:	2103      	movs	r1, #3
    3edc:	4008      	ands	r0, r1
    3ede:	0180      	lsls	r0, r0, #6
    3ee0:	4905      	ldr	r1, [pc, #20]	; (3ef8 <INTMUX0_IRQHandler_end+0x4>)
    3ee2:	4308      	orrs	r0, r1
    3ee4:	6800      	ldr	r0, [r0, #0]
    3ee6:	0000      	movs	r0, r0
    3ee8:	d004      	beq.n	3ef4 <INTMUX0_IRQHandler_end>
    3eea:	4904      	ldr	r1, [pc, #16]	; (3efc <INTMUX0_IRQHandler_end+0x8>)
    3eec:	6809      	ldr	r1, [r1, #0]
    3eee:	1840      	adds	r0, r0, r1
    3ef0:	6800      	ldr	r0, [r0, #0]
    3ef2:	4780      	blx	r0

00003ef4 <INTMUX0_IRQHandler_end>:
    3ef4:	bd00      	pop	{pc}
    3ef6:	0000      	.short	0x0000
    3ef8:	40024004 	.word	0x40024004
    3efc:	e000ed08 	.word	0xe000ed08

00003f00 <memcpy>:
    3f00:	0012      	movs	r2, r2
    3f02:	d003      	beq.n	3f0c <memcpy_end>

00003f04 <memcpy_loop>:
    3f04:	3a01      	subs	r2, #1
    3f06:	5c8b      	ldrb	r3, [r1, r2]
    3f08:	5483      	strb	r3, [r0, r2]
    3f0a:	d1fb      	bne.n	3f04 <memcpy_loop>

00003f0c <memcpy_end>:
    3f0c:	4770      	bx	lr

00003f0e <memset>:
    3f0e:	0012      	movs	r2, r2
    3f10:	d002      	beq.n	3f18 <memset_end>

00003f12 <memset_loop>:
    3f12:	3a01      	subs	r2, #1
    3f14:	5481      	strb	r1, [r0, r2]
    3f16:	d1fc      	bne.n	3f12 <memset_loop>

00003f18 <memset_end>:
    3f18:	4770      	bx	lr

00003f1a <NMI_Handler>:
    3f1a:	4770      	bx	lr

00003f1c <tstmr_get_val>:
    3f1c:	f3ef 8310 	mrs	r3, PRIMASK
    3f20:	b672      	cpsid	i
    3f22:	4a03      	ldr	r2, [pc, #12]	; (3f30 <tstmr_get_val+0x14>)
    3f24:	6810      	ldr	r0, [r2, #0]
    3f26:	4a03      	ldr	r2, [pc, #12]	; (3f34 <tstmr_get_val+0x18>)
    3f28:	6811      	ldr	r1, [r2, #0]
    3f2a:	f383 8810 	msr	PRIMASK, r3
    3f2e:	4770      	bx	lr
    3f30:	400750f0 	.word	0x400750f0
    3f34:	400750f4 	.word	0x400750f4

00003f38 <wdog_set>:
#include "MKL28Z7.h"
#include "wdog.h"
#include "tstmr.h"

void wdog_set(WDOG_CONF wdog_conf, uint16_t timeout)
{
    3f38:	b590      	push	{r4, r7, lr}
    3f3a:	b08b      	sub	sp, #44	; 0x2c
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	0002      	movs	r2, r0
    3f40:	1dfb      	adds	r3, r7, #7
    3f42:	701a      	strb	r2, [r3, #0]
    3f44:	1d3b      	adds	r3, r7, #4
    3f46:	1c0a      	adds	r2, r1, #0
    3f48:	801a      	strh	r2, [r3, #0]
	uint64_t delay_begin, delay_end;
	uint32_t primask;

	if (timeout == 0) {
    3f4a:	1d3b      	adds	r3, r7, #4
    3f4c:	881b      	ldrh	r3, [r3, #0]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d103      	bne.n	3f5a <wdog_set+0x22>
		timeout = 0xFFFFu;
    3f52:	1d3b      	adds	r3, r7, #4
    3f54:	2201      	movs	r2, #1
    3f56:	4252      	negs	r2, r2
    3f58:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f5a:	f3ef 8310 	mrs	r3, PRIMASK
    3f5e:	60fb      	str	r3, [r7, #12]
  return(result);
    3f60:	68fb      	ldr	r3, [r7, #12]
	}

	primask = __get_PRIMASK();
    3f62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    3f64:	b672      	cpsid	i
	__disable_irq();

	WDOG0->CNT = WDOG_UNLOCK_SEQ;
    3f66:	4b2d      	ldr	r3, [pc, #180]	; (401c <wdog_set+0xe4>)
    3f68:	4a2d      	ldr	r2, [pc, #180]	; (4020 <wdog_set+0xe8>)
    3f6a:	605a      	str	r2, [r3, #4]
	WDOG0->TOVAL = timeout;
    3f6c:	4b2b      	ldr	r3, [pc, #172]	; (401c <wdog_set+0xe4>)
    3f6e:	1d3a      	adds	r2, r7, #4
    3f70:	8812      	ldrh	r2, [r2, #0]
    3f72:	609a      	str	r2, [r3, #8]

	switch (wdog_conf) {
    3f74:	1dfb      	adds	r3, r7, #7
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	2b08      	cmp	r3, #8
    3f7a:	d828      	bhi.n	3fce <wdog_set+0x96>
    3f7c:	009a      	lsls	r2, r3, #2
    3f7e:	4b29      	ldr	r3, [pc, #164]	; (4024 <wdog_set+0xec>)
    3f80:	18d3      	adds	r3, r2, r3
    3f82:	681b      	ldr	r3, [r3, #0]
    3f84:	469f      	mov	pc, r3
	case WDOG_CONF_DIS:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_UPDATE_MASK;
    3f86:	4b25      	ldr	r3, [pc, #148]	; (401c <wdog_set+0xe4>)
    3f88:	4a27      	ldr	r2, [pc, #156]	; (4028 <wdog_set+0xf0>)
    3f8a:	601a      	str	r2, [r3, #0]
		break;
    3f8c:	e023      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_BUSCLK_PRESC_OFF:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_BUSCLK |
    3f8e:	4b23      	ldr	r3, [pc, #140]	; (401c <wdog_set+0xe4>)
    3f90:	4a26      	ldr	r2, [pc, #152]	; (402c <wdog_set+0xf4>)
    3f92:	601a      	str	r2, [r3, #0]
					WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3f94:	e01f      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_BUSCLK_PRESC_ON:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_BUSCLK |
    3f96:	4b21      	ldr	r3, [pc, #132]	; (401c <wdog_set+0xe4>)
    3f98:	4a25      	ldr	r2, [pc, #148]	; (4030 <wdog_set+0xf8>)
    3f9a:	601a      	str	r2, [r3, #0]
					WDOG_CS_PRES_MASK | WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3f9c:	e01b      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_LPOCLK_PRESC_OFF:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_LPOCLK |
    3f9e:	4b1f      	ldr	r3, [pc, #124]	; (401c <wdog_set+0xe4>)
    3fa0:	4a24      	ldr	r2, [pc, #144]	; (4034 <wdog_set+0xfc>)
    3fa2:	601a      	str	r2, [r3, #0]
					WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fa4:	e017      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_LPOCLK_PRESC_ON:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_LPOCLK |
    3fa6:	4b1d      	ldr	r3, [pc, #116]	; (401c <wdog_set+0xe4>)
    3fa8:	4a23      	ldr	r2, [pc, #140]	; (4038 <wdog_set+0x100>)
    3faa:	601a      	str	r2, [r3, #0]
					WDOG_CS_PRES_MASK | WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fac:	e013      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_SIRCCLK_PRESC_OFF:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_SIRCCLK |
    3fae:	4b1b      	ldr	r3, [pc, #108]	; (401c <wdog_set+0xe4>)
    3fb0:	4a22      	ldr	r2, [pc, #136]	; (403c <wdog_set+0x104>)
    3fb2:	601a      	str	r2, [r3, #0]
					WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fb4:	e00f      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_SIRCCLK_PRESC_ON:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_SIRCCLK |
    3fb6:	4b19      	ldr	r3, [pc, #100]	; (401c <wdog_set+0xe4>)
    3fb8:	4a21      	ldr	r2, [pc, #132]	; (4040 <wdog_set+0x108>)
    3fba:	601a      	str	r2, [r3, #0]
					WDOG_CS_PRES_MASK | WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fbc:	e00b      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_SOSCCLK_PRESC_OFF:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_SOSCCLK |
    3fbe:	4b17      	ldr	r3, [pc, #92]	; (401c <wdog_set+0xe4>)
    3fc0:	4a20      	ldr	r2, [pc, #128]	; (4044 <wdog_set+0x10c>)
    3fc2:	601a      	str	r2, [r3, #0]
					WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fc4:	e007      	b.n	3fd6 <wdog_set+0x9e>
	case WDOG_CONF_SOSCCLK_PRESC_ON:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_CLK_VAL_SOSCCLK |
    3fc6:	4b15      	ldr	r3, [pc, #84]	; (401c <wdog_set+0xe4>)
    3fc8:	4a1f      	ldr	r2, [pc, #124]	; (4048 <wdog_set+0x110>)
    3fca:	601a      	str	r2, [r3, #0]
					WDOG_CS_PRES_MASK | WDOG_CS_EN_MASK | WDOG_CS_UPDATE_MASK;
		break;
    3fcc:	e003      	b.n	3fd6 <wdog_set+0x9e>
	default:
		WDOG0->CS = WDOG_CS_CMD32EN_MASK | WDOG_CS_UPDATE_MASK;
    3fce:	4b13      	ldr	r3, [pc, #76]	; (401c <wdog_set+0xe4>)
    3fd0:	4a15      	ldr	r2, [pc, #84]	; (4028 <wdog_set+0xf0>)
    3fd2:	601a      	str	r2, [r3, #0]
		break;
    3fd4:	46c0      	nop			; (mov r8, r8)
	}

	delay_begin = tstmr_get_val();
    3fd6:	f7ff ffa1 	bl	3f1c <tstmr_get_val>
    3fda:	0003      	movs	r3, r0
    3fdc:	000c      	movs	r4, r1
    3fde:	61bb      	str	r3, [r7, #24]
    3fe0:	61fc      	str	r4, [r7, #28]

	do {
		delay_end = tstmr_get_val();
    3fe2:	f7ff ff9b 	bl	3f1c <tstmr_get_val>
    3fe6:	0003      	movs	r3, r0
    3fe8:	000c      	movs	r4, r1
    3fea:	613b      	str	r3, [r7, #16]
    3fec:	617c      	str	r4, [r7, #20]
	} while ((delay_end - delay_begin) < WDOG_CONF_DELAY);
    3fee:	6939      	ldr	r1, [r7, #16]
    3ff0:	697a      	ldr	r2, [r7, #20]
    3ff2:	69bb      	ldr	r3, [r7, #24]
    3ff4:	69fc      	ldr	r4, [r7, #28]
    3ff6:	1ac9      	subs	r1, r1, r3
    3ff8:	41a2      	sbcs	r2, r4
    3ffa:	000b      	movs	r3, r1
    3ffc:	0014      	movs	r4, r2
    3ffe:	2c00      	cmp	r4, #0
    4000:	d103      	bne.n	400a <wdog_set+0xd2>
    4002:	d1ee      	bne.n	3fe2 <wdog_set+0xaa>
    4004:	2b3f      	cmp	r3, #63	; 0x3f
    4006:	d800      	bhi.n	400a <wdog_set+0xd2>
    4008:	e7eb      	b.n	3fe2 <wdog_set+0xaa>
    400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    400c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    400e:	68bb      	ldr	r3, [r7, #8]
    4010:	f383 8810 	msr	PRIMASK, r3

	__set_PRIMASK(primask);
}
    4014:	46c0      	nop			; (mov r8, r8)
    4016:	46bd      	mov	sp, r7
    4018:	b00b      	add	sp, #44	; 0x2c
    401a:	bd90      	pop	{r4, r7, pc}
    401c:	40076000 	.word	0x40076000
    4020:	d928c520 	.word	0xd928c520
    4024:	0000502c 	.word	0x0000502c
    4028:	00002020 	.word	0x00002020
    402c:	000020a0 	.word	0x000020a0
    4030:	000030a0 	.word	0x000030a0
    4034:	000021a0 	.word	0x000021a0
    4038:	000031a0 	.word	0x000031a0
    403c:	000022a0 	.word	0x000022a0
    4040:	000032a0 	.word	0x000032a0
    4044:	000023a0 	.word	0x000023a0
    4048:	000033a0 	.word	0x000033a0

0000404c <NVIC_EnableIRQ>:
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
    4052:	0002      	movs	r2, r0
    4054:	1dfb      	adds	r3, r7, #7
    4056:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4058:	4b06      	ldr	r3, [pc, #24]	; (4074 <NVIC_EnableIRQ+0x28>)
    405a:	1dfa      	adds	r2, r7, #7
    405c:	7812      	ldrb	r2, [r2, #0]
    405e:	0011      	movs	r1, r2
    4060:	221f      	movs	r2, #31
    4062:	400a      	ands	r2, r1
    4064:	2101      	movs	r1, #1
    4066:	4091      	lsls	r1, r2
    4068:	000a      	movs	r2, r1
    406a:	601a      	str	r2, [r3, #0]
}
    406c:	46c0      	nop			; (mov r8, r8)
    406e:	46bd      	mov	sp, r7
    4070:	b002      	add	sp, #8
    4072:	bd80      	pop	{r7, pc}
    4074:	e000e100 	.word	0xe000e100

00004078 <NVIC_SetPriority>:
{
    4078:	b5b0      	push	{r4, r5, r7, lr}
    407a:	b082      	sub	sp, #8
    407c:	af00      	add	r7, sp, #0
    407e:	0002      	movs	r2, r0
    4080:	6039      	str	r1, [r7, #0]
    4082:	1dfb      	adds	r3, r7, #7
    4084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    4086:	1dfb      	adds	r3, r7, #7
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	2b7f      	cmp	r3, #127	; 0x7f
    408c:	d932      	bls.n	40f4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    408e:	4c2f      	ldr	r4, [pc, #188]	; (414c <NVIC_SetPriority+0xd4>)
    4090:	1dfb      	adds	r3, r7, #7
    4092:	781b      	ldrb	r3, [r3, #0]
    4094:	001a      	movs	r2, r3
    4096:	230f      	movs	r3, #15
    4098:	4013      	ands	r3, r2
    409a:	3b08      	subs	r3, #8
    409c:	0899      	lsrs	r1, r3, #2
    409e:	4a2b      	ldr	r2, [pc, #172]	; (414c <NVIC_SetPriority+0xd4>)
    40a0:	1dfb      	adds	r3, r7, #7
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	0018      	movs	r0, r3
    40a6:	230f      	movs	r3, #15
    40a8:	4003      	ands	r3, r0
    40aa:	3b08      	subs	r3, #8
    40ac:	089b      	lsrs	r3, r3, #2
    40ae:	3306      	adds	r3, #6
    40b0:	009b      	lsls	r3, r3, #2
    40b2:	18d3      	adds	r3, r2, r3
    40b4:	3304      	adds	r3, #4
    40b6:	681b      	ldr	r3, [r3, #0]
    40b8:	1dfa      	adds	r2, r7, #7
    40ba:	7812      	ldrb	r2, [r2, #0]
    40bc:	0010      	movs	r0, r2
    40be:	2203      	movs	r2, #3
    40c0:	4002      	ands	r2, r0
    40c2:	00d2      	lsls	r2, r2, #3
    40c4:	20ff      	movs	r0, #255	; 0xff
    40c6:	4090      	lsls	r0, r2
    40c8:	0002      	movs	r2, r0
    40ca:	43d2      	mvns	r2, r2
    40cc:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	019b      	lsls	r3, r3, #6
    40d2:	20ff      	movs	r0, #255	; 0xff
    40d4:	4018      	ands	r0, r3
    40d6:	1dfb      	adds	r3, r7, #7
    40d8:	781b      	ldrb	r3, [r3, #0]
    40da:	001d      	movs	r5, r3
    40dc:	2303      	movs	r3, #3
    40de:	402b      	ands	r3, r5
    40e0:	00db      	lsls	r3, r3, #3
    40e2:	4098      	lsls	r0, r3
    40e4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    40e6:	431a      	orrs	r2, r3
    40e8:	1d8b      	adds	r3, r1, #6
    40ea:	009b      	lsls	r3, r3, #2
    40ec:	18e3      	adds	r3, r4, r3
    40ee:	3304      	adds	r3, #4
    40f0:	601a      	str	r2, [r3, #0]
}
    40f2:	e027      	b.n	4144 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    40f4:	4c16      	ldr	r4, [pc, #88]	; (4150 <NVIC_SetPriority+0xd8>)
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	781b      	ldrb	r3, [r3, #0]
    40fa:	b25b      	sxtb	r3, r3
    40fc:	089b      	lsrs	r3, r3, #2
    40fe:	4914      	ldr	r1, [pc, #80]	; (4150 <NVIC_SetPriority+0xd8>)
    4100:	1dfa      	adds	r2, r7, #7
    4102:	7812      	ldrb	r2, [r2, #0]
    4104:	b252      	sxtb	r2, r2
    4106:	0892      	lsrs	r2, r2, #2
    4108:	32c0      	adds	r2, #192	; 0xc0
    410a:	0092      	lsls	r2, r2, #2
    410c:	5852      	ldr	r2, [r2, r1]
    410e:	1df9      	adds	r1, r7, #7
    4110:	7809      	ldrb	r1, [r1, #0]
    4112:	0008      	movs	r0, r1
    4114:	2103      	movs	r1, #3
    4116:	4001      	ands	r1, r0
    4118:	00c9      	lsls	r1, r1, #3
    411a:	20ff      	movs	r0, #255	; 0xff
    411c:	4088      	lsls	r0, r1
    411e:	0001      	movs	r1, r0
    4120:	43c9      	mvns	r1, r1
    4122:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4124:	683a      	ldr	r2, [r7, #0]
    4126:	0192      	lsls	r2, r2, #6
    4128:	20ff      	movs	r0, #255	; 0xff
    412a:	4010      	ands	r0, r2
    412c:	1dfa      	adds	r2, r7, #7
    412e:	7812      	ldrb	r2, [r2, #0]
    4130:	0015      	movs	r5, r2
    4132:	2203      	movs	r2, #3
    4134:	402a      	ands	r2, r5
    4136:	00d2      	lsls	r2, r2, #3
    4138:	4090      	lsls	r0, r2
    413a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    413c:	430a      	orrs	r2, r1
    413e:	33c0      	adds	r3, #192	; 0xc0
    4140:	009b      	lsls	r3, r3, #2
    4142:	511a      	str	r2, [r3, r4]
}
    4144:	46c0      	nop			; (mov r8, r8)
    4146:	46bd      	mov	sp, r7
    4148:	b002      	add	sp, #8
    414a:	bdb0      	pop	{r4, r5, r7, pc}
    414c:	e000ed00 	.word	0xe000ed00
    4150:	e000e100 	.word	0xe000e100

00004154 <LPUART0_IRQHandler>:

/****************************IRQ handlers***************************/
/////////////////////////////////////////////////////////////////////

void __attribute__ ((interrupt)) LPUART0_IRQHandler(void)
{
    4154:	b580      	push	{r7, lr}
    4156:	af00      	add	r7, sp, #0
	LPUART_IRQHandler(LPUARTHandler_Chann_LPUART0);
    4158:	2000      	movs	r0, #0
    415a:	f000 f9a7 	bl	44ac <LPUART_IRQHandler>
}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}

00004164 <LPUART1_IRQHandler>:

void __attribute__ ((interrupt)) LPUART1_IRQHandler(void)
{
    4164:	b580      	push	{r7, lr}
    4166:	af00      	add	r7, sp, #0
	LPUART_IRQHandler(LPUARTHandler_Chann_LPUART1);
    4168:	2001      	movs	r0, #1
    416a:	f000 f99f 	bl	44ac <LPUART_IRQHandler>
}
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	46bd      	mov	sp, r7
    4172:	bd80      	pop	{r7, pc}

00004174 <LPUART2_IRQHandler>:

void __attribute__ ((interrupt)) LPUART2_IRQHandler(void)
{
    4174:	b580      	push	{r7, lr}
    4176:	af00      	add	r7, sp, #0
	LPUART_IRQHandler(LPUARTHandler_Chann_LPUART2);
    4178:	2002      	movs	r0, #2
    417a:	f000 f997 	bl	44ac <LPUART_IRQHandler>
}
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	46bd      	mov	sp, r7
    4182:	bd80      	pop	{r7, pc}

00004184 <LPUARTHandler_Init>:
/*****************************functions*****************************/
/////////////////////////////////////////////////////////////////////

void LPUARTHandler_Init(LPUARTHandler_Chann_t channel, uint32_t LPUARTHandler_CLKCFG_PCS,
		uint32_t LPUARTHandler_BAUD_OSR, uint32_t LPUARTHandler_BAUD_SBR, void (*LPUARTHandler_Event)(LPUARTHandler_Event_t))
{
    4184:	b580      	push	{r7, lr}
    4186:	b086      	sub	sp, #24
    4188:	af00      	add	r7, sp, #0
    418a:	60b9      	str	r1, [r7, #8]
    418c:	607a      	str	r2, [r7, #4]
    418e:	603b      	str	r3, [r7, #0]
    4190:	230f      	movs	r3, #15
    4192:	18fb      	adds	r3, r7, r3
    4194:	1c02      	adds	r2, r0, #0
    4196:	701a      	strb	r2, [r3, #0]
	LPUARTHandler_Instance_t* LPUART_p = &LPUARTHandler_Instance[channel];
    4198:	230f      	movs	r3, #15
    419a:	18fb      	adds	r3, r7, r3
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	229c      	movs	r2, #156	; 0x9c
    41a0:	435a      	muls	r2, r3
    41a2:	4b2d      	ldr	r3, [pc, #180]	; (4258 <LPUARTHandler_Init+0xd4>)
    41a4:	18d3      	adds	r3, r2, r3
    41a6:	617b      	str	r3, [r7, #20]

	Queue_Init(&LPUART_p->queueBuffRX, LPUART_p->buffRX, LPUART_RX_BUFF_LEN, Queue_DataType_char);
    41a8:	697b      	ldr	r3, [r7, #20]
    41aa:	3390      	adds	r3, #144	; 0x90
    41ac:	0018      	movs	r0, r3
    41ae:	697b      	ldr	r3, [r7, #20]
    41b0:	3310      	adds	r3, #16
    41b2:	0019      	movs	r1, r3
    41b4:	2300      	movs	r3, #0
    41b6:	2240      	movs	r2, #64	; 0x40
    41b8:	f000 f9de 	bl	4578 <Queue_Init>
	Queue_Init(&LPUART_p->queueBuffTX, LPUART_p->buffTX, LPUART_TX_BUFF_LEN, Queue_DataType_char);
    41bc:	697b      	ldr	r3, [r7, #20]
    41be:	3394      	adds	r3, #148	; 0x94
    41c0:	0018      	movs	r0, r3
    41c2:	697b      	ldr	r3, [r7, #20]
    41c4:	3350      	adds	r3, #80	; 0x50
    41c6:	0019      	movs	r1, r3
    41c8:	2300      	movs	r3, #0
    41ca:	2240      	movs	r2, #64	; 0x40
    41cc:	f000 f9d4 	bl	4578 <Queue_Init>

	LPUART_p->event = LPUARTHandler_Event;
    41d0:	697b      	ldr	r3, [r7, #20]
    41d2:	2198      	movs	r1, #152	; 0x98
    41d4:	6a3a      	ldr	r2, [r7, #32]
    41d6:	505a      	str	r2, [r3, r1]

	*LPUART_p->PCC_reg = PCC_CLKCFG_CGC_MASK | PCC_CLKCFG_PCS(LPUARTHandler_CLKCFG_PCS);		// povoleni a vyber hodin
    41d8:	697b      	ldr	r3, [r7, #20]
    41da:	68db      	ldr	r3, [r3, #12]
    41dc:	68ba      	ldr	r2, [r7, #8]
    41de:	0611      	lsls	r1, r2, #24
    41e0:	22e0      	movs	r2, #224	; 0xe0
    41e2:	04d2      	lsls	r2, r2, #19
    41e4:	400a      	ands	r2, r1
    41e6:	2180      	movs	r1, #128	; 0x80
    41e8:	05c9      	lsls	r1, r1, #23
    41ea:	430a      	orrs	r2, r1
    41ec:	601a      	str	r2, [r3, #0]

	LPUART_p->regSet->BAUD = LPUART_BAUD_OSR(LPUARTHandler_BAUD_OSR);		// Set OSR and SBR registers to set baudrate
    41ee:	697b      	ldr	r3, [r7, #20]
    41f0:	685b      	ldr	r3, [r3, #4]
    41f2:	687a      	ldr	r2, [r7, #4]
    41f4:	0611      	lsls	r1, r2, #24
    41f6:	22f8      	movs	r2, #248	; 0xf8
    41f8:	0552      	lsls	r2, r2, #21
    41fa:	400a      	ands	r2, r1
    41fc:	611a      	str	r2, [r3, #16]
	LPUART_p->regSet->BAUD |= LPUART_BAUD_SBR(LPUARTHandler_BAUD_SBR);
    41fe:	697b      	ldr	r3, [r7, #20]
    4200:	685b      	ldr	r3, [r3, #4]
    4202:	697a      	ldr	r2, [r7, #20]
    4204:	6852      	ldr	r2, [r2, #4]
    4206:	6911      	ldr	r1, [r2, #16]
    4208:	683a      	ldr	r2, [r7, #0]
    420a:	04d2      	lsls	r2, r2, #19
    420c:	0cd2      	lsrs	r2, r2, #19
    420e:	430a      	orrs	r2, r1
    4210:	611a      	str	r2, [r3, #16]

	LPUART_p->regSet->CTRL |= LPUART_CTRL_TE_MASK | LPUART_CTRL_RE_MASK;		// Enable tx and rx
    4212:	697b      	ldr	r3, [r7, #20]
    4214:	685b      	ldr	r3, [r3, #4]
    4216:	697a      	ldr	r2, [r7, #20]
    4218:	6852      	ldr	r2, [r2, #4]
    421a:	6992      	ldr	r2, [r2, #24]
    421c:	21c0      	movs	r1, #192	; 0xc0
    421e:	0309      	lsls	r1, r1, #12
    4220:	430a      	orrs	r2, r1
    4222:	619a      	str	r2, [r3, #24]
	LPUART_p->regSet->CTRL |= LPUART_CTRL_RIE_MASK;								// Enable rx interrupt
    4224:	697b      	ldr	r3, [r7, #20]
    4226:	685b      	ldr	r3, [r3, #4]
    4228:	697a      	ldr	r2, [r7, #20]
    422a:	6852      	ldr	r2, [r2, #4]
    422c:	6992      	ldr	r2, [r2, #24]
    422e:	2180      	movs	r1, #128	; 0x80
    4230:	0389      	lsls	r1, r1, #14
    4232:	430a      	orrs	r2, r1
    4234:	619a      	str	r2, [r3, #24]

	NVIC_SetPriority(LPUART_p->IRQn, LPUARTHANDLER_IRQ_PRI);					// Set LPUARTX IRQ priority
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	7a1b      	ldrb	r3, [r3, #8]
    423a:	b25b      	sxtb	r3, r3
    423c:	2102      	movs	r1, #2
    423e:	0018      	movs	r0, r3
    4240:	f7ff ff1a 	bl	4078 <NVIC_SetPriority>
	NVIC_EnableIRQ(LPUART_p->IRQn);											// Enable LPUARTX IRQ
    4244:	697b      	ldr	r3, [r7, #20]
    4246:	7a1b      	ldrb	r3, [r3, #8]
    4248:	b25b      	sxtb	r3, r3
    424a:	0018      	movs	r0, r3
    424c:	f7ff fefe 	bl	404c <NVIC_EnableIRQ>
}
    4250:	46c0      	nop			; (mov r8, r8)
    4252:	46bd      	mov	sp, r7
    4254:	b006      	add	sp, #24
    4256:	bd80      	pop	{r7, pc}
    4258:	1fff88f4 	.word	0x1fff88f4

0000425c <LPUARTHandler_SendLine>:

LPUARTHandler_Res_t LPUARTHandler_SendLine(LPUARTHandler_Chann_t channel, char data[])
{
    425c:	b580      	push	{r7, lr}
    425e:	b084      	sub	sp, #16
    4260:	af00      	add	r7, sp, #0
    4262:	0002      	movs	r2, r0
    4264:	6039      	str	r1, [r7, #0]
    4266:	1dfb      	adds	r3, r7, #7
    4268:	701a      	strb	r2, [r3, #0]
	LPUARTHandler_Instance_t* LPUART_p = &LPUARTHandler_Instance[channel];
    426a:	1dfb      	adds	r3, r7, #7
    426c:	781b      	ldrb	r3, [r3, #0]
    426e:	229c      	movs	r2, #156	; 0x9c
    4270:	435a      	muls	r2, r3
    4272:	4b2a      	ldr	r3, [pc, #168]	; (431c <LPUARTHandler_SendLine+0xc0>)
    4274:	18d3      	adds	r3, r2, r3
    4276:	60bb      	str	r3, [r7, #8]
	uint16_t i = 0;
    4278:	230e      	movs	r3, #14
    427a:	18fb      	adds	r3, r7, r3
    427c:	2200      	movs	r2, #0
    427e:	801a      	strh	r2, [r3, #0]
	LPUARTHandler_Res_t res;

	if(!LPUART_p->blocking)
    4280:	68bb      	ldr	r3, [r7, #8]
    4282:	781b      	ldrb	r3, [r3, #0]
    4284:	2201      	movs	r2, #1
    4286:	4053      	eors	r3, r2
    4288:	b2db      	uxtb	r3, r3
    428a:	2b00      	cmp	r3, #0
    428c:	d03b      	beq.n	4306 <LPUARTHandler_SendLine+0xaa>
	{
		LPUART_p->blocking = true;
    428e:	68bb      	ldr	r3, [r7, #8]
    4290:	2201      	movs	r2, #1
    4292:	701a      	strb	r2, [r3, #0]
		while (data[i] != '\0' && i < LPUART_TX_BUFF_LEN)
    4294:	e011      	b.n	42ba <LPUARTHandler_SendLine+0x5e>
		{
			Queue_Enqueue(LPUART_p->queueBuffTX, &data[i]);
    4296:	68bb      	ldr	r3, [r7, #8]
    4298:	2294      	movs	r2, #148	; 0x94
    429a:	5898      	ldr	r0, [r3, r2]
    429c:	230e      	movs	r3, #14
    429e:	18fb      	adds	r3, r7, r3
    42a0:	881b      	ldrh	r3, [r3, #0]
    42a2:	683a      	ldr	r2, [r7, #0]
    42a4:	18d3      	adds	r3, r2, r3
    42a6:	0019      	movs	r1, r3
    42a8:	f000 f9e0 	bl	466c <Queue_Enqueue>
			i++;
    42ac:	230e      	movs	r3, #14
    42ae:	18fb      	adds	r3, r7, r3
    42b0:	881a      	ldrh	r2, [r3, #0]
    42b2:	230e      	movs	r3, #14
    42b4:	18fb      	adds	r3, r7, r3
    42b6:	3201      	adds	r2, #1
    42b8:	801a      	strh	r2, [r3, #0]
		while (data[i] != '\0' && i < LPUART_TX_BUFF_LEN)
    42ba:	230e      	movs	r3, #14
    42bc:	18fb      	adds	r3, r7, r3
    42be:	881b      	ldrh	r3, [r3, #0]
    42c0:	683a      	ldr	r2, [r7, #0]
    42c2:	18d3      	adds	r3, r2, r3
    42c4:	781b      	ldrb	r3, [r3, #0]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d004      	beq.n	42d4 <LPUARTHandler_SendLine+0x78>
    42ca:	230e      	movs	r3, #14
    42cc:	18fb      	adds	r3, r7, r3
    42ce:	881b      	ldrh	r3, [r3, #0]
    42d0:	2b3f      	cmp	r3, #63	; 0x3f
    42d2:	d9e0      	bls.n	4296 <LPUARTHandler_SendLine+0x3a>
		}

		Queue_Enqueue(LPUART_p->queueBuffTX, (void*)&LF);
    42d4:	68bb      	ldr	r3, [r7, #8]
    42d6:	2294      	movs	r2, #148	; 0x94
    42d8:	589b      	ldr	r3, [r3, r2]
    42da:	4a11      	ldr	r2, [pc, #68]	; (4320 <LPUARTHandler_SendLine+0xc4>)
    42dc:	0011      	movs	r1, r2
    42de:	0018      	movs	r0, r3
    42e0:	f000 f9c4 	bl	466c <Queue_Enqueue>

		LPUART_p->blocking = false;
    42e4:	68bb      	ldr	r3, [r7, #8]
    42e6:	2200      	movs	r2, #0
    42e8:	701a      	strb	r2, [r3, #0]
		LPUART_p->regSet->CTRL |= LPUART_CTRL_TIE_MASK;
    42ea:	68bb      	ldr	r3, [r7, #8]
    42ec:	685b      	ldr	r3, [r3, #4]
    42ee:	68ba      	ldr	r2, [r7, #8]
    42f0:	6852      	ldr	r2, [r2, #4]
    42f2:	6992      	ldr	r2, [r2, #24]
    42f4:	2180      	movs	r1, #128	; 0x80
    42f6:	0409      	lsls	r1, r1, #16
    42f8:	430a      	orrs	r2, r1
    42fa:	619a      	str	r2, [r3, #24]

		res = LPUARTHandler_Res_OK;
    42fc:	230d      	movs	r3, #13
    42fe:	18fb      	adds	r3, r7, r3
    4300:	2200      	movs	r2, #0
    4302:	701a      	strb	r2, [r3, #0]
    4304:	e003      	b.n	430e <LPUARTHandler_SendLine+0xb2>
	}
	else
	{
		res = LPUARTHandler_Res_Blocked;
    4306:	230d      	movs	r3, #13
    4308:	18fb      	adds	r3, r7, r3
    430a:	2201      	movs	r2, #1
    430c:	701a      	strb	r2, [r3, #0]
	}
	return res;
    430e:	230d      	movs	r3, #13
    4310:	18fb      	adds	r3, r7, r3
    4312:	781b      	ldrb	r3, [r3, #0]
}
    4314:	0018      	movs	r0, r3
    4316:	46bd      	mov	sp, r7
    4318:	b004      	add	sp, #16
    431a:	bd80      	pop	{r7, pc}
    431c:	1fff88f4 	.word	0x1fff88f4
    4320:	00005050 	.word	0x00005050

00004324 <LPUARTHandler_SendData>:

LPUARTHandler_Res_t LPUARTHandler_SendData(LPUARTHandler_Chann_t channel, void* data, uint16_t len)
{
    4324:	b580      	push	{r7, lr}
    4326:	b084      	sub	sp, #16
    4328:	af00      	add	r7, sp, #0
    432a:	6039      	str	r1, [r7, #0]
    432c:	0011      	movs	r1, r2
    432e:	1dfb      	adds	r3, r7, #7
    4330:	1c02      	adds	r2, r0, #0
    4332:	701a      	strb	r2, [r3, #0]
    4334:	1d3b      	adds	r3, r7, #4
    4336:	1c0a      	adds	r2, r1, #0
    4338:	801a      	strh	r2, [r3, #0]
	LPUARTHandler_Instance_t* LPUART_p = &LPUARTHandler_Instance[channel];
    433a:	1dfb      	adds	r3, r7, #7
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	229c      	movs	r2, #156	; 0x9c
    4340:	435a      	muls	r2, r3
    4342:	4b23      	ldr	r3, [pc, #140]	; (43d0 <LPUARTHandler_SendData+0xac>)
    4344:	18d3      	adds	r3, r2, r3
    4346:	60bb      	str	r3, [r7, #8]
	uint16_t i;
	LPUARTHandler_Res_t res;

	if(!LPUART_p->blocking)
    4348:	68bb      	ldr	r3, [r7, #8]
    434a:	781b      	ldrb	r3, [r3, #0]
    434c:	2201      	movs	r2, #1
    434e:	4053      	eors	r3, r2
    4350:	b2db      	uxtb	r3, r3
    4352:	2b00      	cmp	r3, #0
    4354:	d031      	beq.n	43ba <LPUARTHandler_SendData+0x96>
	{
		LPUART_p->blocking = true;
    4356:	68bb      	ldr	r3, [r7, #8]
    4358:	2201      	movs	r2, #1
    435a:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < len; i++)
    435c:	230e      	movs	r3, #14
    435e:	18fb      	adds	r3, r7, r3
    4360:	2200      	movs	r2, #0
    4362:	801a      	strh	r2, [r3, #0]
    4364:	e011      	b.n	438a <LPUARTHandler_SendData+0x66>
		{
			Queue_Enqueue(LPUART_p->queueBuffTX, &(((uint8_t *)data)[i]));
    4366:	68bb      	ldr	r3, [r7, #8]
    4368:	2294      	movs	r2, #148	; 0x94
    436a:	5898      	ldr	r0, [r3, r2]
    436c:	230e      	movs	r3, #14
    436e:	18fb      	adds	r3, r7, r3
    4370:	881b      	ldrh	r3, [r3, #0]
    4372:	683a      	ldr	r2, [r7, #0]
    4374:	18d3      	adds	r3, r2, r3
    4376:	0019      	movs	r1, r3
    4378:	f000 f978 	bl	466c <Queue_Enqueue>
		for (i = 0; i < len; i++)
    437c:	230e      	movs	r3, #14
    437e:	18fb      	adds	r3, r7, r3
    4380:	881a      	ldrh	r2, [r3, #0]
    4382:	230e      	movs	r3, #14
    4384:	18fb      	adds	r3, r7, r3
    4386:	3201      	adds	r2, #1
    4388:	801a      	strh	r2, [r3, #0]
    438a:	230e      	movs	r3, #14
    438c:	18fa      	adds	r2, r7, r3
    438e:	1d3b      	adds	r3, r7, #4
    4390:	8812      	ldrh	r2, [r2, #0]
    4392:	881b      	ldrh	r3, [r3, #0]
    4394:	429a      	cmp	r2, r3
    4396:	d3e6      	bcc.n	4366 <LPUARTHandler_SendData+0x42>
		}

		LPUART_p->blocking = false;
    4398:	68bb      	ldr	r3, [r7, #8]
    439a:	2200      	movs	r2, #0
    439c:	701a      	strb	r2, [r3, #0]
		LPUART_p->regSet->CTRL |= LPUART_CTRL_TIE_MASK;
    439e:	68bb      	ldr	r3, [r7, #8]
    43a0:	685b      	ldr	r3, [r3, #4]
    43a2:	68ba      	ldr	r2, [r7, #8]
    43a4:	6852      	ldr	r2, [r2, #4]
    43a6:	6992      	ldr	r2, [r2, #24]
    43a8:	2180      	movs	r1, #128	; 0x80
    43aa:	0409      	lsls	r1, r1, #16
    43ac:	430a      	orrs	r2, r1
    43ae:	619a      	str	r2, [r3, #24]

		res = LPUARTHandler_Res_OK;
    43b0:	230d      	movs	r3, #13
    43b2:	18fb      	adds	r3, r7, r3
    43b4:	2200      	movs	r2, #0
    43b6:	701a      	strb	r2, [r3, #0]
    43b8:	e003      	b.n	43c2 <LPUARTHandler_SendData+0x9e>
	}
	else
	{
		res = LPUARTHandler_Res_Blocked;
    43ba:	230d      	movs	r3, #13
    43bc:	18fb      	adds	r3, r7, r3
    43be:	2201      	movs	r2, #1
    43c0:	701a      	strb	r2, [r3, #0]
	}
	return res;
    43c2:	230d      	movs	r3, #13
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	781b      	ldrb	r3, [r3, #0]
}
    43c8:	0018      	movs	r0, r3
    43ca:	46bd      	mov	sp, r7
    43cc:	b004      	add	sp, #16
    43ce:	bd80      	pop	{r7, pc}
    43d0:	1fff88f4 	.word	0x1fff88f4

000043d4 <LPURTHandler_ReadLine>:

void LPURTHandler_ReadLine (LPUARTHandler_Chann_t channel, void* data, uint16_t maxLen, uint16_t recLen)
{
    43d4:	b590      	push	{r4, r7, lr}
    43d6:	b089      	sub	sp, #36	; 0x24
    43d8:	af00      	add	r7, sp, #0
    43da:	0004      	movs	r4, r0
    43dc:	60b9      	str	r1, [r7, #8]
    43de:	0010      	movs	r0, r2
    43e0:	0019      	movs	r1, r3
    43e2:	230f      	movs	r3, #15
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	1c22      	adds	r2, r4, #0
    43e8:	701a      	strb	r2, [r3, #0]
    43ea:	230c      	movs	r3, #12
    43ec:	18fb      	adds	r3, r7, r3
    43ee:	1c02      	adds	r2, r0, #0
    43f0:	801a      	strh	r2, [r3, #0]
    43f2:	1dbb      	adds	r3, r7, #6
    43f4:	1c0a      	adds	r2, r1, #0
    43f6:	801a      	strh	r2, [r3, #0]
	LPUARTHandler_Instance_t* LPUART_p = &LPUARTHandler_Instance[channel];
    43f8:	230f      	movs	r3, #15
    43fa:	18fb      	adds	r3, r7, r3
    43fc:	781b      	ldrb	r3, [r3, #0]
    43fe:	229c      	movs	r2, #156	; 0x9c
    4400:	435a      	muls	r2, r3
    4402:	4b29      	ldr	r3, [pc, #164]	; (44a8 <LPURTHandler_ReadLine+0xd4>)
    4404:	18d3      	adds	r3, r2, r3
    4406:	61bb      	str	r3, [r7, #24]
	uint16_t i;
	char rxByte;

	if (!LPUART_p->blocking)
    4408:	69bb      	ldr	r3, [r7, #24]
    440a:	781b      	ldrb	r3, [r3, #0]
    440c:	2201      	movs	r2, #1
    440e:	4053      	eors	r3, r2
    4410:	b2db      	uxtb	r3, r3
    4412:	2b00      	cmp	r3, #0
    4414:	d044      	beq.n	44a0 <LPURTHandler_ReadLine+0xcc>
	{
		LPUART_p->blocking = true;
    4416:	69bb      	ldr	r3, [r7, #24]
    4418:	2201      	movs	r2, #1
    441a:	701a      	strb	r2, [r3, #0]

		if (Queue_getUsedCount(LPUART_p->queueBuffRX) <= maxLen)
    441c:	69bb      	ldr	r3, [r7, #24]
    441e:	2290      	movs	r2, #144	; 0x90
    4420:	589b      	ldr	r3, [r3, r2]
    4422:	0018      	movs	r0, r3
    4424:	f000 fa02 	bl	482c <Queue_getUsedCount>
    4428:	0003      	movs	r3, r0
    442a:	001a      	movs	r2, r3
    442c:	230c      	movs	r3, #12
    442e:	18fb      	adds	r3, r7, r3
    4430:	881b      	ldrh	r3, [r3, #0]
    4432:	4293      	cmp	r3, r2
    4434:	d331      	bcc.n	449a <LPURTHandler_ReadLine+0xc6>
		{
			for (i = 0; i < maxLen; i++)
    4436:	231e      	movs	r3, #30
    4438:	18fb      	adds	r3, r7, r3
    443a:	2200      	movs	r2, #0
    443c:	801a      	strh	r2, [r3, #0]
    443e:	e020      	b.n	4482 <LPURTHandler_ReadLine+0xae>
			{
				if (Queue_Dequeue(LPUART_p->queueBuffRX, &rxByte) == Queue_Res_OK)
    4440:	69bb      	ldr	r3, [r7, #24]
    4442:	2290      	movs	r2, #144	; 0x90
    4444:	589b      	ldr	r3, [r3, r2]
    4446:	2217      	movs	r2, #23
    4448:	18ba      	adds	r2, r7, r2
    444a:	0011      	movs	r1, r2
    444c:	0018      	movs	r0, r3
    444e:	f000 f98b 	bl	4768 <Queue_Dequeue>
    4452:	1e03      	subs	r3, r0, #0
    4454:	d11e      	bne.n	4494 <LPURTHandler_ReadLine+0xc0>
				{
					if (rxByte != LF)
    4456:	2317      	movs	r3, #23
    4458:	18fb      	adds	r3, r7, r3
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	220a      	movs	r2, #10
    445e:	4293      	cmp	r3, r2
    4460:	d01a      	beq.n	4498 <LPURTHandler_ReadLine+0xc4>
					{
						((char*)data)[i] = rxByte;
    4462:	231e      	movs	r3, #30
    4464:	18fb      	adds	r3, r7, r3
    4466:	881b      	ldrh	r3, [r3, #0]
    4468:	68ba      	ldr	r2, [r7, #8]
    446a:	18d3      	adds	r3, r2, r3
    446c:	2217      	movs	r2, #23
    446e:	18ba      	adds	r2, r7, r2
    4470:	7812      	ldrb	r2, [r2, #0]
    4472:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < maxLen; i++)
    4474:	231e      	movs	r3, #30
    4476:	18fb      	adds	r3, r7, r3
    4478:	881a      	ldrh	r2, [r3, #0]
    447a:	231e      	movs	r3, #30
    447c:	18fb      	adds	r3, r7, r3
    447e:	3201      	adds	r2, #1
    4480:	801a      	strh	r2, [r3, #0]
    4482:	231e      	movs	r3, #30
    4484:	18fa      	adds	r2, r7, r3
    4486:	230c      	movs	r3, #12
    4488:	18fb      	adds	r3, r7, r3
    448a:	8812      	ldrh	r2, [r2, #0]
    448c:	881b      	ldrh	r3, [r3, #0]
    448e:	429a      	cmp	r2, r3
    4490:	d3d6      	bcc.n	4440 <LPURTHandler_ReadLine+0x6c>
    4492:	e002      	b.n	449a <LPURTHandler_ReadLine+0xc6>
					}

				}
				else
				{
					break;
    4494:	46c0      	nop			; (mov r8, r8)
    4496:	e000      	b.n	449a <LPURTHandler_ReadLine+0xc6>
						break;
    4498:	46c0      	nop			; (mov r8, r8)
		else
		{

		}

		LPUART_p->blocking = false;
    449a:	69bb      	ldr	r3, [r7, #24]
    449c:	2200      	movs	r2, #0
    449e:	701a      	strb	r2, [r3, #0]
	}
}
    44a0:	46c0      	nop			; (mov r8, r8)
    44a2:	46bd      	mov	sp, r7
    44a4:	b009      	add	sp, #36	; 0x24
    44a6:	bd90      	pop	{r4, r7, pc}
    44a8:	1fff88f4 	.word	0x1fff88f4

000044ac <LPUART_IRQHandler>:


static void LPUART_IRQHandler(LPUARTHandler_Chann_t channel)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b084      	sub	sp, #16
    44b0:	af00      	add	r7, sp, #0
    44b2:	0002      	movs	r2, r0
    44b4:	1dfb      	adds	r3, r7, #7
    44b6:	701a      	strb	r2, [r3, #0]
	LPUARTHandler_Instance_t* LPUART_p = &LPUARTHandler_Instance[channel];
    44b8:	1dfb      	adds	r3, r7, #7
    44ba:	781b      	ldrb	r3, [r3, #0]
    44bc:	229c      	movs	r2, #156	; 0x9c
    44be:	435a      	muls	r2, r3
    44c0:	4b2b      	ldr	r3, [pc, #172]	; (4570 <LPUART_IRQHandler+0xc4>)
    44c2:	18d3      	adds	r3, r2, r3
    44c4:	60fb      	str	r3, [r7, #12]

	if (LPUART_p->regSet->STAT & LPUART_STAT_RDRF_MASK)
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	685b      	ldr	r3, [r3, #4]
    44ca:	695a      	ldr	r2, [r3, #20]
    44cc:	2380      	movs	r3, #128	; 0x80
    44ce:	039b      	lsls	r3, r3, #14
    44d0:	4013      	ands	r3, r2
    44d2:	d020      	beq.n	4516 <LPUART_IRQHandler+0x6a>
	{
		uint8_t rxByte = LPUART_p->regSet->DATA;
    44d4:	68fb      	ldr	r3, [r7, #12]
    44d6:	685b      	ldr	r3, [r3, #4]
    44d8:	69db      	ldr	r3, [r3, #28]
    44da:	b2da      	uxtb	r2, r3
    44dc:	230b      	movs	r3, #11
    44de:	18fb      	adds	r3, r7, r3
    44e0:	701a      	strb	r2, [r3, #0]
		if(rxByte != LF)
    44e2:	230b      	movs	r3, #11
    44e4:	18fb      	adds	r3, r7, r3
    44e6:	781b      	ldrb	r3, [r3, #0]
    44e8:	220a      	movs	r2, #10
    44ea:	4293      	cmp	r3, r2
    44ec:	d00e      	beq.n	450c <LPUART_IRQHandler+0x60>
		{
			Queue_Enqueue(LPUART_p->queueBuffRX, &rxByte);
    44ee:	68fb      	ldr	r3, [r7, #12]
    44f0:	2290      	movs	r2, #144	; 0x90
    44f2:	589b      	ldr	r3, [r3, r2]
    44f4:	220b      	movs	r2, #11
    44f6:	18ba      	adds	r2, r7, r2
    44f8:	0011      	movs	r1, r2
    44fa:	0018      	movs	r0, r3
    44fc:	f000 f8b6 	bl	466c <Queue_Enqueue>
			LPUART_p->event(LPUARTHandler_Event_ReceiveByte);
    4500:	68fb      	ldr	r3, [r7, #12]
    4502:	2298      	movs	r2, #152	; 0x98
    4504:	589b      	ldr	r3, [r3, r2]
    4506:	2001      	movs	r0, #1
    4508:	4798      	blx	r3
    450a:	e004      	b.n	4516 <LPUART_IRQHandler+0x6a>
		}
		else
		{
			LPUART_p->event(LPUARTHandler_Event_ReceiveLine);
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	2298      	movs	r2, #152	; 0x98
    4510:	589b      	ldr	r3, [r3, r2]
    4512:	2000      	movs	r0, #0
    4514:	4798      	blx	r3
		}
	}

	if ((LPUART_p->regSet->STAT & LPUART_STAT_TDRE_MASK) && (LPUART_p->regSet->CTRL & LPUART_CTRL_TIE_MASK))
    4516:	68fb      	ldr	r3, [r7, #12]
    4518:	685b      	ldr	r3, [r3, #4]
    451a:	695a      	ldr	r2, [r3, #20]
    451c:	2380      	movs	r3, #128	; 0x80
    451e:	041b      	lsls	r3, r3, #16
    4520:	4013      	ands	r3, r2
    4522:	d020      	beq.n	4566 <LPUART_IRQHandler+0xba>
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	685b      	ldr	r3, [r3, #4]
    4528:	699a      	ldr	r2, [r3, #24]
    452a:	2380      	movs	r3, #128	; 0x80
    452c:	041b      	lsls	r3, r3, #16
    452e:	4013      	ands	r3, r2
    4530:	d019      	beq.n	4566 <LPUART_IRQHandler+0xba>
	{
		uint8_t txByte;
		if(Queue_Dequeue(LPUART_p->queueBuffTX, &txByte) == Queue_Res_OK)
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	2294      	movs	r2, #148	; 0x94
    4536:	589b      	ldr	r3, [r3, r2]
    4538:	220a      	movs	r2, #10
    453a:	18ba      	adds	r2, r7, r2
    453c:	0011      	movs	r1, r2
    453e:	0018      	movs	r0, r3
    4540:	f000 f912 	bl	4768 <Queue_Dequeue>
    4544:	1e03      	subs	r3, r0, #0
    4546:	d106      	bne.n	4556 <LPUART_IRQHandler+0xaa>
		{
			LPUART_p->regSet->DATA = txByte;
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	685b      	ldr	r3, [r3, #4]
    454c:	220a      	movs	r2, #10
    454e:	18ba      	adds	r2, r7, r2
    4550:	7812      	ldrb	r2, [r2, #0]
    4552:	61da      	str	r2, [r3, #28]
		else
		{
			LPUART_p->regSet->CTRL &= ~LPUART_CTRL_TIE_MASK;
		}
	}
}
    4554:	e007      	b.n	4566 <LPUART_IRQHandler+0xba>
			LPUART_p->regSet->CTRL &= ~LPUART_CTRL_TIE_MASK;
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	685b      	ldr	r3, [r3, #4]
    455a:	68fa      	ldr	r2, [r7, #12]
    455c:	6852      	ldr	r2, [r2, #4]
    455e:	6992      	ldr	r2, [r2, #24]
    4560:	4904      	ldr	r1, [pc, #16]	; (4574 <LPUART_IRQHandler+0xc8>)
    4562:	400a      	ands	r2, r1
    4564:	619a      	str	r2, [r3, #24]
}
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	46bd      	mov	sp, r7
    456a:	b004      	add	sp, #16
    456c:	bd80      	pop	{r7, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	1fff88f4 	.word	0x1fff88f4
    4574:	ff7fffff 	.word	0xff7fffff

00004578 <Queue_Init>:

/*****************************functions*****************************/
/////////////////////////////////////////////////////////////////////

void Queue_Init(QueueHandle_t* handle, void* buffer, uint16_t size, Queue_DataType_t type)
{
    4578:	b580      	push	{r7, lr}
    457a:	b086      	sub	sp, #24
    457c:	af00      	add	r7, sp, #0
    457e:	60f8      	str	r0, [r7, #12]
    4580:	60b9      	str	r1, [r7, #8]
    4582:	0019      	movs	r1, r3
    4584:	1dbb      	adds	r3, r7, #6
    4586:	801a      	strh	r2, [r3, #0]
    4588:	1d7b      	adds	r3, r7, #5
    458a:	1c0a      	adds	r2, r1, #0
    458c:	701a      	strb	r2, [r3, #0]
	if (QueuesCount < QUEUE_MAXCOUNT)
    458e:	4b35      	ldr	r3, [pc, #212]	; (4664 <Queue_Init+0xec>)
    4590:	781b      	ldrb	r3, [r3, #0]
    4592:	2b13      	cmp	r3, #19
    4594:	d862      	bhi.n	465c <Queue_Init+0xe4>
	{
		Queue_Instance_t* queue_p = &Queue_Instances[QueuesCount];
    4596:	4b33      	ldr	r3, [pc, #204]	; (4664 <Queue_Init+0xec>)
    4598:	781b      	ldrb	r3, [r3, #0]
    459a:	001a      	movs	r2, r3
    459c:	0013      	movs	r3, r2
    459e:	005b      	lsls	r3, r3, #1
    45a0:	189b      	adds	r3, r3, r2
    45a2:	009b      	lsls	r3, r3, #2
    45a4:	4a30      	ldr	r2, [pc, #192]	; (4668 <Queue_Init+0xf0>)
    45a6:	189b      	adds	r3, r3, r2
    45a8:	617b      	str	r3, [r7, #20]
		QueuesCount++;
    45aa:	4b2e      	ldr	r3, [pc, #184]	; (4664 <Queue_Init+0xec>)
    45ac:	781b      	ldrb	r3, [r3, #0]
    45ae:	3301      	adds	r3, #1
    45b0:	b2da      	uxtb	r2, r3
    45b2:	4b2c      	ldr	r3, [pc, #176]	; (4664 <Queue_Init+0xec>)
    45b4:	701a      	strb	r2, [r3, #0]

		Queue_Instances[QueuesCount].buffer = buffer;
    45b6:	4b2b      	ldr	r3, [pc, #172]	; (4664 <Queue_Init+0xec>)
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	0019      	movs	r1, r3
    45bc:	4a2a      	ldr	r2, [pc, #168]	; (4668 <Queue_Init+0xf0>)
    45be:	000b      	movs	r3, r1
    45c0:	005b      	lsls	r3, r3, #1
    45c2:	185b      	adds	r3, r3, r1
    45c4:	009b      	lsls	r3, r3, #2
    45c6:	68b9      	ldr	r1, [r7, #8]
    45c8:	5099      	str	r1, [r3, r2]
		Queue_Instances[QueuesCount].size = size;
    45ca:	4b26      	ldr	r3, [pc, #152]	; (4664 <Queue_Init+0xec>)
    45cc:	781b      	ldrb	r3, [r3, #0]
    45ce:	0019      	movs	r1, r3
    45d0:	4a25      	ldr	r2, [pc, #148]	; (4668 <Queue_Init+0xf0>)
    45d2:	000b      	movs	r3, r1
    45d4:	005b      	lsls	r3, r3, #1
    45d6:	185b      	adds	r3, r3, r1
    45d8:	009b      	lsls	r3, r3, #2
    45da:	18d3      	adds	r3, r2, r3
    45dc:	3304      	adds	r3, #4
    45de:	1dba      	adds	r2, r7, #6
    45e0:	8812      	ldrh	r2, [r2, #0]
    45e2:	801a      	strh	r2, [r3, #0]
		Queue_Instances[QueuesCount].used = 0;
    45e4:	4b1f      	ldr	r3, [pc, #124]	; (4664 <Queue_Init+0xec>)
    45e6:	781b      	ldrb	r3, [r3, #0]
    45e8:	0019      	movs	r1, r3
    45ea:	4a1f      	ldr	r2, [pc, #124]	; (4668 <Queue_Init+0xf0>)
    45ec:	000b      	movs	r3, r1
    45ee:	005b      	lsls	r3, r3, #1
    45f0:	185b      	adds	r3, r3, r1
    45f2:	009b      	lsls	r3, r3, #2
    45f4:	18d3      	adds	r3, r2, r3
    45f6:	3306      	adds	r3, #6
    45f8:	2200      	movs	r2, #0
    45fa:	801a      	strh	r2, [r3, #0]
		Queue_Instances[QueuesCount].start = 0;
    45fc:	4b19      	ldr	r3, [pc, #100]	; (4664 <Queue_Init+0xec>)
    45fe:	781b      	ldrb	r3, [r3, #0]
    4600:	0019      	movs	r1, r3
    4602:	4a19      	ldr	r2, [pc, #100]	; (4668 <Queue_Init+0xf0>)
    4604:	000b      	movs	r3, r1
    4606:	005b      	lsls	r3, r3, #1
    4608:	185b      	adds	r3, r3, r1
    460a:	009b      	lsls	r3, r3, #2
    460c:	18d3      	adds	r3, r2, r3
    460e:	3308      	adds	r3, #8
    4610:	2200      	movs	r2, #0
    4612:	801a      	strh	r2, [r3, #0]
		Queue_Instances[QueuesCount].mutex = false;
    4614:	4b13      	ldr	r3, [pc, #76]	; (4664 <Queue_Init+0xec>)
    4616:	781b      	ldrb	r3, [r3, #0]
    4618:	0019      	movs	r1, r3
    461a:	4a13      	ldr	r2, [pc, #76]	; (4668 <Queue_Init+0xf0>)
    461c:	000b      	movs	r3, r1
    461e:	005b      	lsls	r3, r3, #1
    4620:	185b      	adds	r3, r3, r1
    4622:	009b      	lsls	r3, r3, #2
    4624:	18d3      	adds	r3, r2, r3
    4626:	330a      	adds	r3, #10
    4628:	2200      	movs	r2, #0
    462a:	701a      	strb	r2, [r3, #0]
		Queue_Instances[QueuesCount].type = type;
    462c:	4b0d      	ldr	r3, [pc, #52]	; (4664 <Queue_Init+0xec>)
    462e:	781b      	ldrb	r3, [r3, #0]
    4630:	0019      	movs	r1, r3
    4632:	4a0d      	ldr	r2, [pc, #52]	; (4668 <Queue_Init+0xf0>)
    4634:	000b      	movs	r3, r1
    4636:	005b      	lsls	r3, r3, #1
    4638:	185b      	adds	r3, r3, r1
    463a:	009b      	lsls	r3, r3, #2
    463c:	18d3      	adds	r3, r2, r3
    463e:	330b      	adds	r3, #11
    4640:	1d7a      	adds	r2, r7, #5
    4642:	7812      	ldrb	r2, [r2, #0]
    4644:	701a      	strb	r2, [r3, #0]

		*handle = (QueueHandle_t)&Queue_Instances[QueuesCount];
    4646:	4b07      	ldr	r3, [pc, #28]	; (4664 <Queue_Init+0xec>)
    4648:	781b      	ldrb	r3, [r3, #0]
    464a:	001a      	movs	r2, r3
    464c:	0013      	movs	r3, r2
    464e:	005b      	lsls	r3, r3, #1
    4650:	189b      	adds	r3, r3, r2
    4652:	009b      	lsls	r3, r3, #2
    4654:	4a04      	ldr	r2, [pc, #16]	; (4668 <Queue_Init+0xf0>)
    4656:	189a      	adds	r2, r3, r2
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	601a      	str	r2, [r3, #0]

	}
}
    465c:	46c0      	nop			; (mov r8, r8)
    465e:	46bd      	mov	sp, r7
    4660:	b006      	add	sp, #24
    4662:	bd80      	pop	{r7, pc}
    4664:	1fff8c7c 	.word	0x1fff8c7c
    4668:	1fff8b8c 	.word	0x1fff8b8c

0000466c <Queue_Enqueue>:

Queue_Res_t Queue_Enqueue(QueueHandle_t handle, void* element)
{
    466c:	b590      	push	{r4, r7, lr}
    466e:	b087      	sub	sp, #28
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	6039      	str	r1, [r7, #0]
	Queue_Instance_t* queue_p = (Queue_Instance_t*)handle;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	613b      	str	r3, [r7, #16]
	Queue_Res_t res;

	if (!queue_p->mutex)
    467a:	693b      	ldr	r3, [r7, #16]
    467c:	7a9b      	ldrb	r3, [r3, #10]
    467e:	2201      	movs	r2, #1
    4680:	4053      	eors	r3, r2
    4682:	b2db      	uxtb	r3, r3
    4684:	2b00      	cmp	r3, #0
    4686:	d062      	beq.n	474e <Queue_Enqueue+0xe2>
	{
		queue_p->mutex = true;
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	2201      	movs	r2, #1
    468c:	729a      	strb	r2, [r3, #10]

		if (queue_p->used < queue_p->size)
    468e:	693b      	ldr	r3, [r7, #16]
    4690:	88da      	ldrh	r2, [r3, #6]
    4692:	693b      	ldr	r3, [r7, #16]
    4694:	889b      	ldrh	r3, [r3, #4]
    4696:	429a      	cmp	r2, r3
    4698:	d251      	bcs.n	473e <Queue_Enqueue+0xd2>
		{
			uint16_t nextPos = (queue_p->start + queue_p->used)%queue_p->size;
    469a:	693b      	ldr	r3, [r7, #16]
    469c:	891b      	ldrh	r3, [r3, #8]
    469e:	001a      	movs	r2, r3
    46a0:	693b      	ldr	r3, [r7, #16]
    46a2:	88db      	ldrh	r3, [r3, #6]
    46a4:	18d2      	adds	r2, r2, r3
    46a6:	693b      	ldr	r3, [r7, #16]
    46a8:	889b      	ldrh	r3, [r3, #4]
    46aa:	0019      	movs	r1, r3
    46ac:	0010      	movs	r0, r2
    46ae:	f7fc f81f 	bl	6f0 <__aeabi_idivmod>
    46b2:	000b      	movs	r3, r1
    46b4:	001a      	movs	r2, r3
    46b6:	230e      	movs	r3, #14
    46b8:	18fb      	adds	r3, r7, r3
    46ba:	801a      	strh	r2, [r3, #0]
			switch (queue_p->type)
    46bc:	693b      	ldr	r3, [r7, #16]
    46be:	7adb      	ldrb	r3, [r3, #11]
    46c0:	2b0a      	cmp	r3, #10
    46c2:	d831      	bhi.n	4728 <Queue_Enqueue+0xbc>
    46c4:	009a      	lsls	r2, r3, #2
    46c6:	4b27      	ldr	r3, [pc, #156]	; (4764 <Queue_Enqueue+0xf8>)
    46c8:	18d3      	adds	r3, r2, r3
    46ca:	681b      	ldr	r3, [r3, #0]
    46cc:	469f      	mov	pc, r3
			{
			case Queue_DataType_char:
			case Queue_DataType_int8:
			case Queue_DataType_uint8:
				((uint8_t*)queue_p->buffer)[nextPos] = *(uint8_t*)element;
    46ce:	693b      	ldr	r3, [r7, #16]
    46d0:	681a      	ldr	r2, [r3, #0]
    46d2:	230e      	movs	r3, #14
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	881b      	ldrh	r3, [r3, #0]
    46d8:	18d3      	adds	r3, r2, r3
    46da:	683a      	ldr	r2, [r7, #0]
    46dc:	7812      	ldrb	r2, [r2, #0]
    46de:	701a      	strb	r2, [r3, #0]
				break;
    46e0:	e022      	b.n	4728 <Queue_Enqueue+0xbc>
			case Queue_DataType_int16:
			case Queue_DataType_uint16:
				((uint16_t*)queue_p->buffer)[nextPos] = *(uint16_t*)element;
    46e2:	693b      	ldr	r3, [r7, #16]
    46e4:	681a      	ldr	r2, [r3, #0]
    46e6:	230e      	movs	r3, #14
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	881b      	ldrh	r3, [r3, #0]
    46ec:	005b      	lsls	r3, r3, #1
    46ee:	18d3      	adds	r3, r2, r3
    46f0:	683a      	ldr	r2, [r7, #0]
    46f2:	8812      	ldrh	r2, [r2, #0]
    46f4:	801a      	strh	r2, [r3, #0]
				break;
    46f6:	e017      	b.n	4728 <Queue_Enqueue+0xbc>
			case Queue_DataType_float:
			case Queue_DataType_int32:
			case Queue_DataType_uint32:
				((uint32_t*)queue_p->buffer)[nextPos] = *(uint32_t*)element;
    46f8:	693b      	ldr	r3, [r7, #16]
    46fa:	681a      	ldr	r2, [r3, #0]
    46fc:	230e      	movs	r3, #14
    46fe:	18fb      	adds	r3, r7, r3
    4700:	881b      	ldrh	r3, [r3, #0]
    4702:	009b      	lsls	r3, r3, #2
    4704:	18d3      	adds	r3, r2, r3
    4706:	683a      	ldr	r2, [r7, #0]
    4708:	6812      	ldr	r2, [r2, #0]
    470a:	601a      	str	r2, [r3, #0]
				break;
    470c:	e00c      	b.n	4728 <Queue_Enqueue+0xbc>
			case Queue_DataType_double:
			case Queue_DataType_int64:
			case Queue_DataType_uint64:
				((uint64_t*)queue_p->buffer)[nextPos] = *(uint64_t*)element;
    470e:	693b      	ldr	r3, [r7, #16]
    4710:	681a      	ldr	r2, [r3, #0]
    4712:	230e      	movs	r3, #14
    4714:	18fb      	adds	r3, r7, r3
    4716:	881b      	ldrh	r3, [r3, #0]
    4718:	00db      	lsls	r3, r3, #3
    471a:	18d2      	adds	r2, r2, r3
    471c:	683b      	ldr	r3, [r7, #0]
    471e:	685c      	ldr	r4, [r3, #4]
    4720:	681b      	ldr	r3, [r3, #0]
    4722:	6013      	str	r3, [r2, #0]
    4724:	6054      	str	r4, [r2, #4]
				break;
    4726:	46c0      	nop			; (mov r8, r8)
			}

			queue_p->used++;
    4728:	693b      	ldr	r3, [r7, #16]
    472a:	88db      	ldrh	r3, [r3, #6]
    472c:	3301      	adds	r3, #1
    472e:	b29a      	uxth	r2, r3
    4730:	693b      	ldr	r3, [r7, #16]
    4732:	80da      	strh	r2, [r3, #6]
			res = Queue_Res_OK;
    4734:	2317      	movs	r3, #23
    4736:	18fb      	adds	r3, r7, r3
    4738:	2200      	movs	r2, #0
    473a:	701a      	strb	r2, [r3, #0]
    473c:	e003      	b.n	4746 <Queue_Enqueue+0xda>
		}
		else
		{
			res = Queue_Res_Full;
    473e:	2317      	movs	r3, #23
    4740:	18fb      	adds	r3, r7, r3
    4742:	2201      	movs	r2, #1
    4744:	701a      	strb	r2, [r3, #0]
		}
		queue_p->mutex = false;
    4746:	693b      	ldr	r3, [r7, #16]
    4748:	2200      	movs	r2, #0
    474a:	729a      	strb	r2, [r3, #10]
    474c:	e003      	b.n	4756 <Queue_Enqueue+0xea>
	}
	else
	{
		res = Queue_Res_Locked;
    474e:	2317      	movs	r3, #23
    4750:	18fb      	adds	r3, r7, r3
    4752:	2203      	movs	r2, #3
    4754:	701a      	strb	r2, [r3, #0]
	}
	return res;
    4756:	2317      	movs	r3, #23
    4758:	18fb      	adds	r3, r7, r3
    475a:	781b      	ldrb	r3, [r3, #0]
}
    475c:	0018      	movs	r0, r3
    475e:	46bd      	mov	sp, r7
    4760:	b007      	add	sp, #28
    4762:	bd90      	pop	{r4, r7, pc}
    4764:	00005054 	.word	0x00005054

00004768 <Queue_Dequeue>:

Queue_Res_t Queue_Dequeue(QueueHandle_t handle, void* item)
{
    4768:	b580      	push	{r7, lr}
    476a:	b084      	sub	sp, #16
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
    4770:	6039      	str	r1, [r7, #0]
	Queue_Instance_t* queue_p = (Queue_Instance_t*)handle;
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	60bb      	str	r3, [r7, #8]
	Queue_Res_t res;

	if(!queue_p->mutex)
    4776:	68bb      	ldr	r3, [r7, #8]
    4778:	7a9b      	ldrb	r3, [r3, #10]
    477a:	2201      	movs	r2, #1
    477c:	4053      	eors	r3, r2
    477e:	b2db      	uxtb	r3, r3
    4780:	2b00      	cmp	r3, #0
    4782:	d046      	beq.n	4812 <Queue_Dequeue+0xaa>
	{
		queue_p->mutex = true;
    4784:	68bb      	ldr	r3, [r7, #8]
    4786:	2201      	movs	r2, #1
    4788:	729a      	strb	r2, [r3, #10]

		if(queue_p->used > 0)
    478a:	68bb      	ldr	r3, [r7, #8]
    478c:	88db      	ldrh	r3, [r3, #6]
    478e:	2b00      	cmp	r3, #0
    4790:	d037      	beq.n	4802 <Queue_Dequeue+0x9a>
		{
			switch (queue_p->type)
    4792:	68bb      	ldr	r3, [r7, #8]
    4794:	7adb      	ldrb	r3, [r3, #11]
    4796:	2b0a      	cmp	r3, #10
    4798:	d80e      	bhi.n	47b8 <Queue_Dequeue+0x50>
    479a:	009a      	lsls	r2, r3, #2
    479c:	4b22      	ldr	r3, [pc, #136]	; (4828 <Queue_Dequeue+0xc0>)
    479e:	18d3      	adds	r3, r2, r3
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	469f      	mov	pc, r3
			{
			case Queue_DataType_char:
			case Queue_DataType_int8:
			case Queue_DataType_uint8:
				*((uint8_t*)item) = ((uint8_t*)queue_p->buffer)[queue_p->start];
    47a4:	68bb      	ldr	r3, [r7, #8]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	68ba      	ldr	r2, [r7, #8]
    47aa:	8912      	ldrh	r2, [r2, #8]
    47ac:	189b      	adds	r3, r3, r2
    47ae:	781a      	ldrb	r2, [r3, #0]
    47b0:	683b      	ldr	r3, [r7, #0]
    47b2:	701a      	strb	r2, [r3, #0]
				break;
    47b4:	e000      	b.n	47b8 <Queue_Dequeue+0x50>
				break;
			case Queue_DataType_double:
			case Queue_DataType_int64:
			case Queue_DataType_uint64:

				break;
    47b6:	46c0      	nop			; (mov r8, r8)
			}
			queue_p->used -= 1;
    47b8:	68bb      	ldr	r3, [r7, #8]
    47ba:	88db      	ldrh	r3, [r3, #6]
    47bc:	3b01      	subs	r3, #1
    47be:	b29a      	uxth	r2, r3
    47c0:	68bb      	ldr	r3, [r7, #8]
    47c2:	80da      	strh	r2, [r3, #6]
			if (queue_p->used == 0)
    47c4:	68bb      	ldr	r3, [r7, #8]
    47c6:	88db      	ldrh	r3, [r3, #6]
    47c8:	2b00      	cmp	r3, #0
    47ca:	d103      	bne.n	47d4 <Queue_Dequeue+0x6c>
			{
				queue_p->start = 0;
    47cc:	68bb      	ldr	r3, [r7, #8]
    47ce:	2200      	movs	r2, #0
    47d0:	811a      	strh	r2, [r3, #8]
    47d2:	e011      	b.n	47f8 <Queue_Dequeue+0x90>
			}
			else
			{
				queue_p->start = (queue_p->start + (uint16_t)1);
    47d4:	68bb      	ldr	r3, [r7, #8]
    47d6:	891b      	ldrh	r3, [r3, #8]
    47d8:	3301      	adds	r3, #1
    47da:	b29a      	uxth	r2, r3
    47dc:	68bb      	ldr	r3, [r7, #8]
    47de:	811a      	strh	r2, [r3, #8]
				queue_p->start = queue_p->start % queue_p->size;
    47e0:	68bb      	ldr	r3, [r7, #8]
    47e2:	891a      	ldrh	r2, [r3, #8]
    47e4:	68bb      	ldr	r3, [r7, #8]
    47e6:	889b      	ldrh	r3, [r3, #4]
    47e8:	0019      	movs	r1, r3
    47ea:	0010      	movs	r0, r2
    47ec:	f7fb fe96 	bl	51c <__aeabi_uidivmod>
    47f0:	000b      	movs	r3, r1
    47f2:	b29a      	uxth	r2, r3
    47f4:	68bb      	ldr	r3, [r7, #8]
    47f6:	811a      	strh	r2, [r3, #8]
			}
			res = Queue_Res_OK;
    47f8:	230f      	movs	r3, #15
    47fa:	18fb      	adds	r3, r7, r3
    47fc:	2200      	movs	r2, #0
    47fe:	701a      	strb	r2, [r3, #0]
    4800:	e003      	b.n	480a <Queue_Dequeue+0xa2>
		}
		else
		{
			res = Queue_Res_Empty;
    4802:	230f      	movs	r3, #15
    4804:	18fb      	adds	r3, r7, r3
    4806:	2202      	movs	r2, #2
    4808:	701a      	strb	r2, [r3, #0]
		}
		queue_p->mutex = false;
    480a:	68bb      	ldr	r3, [r7, #8]
    480c:	2200      	movs	r2, #0
    480e:	729a      	strb	r2, [r3, #10]
    4810:	e003      	b.n	481a <Queue_Dequeue+0xb2>
	}
	else
	{
		res = Queue_Res_Locked;
    4812:	230f      	movs	r3, #15
    4814:	18fb      	adds	r3, r7, r3
    4816:	2203      	movs	r2, #3
    4818:	701a      	strb	r2, [r3, #0]
	}
	return res;
    481a:	230f      	movs	r3, #15
    481c:	18fb      	adds	r3, r7, r3
    481e:	781b      	ldrb	r3, [r3, #0]
}
    4820:	0018      	movs	r0, r3
    4822:	46bd      	mov	sp, r7
    4824:	b004      	add	sp, #16
    4826:	bd80      	pop	{r7, pc}
    4828:	00005080 	.word	0x00005080

0000482c <Queue_getUsedCount>:

uint16_t Queue_getUsedCount(QueueHandle_t handle)
{
    482c:	b580      	push	{r7, lr}
    482e:	b084      	sub	sp, #16
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
	Queue_Instance_t* queue_p = (Queue_Instance_t*)handle;
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	60fb      	str	r3, [r7, #12]
	return queue_p->used;
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	88db      	ldrh	r3, [r3, #6]
}
    483c:	0018      	movs	r0, r3
    483e:	46bd      	mov	sp, r7
    4840:	b004      	add	sp, #16
    4842:	bd80      	pop	{r7, pc}

00004844 <NVIC_EnableIRQ>:
{
    4844:	b580      	push	{r7, lr}
    4846:	b082      	sub	sp, #8
    4848:	af00      	add	r7, sp, #0
    484a:	0002      	movs	r2, r0
    484c:	1dfb      	adds	r3, r7, #7
    484e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4850:	4b06      	ldr	r3, [pc, #24]	; (486c <NVIC_EnableIRQ+0x28>)
    4852:	1dfa      	adds	r2, r7, #7
    4854:	7812      	ldrb	r2, [r2, #0]
    4856:	0011      	movs	r1, r2
    4858:	221f      	movs	r2, #31
    485a:	400a      	ands	r2, r1
    485c:	2101      	movs	r1, #1
    485e:	4091      	lsls	r1, r2
    4860:	000a      	movs	r2, r1
    4862:	601a      	str	r2, [r3, #0]
}
    4864:	46c0      	nop			; (mov r8, r8)
    4866:	46bd      	mov	sp, r7
    4868:	b002      	add	sp, #8
    486a:	bd80      	pop	{r7, pc}
    486c:	e000e100 	.word	0xe000e100

00004870 <NVIC_SetPriority>:
{
    4870:	b5b0      	push	{r4, r5, r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	0002      	movs	r2, r0
    4878:	6039      	str	r1, [r7, #0]
    487a:	1dfb      	adds	r3, r7, #7
    487c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    487e:	1dfb      	adds	r3, r7, #7
    4880:	781b      	ldrb	r3, [r3, #0]
    4882:	2b7f      	cmp	r3, #127	; 0x7f
    4884:	d932      	bls.n	48ec <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4886:	4c2f      	ldr	r4, [pc, #188]	; (4944 <NVIC_SetPriority+0xd4>)
    4888:	1dfb      	adds	r3, r7, #7
    488a:	781b      	ldrb	r3, [r3, #0]
    488c:	001a      	movs	r2, r3
    488e:	230f      	movs	r3, #15
    4890:	4013      	ands	r3, r2
    4892:	3b08      	subs	r3, #8
    4894:	0899      	lsrs	r1, r3, #2
    4896:	4a2b      	ldr	r2, [pc, #172]	; (4944 <NVIC_SetPriority+0xd4>)
    4898:	1dfb      	adds	r3, r7, #7
    489a:	781b      	ldrb	r3, [r3, #0]
    489c:	0018      	movs	r0, r3
    489e:	230f      	movs	r3, #15
    48a0:	4003      	ands	r3, r0
    48a2:	3b08      	subs	r3, #8
    48a4:	089b      	lsrs	r3, r3, #2
    48a6:	3306      	adds	r3, #6
    48a8:	009b      	lsls	r3, r3, #2
    48aa:	18d3      	adds	r3, r2, r3
    48ac:	3304      	adds	r3, #4
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	1dfa      	adds	r2, r7, #7
    48b2:	7812      	ldrb	r2, [r2, #0]
    48b4:	0010      	movs	r0, r2
    48b6:	2203      	movs	r2, #3
    48b8:	4002      	ands	r2, r0
    48ba:	00d2      	lsls	r2, r2, #3
    48bc:	20ff      	movs	r0, #255	; 0xff
    48be:	4090      	lsls	r0, r2
    48c0:	0002      	movs	r2, r0
    48c2:	43d2      	mvns	r2, r2
    48c4:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    48c6:	683b      	ldr	r3, [r7, #0]
    48c8:	019b      	lsls	r3, r3, #6
    48ca:	20ff      	movs	r0, #255	; 0xff
    48cc:	4018      	ands	r0, r3
    48ce:	1dfb      	adds	r3, r7, #7
    48d0:	781b      	ldrb	r3, [r3, #0]
    48d2:	001d      	movs	r5, r3
    48d4:	2303      	movs	r3, #3
    48d6:	402b      	ands	r3, r5
    48d8:	00db      	lsls	r3, r3, #3
    48da:	4098      	lsls	r0, r3
    48dc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    48de:	431a      	orrs	r2, r3
    48e0:	1d8b      	adds	r3, r1, #6
    48e2:	009b      	lsls	r3, r3, #2
    48e4:	18e3      	adds	r3, r4, r3
    48e6:	3304      	adds	r3, #4
    48e8:	601a      	str	r2, [r3, #0]
}
    48ea:	e027      	b.n	493c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    48ec:	4c16      	ldr	r4, [pc, #88]	; (4948 <NVIC_SetPriority+0xd8>)
    48ee:	1dfb      	adds	r3, r7, #7
    48f0:	781b      	ldrb	r3, [r3, #0]
    48f2:	b25b      	sxtb	r3, r3
    48f4:	089b      	lsrs	r3, r3, #2
    48f6:	4914      	ldr	r1, [pc, #80]	; (4948 <NVIC_SetPriority+0xd8>)
    48f8:	1dfa      	adds	r2, r7, #7
    48fa:	7812      	ldrb	r2, [r2, #0]
    48fc:	b252      	sxtb	r2, r2
    48fe:	0892      	lsrs	r2, r2, #2
    4900:	32c0      	adds	r2, #192	; 0xc0
    4902:	0092      	lsls	r2, r2, #2
    4904:	5852      	ldr	r2, [r2, r1]
    4906:	1df9      	adds	r1, r7, #7
    4908:	7809      	ldrb	r1, [r1, #0]
    490a:	0008      	movs	r0, r1
    490c:	2103      	movs	r1, #3
    490e:	4001      	ands	r1, r0
    4910:	00c9      	lsls	r1, r1, #3
    4912:	20ff      	movs	r0, #255	; 0xff
    4914:	4088      	lsls	r0, r1
    4916:	0001      	movs	r1, r0
    4918:	43c9      	mvns	r1, r1
    491a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    491c:	683a      	ldr	r2, [r7, #0]
    491e:	0192      	lsls	r2, r2, #6
    4920:	20ff      	movs	r0, #255	; 0xff
    4922:	4010      	ands	r0, r2
    4924:	1dfa      	adds	r2, r7, #7
    4926:	7812      	ldrb	r2, [r2, #0]
    4928:	0015      	movs	r5, r2
    492a:	2203      	movs	r2, #3
    492c:	402a      	ands	r2, r5
    492e:	00d2      	lsls	r2, r2, #3
    4930:	4090      	lsls	r0, r2
    4932:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4934:	430a      	orrs	r2, r1
    4936:	33c0      	adds	r3, #192	; 0xc0
    4938:	009b      	lsls	r3, r3, #2
    493a:	511a      	str	r2, [r3, r4]
}
    493c:	46c0      	nop			; (mov r8, r8)
    493e:	46bd      	mov	sp, r7
    4940:	b002      	add	sp, #8
    4942:	bdb0      	pop	{r4, r5, r7, pc}
    4944:	e000ed00 	.word	0xe000ed00
    4948:	e000e100 	.word	0xe000e100

0000494c <Board_Init>:
static void board_WIFI_Init(void);

/* fcns */

void Board_Init(void)
{
    494c:	b580      	push	{r7, lr}
    494e:	af00      	add	r7, sp, #0
	/* hodiny */
	PCC_PORTB = PCC_CLKCFG_CGC_MASK;
    4950:	490b      	ldr	r1, [pc, #44]	; (4980 <Board_Init+0x34>)
    4952:	23b6      	movs	r3, #182	; 0xb6
    4954:	005b      	lsls	r3, r3, #1
    4956:	2280      	movs	r2, #128	; 0x80
    4958:	05d2      	lsls	r2, r2, #23
    495a:	50ca      	str	r2, [r1, r3]
	PCC_PORTD = PCC_CLKCFG_CGC_MASK;
    495c:	4908      	ldr	r1, [pc, #32]	; (4980 <Board_Init+0x34>)
    495e:	23ba      	movs	r3, #186	; 0xba
    4960:	005b      	lsls	r3, r3, #1
    4962:	2280      	movs	r2, #128	; 0x80
    4964:	05d2      	lsls	r2, r2, #23
    4966:	50ca      	str	r2, [r1, r3]

	board_MCULED_Init();
    4968:	f000 f8b4 	bl	4ad4 <board_MCULED_Init>
	board_MCUBTN_Init();
    496c:	f000 f8d2 	bl	4b14 <board_MCUBTN_Init>
	board_MCUSW_Init();
    4970:	f000 f8f0 	bl	4b54 <board_MCUSW_Init>

	board_WIFI_Init();
    4974:	f000 f85c 	bl	4a30 <board_WIFI_Init>

}
    4978:	46c0      	nop			; (mov r8, r8)
    497a:	46bd      	mov	sp, r7
    497c:	bd80      	pop	{r7, pc}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	4007a000 	.word	0x4007a000

00004984 <Board_MCULED_Set>:

void Board_MCULED_Set(uint8_t led, bool value)
{
    4984:	b590      	push	{r4, r7, lr}
    4986:	b083      	sub	sp, #12
    4988:	af00      	add	r7, sp, #0
    498a:	0002      	movs	r2, r0
    498c:	1dfb      	adds	r3, r7, #7
    498e:	701a      	strb	r2, [r3, #0]
    4990:	1dbb      	adds	r3, r7, #6
    4992:	1c0a      	adds	r2, r1, #0
    4994:	701a      	strb	r2, [r3, #0]
	led--;
    4996:	1dfb      	adds	r3, r7, #7
    4998:	781a      	ldrb	r2, [r3, #0]
    499a:	1dfb      	adds	r3, r7, #7
    499c:	3a01      	subs	r2, #1
    499e:	701a      	strb	r2, [r3, #0]
	GPIO_MCU_LEDS->PDOR = (((uint32_t)GPIO_MCU_LEDS->PDOR) & ~(1u << MCULED[led])) | (((uint32_t)value) << MCULED[led]);
    49a0:	4b0d      	ldr	r3, [pc, #52]	; (49d8 <Board_MCULED_Set+0x54>)
    49a2:	4a0d      	ldr	r2, [pc, #52]	; (49d8 <Board_MCULED_Set+0x54>)
    49a4:	6812      	ldr	r2, [r2, #0]
    49a6:	1df9      	adds	r1, r7, #7
    49a8:	7808      	ldrb	r0, [r1, #0]
    49aa:	490c      	ldr	r1, [pc, #48]	; (49dc <Board_MCULED_Set+0x58>)
    49ac:	0080      	lsls	r0, r0, #2
    49ae:	5841      	ldr	r1, [r0, r1]
    49b0:	2001      	movs	r0, #1
    49b2:	4088      	lsls	r0, r1
    49b4:	0001      	movs	r1, r0
    49b6:	43c9      	mvns	r1, r1
    49b8:	4011      	ands	r1, r2
    49ba:	1dba      	adds	r2, r7, #6
    49bc:	7810      	ldrb	r0, [r2, #0]
    49be:	1dfa      	adds	r2, r7, #7
    49c0:	7814      	ldrb	r4, [r2, #0]
    49c2:	4a06      	ldr	r2, [pc, #24]	; (49dc <Board_MCULED_Set+0x58>)
    49c4:	00a4      	lsls	r4, r4, #2
    49c6:	58a2      	ldr	r2, [r4, r2]
    49c8:	4090      	lsls	r0, r2
    49ca:	0002      	movs	r2, r0
    49cc:	430a      	orrs	r2, r1
    49ce:	601a      	str	r2, [r3, #0]
}
    49d0:	46c0      	nop			; (mov r8, r8)
    49d2:	46bd      	mov	sp, r7
    49d4:	b003      	add	sp, #12
    49d6:	bd90      	pop	{r4, r7, pc}
    49d8:	4000f040 	.word	0x4000f040
    49dc:	000050ac 	.word	0x000050ac

000049e0 <Board_MCUBTN_Get>:

bool Board_MCUBTN_Get(uint8_t btn)
{
    49e0:	b580      	push	{r7, lr}
    49e2:	b082      	sub	sp, #8
    49e4:	af00      	add	r7, sp, #0
    49e6:	0002      	movs	r2, r0
    49e8:	1dfb      	adds	r3, r7, #7
    49ea:	701a      	strb	r2, [r3, #0]
	btn--;
    49ec:	1dfb      	adds	r3, r7, #7
    49ee:	781a      	ldrb	r2, [r3, #0]
    49f0:	1dfb      	adds	r3, r7, #7
    49f2:	3a01      	subs	r2, #1
    49f4:	701a      	strb	r2, [r3, #0]
	return !((bool)((GPIO_MCU_BTNS->PDIR & (1u << MCUBTN[btn])) >> MCUBTN[btn]));
    49f6:	4b0c      	ldr	r3, [pc, #48]	; (4a28 <Board_MCUBTN_Get+0x48>)
    49f8:	691b      	ldr	r3, [r3, #16]
    49fa:	1dfa      	adds	r2, r7, #7
    49fc:	7811      	ldrb	r1, [r2, #0]
    49fe:	4a0b      	ldr	r2, [pc, #44]	; (4a2c <Board_MCUBTN_Get+0x4c>)
    4a00:	0089      	lsls	r1, r1, #2
    4a02:	588a      	ldr	r2, [r1, r2]
    4a04:	2101      	movs	r1, #1
    4a06:	4091      	lsls	r1, r2
    4a08:	000a      	movs	r2, r1
    4a0a:	401a      	ands	r2, r3
    4a0c:	1dfb      	adds	r3, r7, #7
    4a0e:	7819      	ldrb	r1, [r3, #0]
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <Board_MCUBTN_Get+0x4c>)
    4a12:	0089      	lsls	r1, r1, #2
    4a14:	58cb      	ldr	r3, [r1, r3]
    4a16:	40da      	lsrs	r2, r3
    4a18:	0013      	movs	r3, r2
    4a1a:	425a      	negs	r2, r3
    4a1c:	4153      	adcs	r3, r2
    4a1e:	b2db      	uxtb	r3, r3
}
    4a20:	0018      	movs	r0, r3
    4a22:	46bd      	mov	sp, r7
    4a24:	b002      	add	sp, #8
    4a26:	bd80      	pop	{r7, pc}
    4a28:	4000f040 	.word	0x4000f040
    4a2c:	000050bc 	.word	0x000050bc

00004a30 <board_WIFI_Init>:


void board_WIFI_Init(void)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	af00      	add	r7, sp, #0
	PORT_WIFI->PCR[IOIND_WIFI_EN] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4a34:	4b23      	ldr	r3, [pc, #140]	; (4ac4 <board_WIFI_Init+0x94>)
    4a36:	2280      	movs	r2, #128	; 0x80
    4a38:	0052      	lsls	r2, r2, #1
    4a3a:	611a      	str	r2, [r3, #16]
	PORT_WIFI->PCR[IOIND_WIFI_RX] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_ALT3);
    4a3c:	4b21      	ldr	r3, [pc, #132]	; (4ac4 <board_WIFI_Init+0x94>)
    4a3e:	22c0      	movs	r2, #192	; 0xc0
    4a40:	0092      	lsls	r2, r2, #2
    4a42:	60da      	str	r2, [r3, #12]
	PORT_WIFI->PCR[IOIND_WIFI_TX] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_ALT3);
    4a44:	4b1f      	ldr	r3, [pc, #124]	; (4ac4 <board_WIFI_Init+0x94>)
    4a46:	22c0      	movs	r2, #192	; 0xc0
    4a48:	0092      	lsls	r2, r2, #2
    4a4a:	609a      	str	r2, [r3, #8]
	PORT_WIFI->PCR[IOIND_WIFI_RESET] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4a4c:	4b1d      	ldr	r3, [pc, #116]	; (4ac4 <board_WIFI_Init+0x94>)
    4a4e:	2280      	movs	r2, #128	; 0x80
    4a50:	0052      	lsls	r2, r2, #1
    4a52:	615a      	str	r2, [r3, #20]
	PORT_WIFI->PCR[IOIND_WIFI_WAKE] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4a54:	4b1b      	ldr	r3, [pc, #108]	; (4ac4 <board_WIFI_Init+0x94>)
    4a56:	2280      	movs	r2, #128	; 0x80
    4a58:	0052      	lsls	r2, r2, #1
    4a5a:	619a      	str	r2, [r3, #24]
	PORT_WIFI->PCR[IOIND_WIFI_IO] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4a5c:	4b19      	ldr	r3, [pc, #100]	; (4ac4 <board_WIFI_Init+0x94>)
    4a5e:	2280      	movs	r2, #128	; 0x80
    4a60:	0052      	lsls	r2, r2, #1
    4a62:	61da      	str	r2, [r3, #28]

	GPIO_WIFI->PDDR |= (1u << IOIND_WIFI_EN);
    4a64:	4b18      	ldr	r3, [pc, #96]	; (4ac8 <board_WIFI_Init+0x98>)
    4a66:	4a18      	ldr	r2, [pc, #96]	; (4ac8 <board_WIFI_Init+0x98>)
    4a68:	6952      	ldr	r2, [r2, #20]
    4a6a:	2110      	movs	r1, #16
    4a6c:	430a      	orrs	r2, r1
    4a6e:	615a      	str	r2, [r3, #20]
	GPIO_WIFI->PDDR |= (1u << IOIND_WIFI_RESET);
    4a70:	4b15      	ldr	r3, [pc, #84]	; (4ac8 <board_WIFI_Init+0x98>)
    4a72:	4a15      	ldr	r2, [pc, #84]	; (4ac8 <board_WIFI_Init+0x98>)
    4a74:	6952      	ldr	r2, [r2, #20]
    4a76:	2120      	movs	r1, #32
    4a78:	430a      	orrs	r2, r1
    4a7a:	615a      	str	r2, [r3, #20]
	GPIO_WIFI->PDDR |= (1u << IOIND_WIFI_WAKE);
    4a7c:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <board_WIFI_Init+0x98>)
    4a7e:	4a12      	ldr	r2, [pc, #72]	; (4ac8 <board_WIFI_Init+0x98>)
    4a80:	6952      	ldr	r2, [r2, #20]
    4a82:	2140      	movs	r1, #64	; 0x40
    4a84:	430a      	orrs	r2, r1
    4a86:	615a      	str	r2, [r3, #20]
	GPIO_WIFI->PDDR &= ~(1u << IOIND_WIFI_IO);
    4a88:	4b0f      	ldr	r3, [pc, #60]	; (4ac8 <board_WIFI_Init+0x98>)
    4a8a:	4a0f      	ldr	r2, [pc, #60]	; (4ac8 <board_WIFI_Init+0x98>)
    4a8c:	6952      	ldr	r2, [r2, #20]
    4a8e:	2180      	movs	r1, #128	; 0x80
    4a90:	438a      	bics	r2, r1
    4a92:	615a      	str	r2, [r3, #20]

	GPIO_WIFI->PCOR = (1u << IOIND_WIFI_EN);
    4a94:	4b0c      	ldr	r3, [pc, #48]	; (4ac8 <board_WIFI_Init+0x98>)
    4a96:	2210      	movs	r2, #16
    4a98:	609a      	str	r2, [r3, #8]
	GPIO_WIFI->PSOR = (1u << IOIND_WIFI_RESET);
    4a9a:	4b0b      	ldr	r3, [pc, #44]	; (4ac8 <board_WIFI_Init+0x98>)
    4a9c:	2220      	movs	r2, #32
    4a9e:	605a      	str	r2, [r3, #4]

	PCC_INTMUX0 = PCC_CLKCFG_CGC_MASK;
    4aa0:	490a      	ldr	r1, [pc, #40]	; (4acc <board_WIFI_Init+0x9c>)
    4aa2:	2290      	movs	r2, #144	; 0x90
    4aa4:	2380      	movs	r3, #128	; 0x80
    4aa6:	05db      	lsls	r3, r3, #23
    4aa8:	508b      	str	r3, [r1, r2]
	INTMUX0->CHANNEL->CHn_IER_31_0 = INTMUX_LPUART2_MASK;
    4aaa:	4b09      	ldr	r3, [pc, #36]	; (4ad0 <board_WIFI_Init+0xa0>)
    4aac:	2220      	movs	r2, #32
    4aae:	611a      	str	r2, [r3, #16]
	NVIC_SetPriority(INTMUX0_0_IRQn, 2);
    4ab0:	2102      	movs	r1, #2
    4ab2:	201c      	movs	r0, #28
    4ab4:	f7ff fedc 	bl	4870 <NVIC_SetPriority>
	NVIC_EnableIRQ(INTMUX0_0_IRQn);
    4ab8:	201c      	movs	r0, #28
    4aba:	f7ff fec3 	bl	4844 <NVIC_EnableIRQ>
}
    4abe:	46c0      	nop			; (mov r8, r8)
    4ac0:	46bd      	mov	sp, r7
    4ac2:	bd80      	pop	{r7, pc}
    4ac4:	4005d000 	.word	0x4005d000
    4ac8:	4000f0c0 	.word	0x4000f0c0
    4acc:	4007a000 	.word	0x4007a000
    4ad0:	40024000 	.word	0x40024000

00004ad4 <board_MCULED_Init>:

void board_MCULED_Init(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	af00      	add	r7, sp, #0
	/*Nastaveni PORTu a GPIO pro LEDky*/
	PORT_MCU_LEDS->PCR[IOIND_MCU_LED1] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4ad8:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <board_MCULED_Init+0x38>)
    4ada:	2280      	movs	r2, #128	; 0x80
    4adc:	0052      	lsls	r2, r2, #1
    4ade:	629a      	str	r2, [r3, #40]	; 0x28
	PORT_MCU_LEDS->PCR[IOIND_MCU_LED2] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4ae0:	4b0a      	ldr	r3, [pc, #40]	; (4b0c <board_MCULED_Init+0x38>)
    4ae2:	2280      	movs	r2, #128	; 0x80
    4ae4:	0052      	lsls	r2, r2, #1
    4ae6:	625a      	str	r2, [r3, #36]	; 0x24
	PORT_MCU_LEDS->PCR[IOIND_MCU_LED3] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4ae8:	4b08      	ldr	r3, [pc, #32]	; (4b0c <board_MCULED_Init+0x38>)
    4aea:	2280      	movs	r2, #128	; 0x80
    4aec:	0052      	lsls	r2, r2, #1
    4aee:	621a      	str	r2, [r3, #32]
	PORT_MCU_LEDS->PCR[IOIND_MCU_LED4] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO);
    4af0:	4b06      	ldr	r3, [pc, #24]	; (4b0c <board_MCULED_Init+0x38>)
    4af2:	2280      	movs	r2, #128	; 0x80
    4af4:	0052      	lsls	r2, r2, #1
    4af6:	61da      	str	r2, [r3, #28]

	GPIO_MCU_LEDS->PDDR |= MCU_LEDS_MASK;
    4af8:	4b05      	ldr	r3, [pc, #20]	; (4b10 <board_MCULED_Init+0x3c>)
    4afa:	4a05      	ldr	r2, [pc, #20]	; (4b10 <board_MCULED_Init+0x3c>)
    4afc:	6952      	ldr	r2, [r2, #20]
    4afe:	21f0      	movs	r1, #240	; 0xf0
    4b00:	00c9      	lsls	r1, r1, #3
    4b02:	430a      	orrs	r2, r1
    4b04:	615a      	str	r2, [r3, #20]
}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	46bd      	mov	sp, r7
    4b0a:	bd80      	pop	{r7, pc}
    4b0c:	4005b000 	.word	0x4005b000
    4b10:	4000f040 	.word	0x4000f040

00004b14 <board_MCUBTN_Init>:

void board_MCUBTN_Init(void)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	af00      	add	r7, sp, #0
	/*Nastaveni PORTu a GPIO pro tlacitka*/
	PORT_MCU_BTNS->PCR[IOIND_MCU_BTN1] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b18:	4b0c      	ldr	r3, [pc, #48]	; (4b4c <board_MCUBTN_Init+0x38>)
    4b1a:	2204      	movs	r2, #4
    4b1c:	32ff      	adds	r2, #255	; 0xff
    4b1e:	60da      	str	r2, [r3, #12]
	PORT_MCU_BTNS->PCR[IOIND_MCU_BTN2] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b20:	4b0a      	ldr	r3, [pc, #40]	; (4b4c <board_MCUBTN_Init+0x38>)
    4b22:	2204      	movs	r2, #4
    4b24:	32ff      	adds	r2, #255	; 0xff
    4b26:	609a      	str	r2, [r3, #8]
	PORT_MCU_BTNS->PCR[IOIND_MCU_BTN3] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b28:	4b08      	ldr	r3, [pc, #32]	; (4b4c <board_MCUBTN_Init+0x38>)
    4b2a:	2204      	movs	r2, #4
    4b2c:	32ff      	adds	r2, #255	; 0xff
    4b2e:	605a      	str	r2, [r3, #4]
	PORT_MCU_BTNS->PCR[IOIND_MCU_BTN4] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b30:	4b06      	ldr	r3, [pc, #24]	; (4b4c <board_MCUBTN_Init+0x38>)
    4b32:	2204      	movs	r2, #4
    4b34:	32ff      	adds	r2, #255	; 0xff
    4b36:	601a      	str	r2, [r3, #0]

	GPIO_MCU_LEDS->PDDR &= ~MCU_BTNS_MASK;
    4b38:	4b05      	ldr	r3, [pc, #20]	; (4b50 <board_MCUBTN_Init+0x3c>)
    4b3a:	4a05      	ldr	r2, [pc, #20]	; (4b50 <board_MCUBTN_Init+0x3c>)
    4b3c:	6952      	ldr	r2, [r2, #20]
    4b3e:	210f      	movs	r1, #15
    4b40:	438a      	bics	r2, r1
    4b42:	615a      	str	r2, [r3, #20]
}
    4b44:	46c0      	nop			; (mov r8, r8)
    4b46:	46bd      	mov	sp, r7
    4b48:	bd80      	pop	{r7, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	4005b000 	.word	0x4005b000
    4b50:	4000f040 	.word	0x4000f040

00004b54 <board_MCUSW_Init>:

void board_MCUSW_Init(void)
{
    4b54:	b580      	push	{r7, lr}
    4b56:	af00      	add	r7, sp, #0
	PORT_MCU_SW->PCR[IOIND_MCU_SW1] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b58:	4b0c      	ldr	r3, [pc, #48]	; (4b8c <board_MCUSW_Init+0x38>)
    4b5a:	2204      	movs	r2, #4
    4b5c:	32ff      	adds	r2, #255	; 0xff
    4b5e:	649a      	str	r2, [r3, #72]	; 0x48
	PORT_MCU_SW->PCR[IOIND_MCU_SW2] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b60:	4b0a      	ldr	r3, [pc, #40]	; (4b8c <board_MCUSW_Init+0x38>)
    4b62:	2204      	movs	r2, #4
    4b64:	32ff      	adds	r2, #255	; 0xff
    4b66:	645a      	str	r2, [r3, #68]	; 0x44
	PORT_MCU_SW->PCR[IOIND_MCU_SW3] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b68:	4b08      	ldr	r3, [pc, #32]	; (4b8c <board_MCUSW_Init+0x38>)
    4b6a:	2204      	movs	r2, #4
    4b6c:	32ff      	adds	r2, #255	; 0xff
    4b6e:	641a      	str	r2, [r3, #64]	; 0x40
	PORT_MCU_SW->PCR[IOIND_MCU_SW4] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_GPIO) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
    4b70:	4b06      	ldr	r3, [pc, #24]	; (4b8c <board_MCUSW_Init+0x38>)
    4b72:	2204      	movs	r2, #4
    4b74:	32ff      	adds	r2, #255	; 0xff
    4b76:	63da      	str	r2, [r3, #60]	; 0x3c

	GPIO_MCU_SW->PDDR &= ~MCU_SWS_MASK;
    4b78:	4b05      	ldr	r3, [pc, #20]	; (4b90 <board_MCUSW_Init+0x3c>)
    4b7a:	4a05      	ldr	r2, [pc, #20]	; (4b90 <board_MCUSW_Init+0x3c>)
    4b7c:	6952      	ldr	r2, [r2, #20]
    4b7e:	4905      	ldr	r1, [pc, #20]	; (4b94 <board_MCUSW_Init+0x40>)
    4b80:	400a      	ands	r2, r1
    4b82:	615a      	str	r2, [r3, #20]
}
    4b84:	46c0      	nop			; (mov r8, r8)
    4b86:	46bd      	mov	sp, r7
    4b88:	bd80      	pop	{r7, pc}
    4b8a:	46c0      	nop			; (mov r8, r8)
    4b8c:	4005b000 	.word	0x4005b000
    4b90:	4000f040 	.word	0x4000f040
    4b94:	fff87fff 	.word	0xfff87fff

00004b98 <wdog_refresh>:
} WDOG_CONF;

void wdog_set(WDOG_CONF wdog_conf, uint16_t timeout);

static inline void wdog_refresh(void)
{
    4b98:	b580      	push	{r7, lr}
    4b9a:	af00      	add	r7, sp, #0
	WDOG0->CNT = WDOG_REFRESH_SEQ;
    4b9c:	4b02      	ldr	r3, [pc, #8]	; (4ba8 <wdog_refresh+0x10>)
    4b9e:	4a03      	ldr	r2, [pc, #12]	; (4bac <wdog_refresh+0x14>)
    4ba0:	605a      	str	r2, [r3, #4]
}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bd80      	pop	{r7, pc}
    4ba8:	40076000 	.word	0x40076000
    4bac:	b480a602 	.word	0xb480a602

00004bb0 <main>:
char buff2[50];



__attribute__ ((weak)) int main(void)
{
    4bb0:	b590      	push	{r4, r7, lr}
    4bb2:	b089      	sub	sp, #36	; 0x24
    4bb4:	af00      	add	r7, sp, #0
	wdog_set(WDOG_CONF_LPOCLK_PRESC_OFF, 10000);
    4bb6:	4b54      	ldr	r3, [pc, #336]	; (4d08 <main+0x158>)
    4bb8:	0019      	movs	r1, r3
    4bba:	2003      	movs	r0, #3
    4bbc:	f7ff f9bc 	bl	3f38 <wdog_set>
	int aff = SCG->SOSCCFG;
    4bc0:	4a52      	ldr	r2, [pc, #328]	; (4d0c <main+0x15c>)
    4bc2:	2384      	movs	r3, #132	; 0x84
    4bc4:	005b      	lsls	r3, r3, #1
    4bc6:	58d3      	ldr	r3, [r2, r3]
    4bc8:	617b      	str	r3, [r7, #20]

/* LPUART */
	char testBuff[] = "Ahoj";
    4bca:	230c      	movs	r3, #12
    4bcc:	18fb      	adds	r3, r7, r3
    4bce:	4a50      	ldr	r2, [pc, #320]	; (4d10 <main+0x160>)
    4bd0:	6811      	ldr	r1, [r2, #0]
    4bd2:	6019      	str	r1, [r3, #0]
    4bd4:	7912      	ldrb	r2, [r2, #4]
    4bd6:	711a      	strb	r2, [r3, #4]
	char txt[] = " svete";
    4bd8:	1d3b      	adds	r3, r7, #4
    4bda:	4a4e      	ldr	r2, [pc, #312]	; (4d14 <main+0x164>)
    4bdc:	6811      	ldr	r1, [r2, #0]
    4bde:	6019      	str	r1, [r3, #0]
    4be0:	8891      	ldrh	r1, [r2, #4]
    4be2:	8099      	strh	r1, [r3, #4]
    4be4:	7992      	ldrb	r2, [r2, #6]
    4be6:	719a      	strb	r2, [r3, #6]

	SYSTEM_Init();
    4be8:	f000 f898 	bl	4d1c <SYSTEM_Init>
	/*PCC_USB0FS = PCC_CLKCFG_CGC_MASK | PCC_CLKCFG_PCS(PCC_CKFG_PCS_VAL_FIRCLK);	// Povoleni hodin

	memset((void*)FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS, 0ul, FSL_FEATURE_USB_KHCI_USB_RAM); // Nulovani RAM pro USB
	*/

	USB_VCOM_Init();
    4bec:	f7ff f8cc 	bl	3d88 <USB_VCOM_Init>


	//USB_devInit(NULL);
	rn131_Init();
    4bf0:	f000 f8fe 	bl	4df0 <rn131_Init>
uint32_t i = 0;
    4bf4:	2300      	movs	r3, #0
    4bf6:	61fb      	str	r3, [r7, #28]
bool a = false;
    4bf8:	231b      	movs	r3, #27
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	2200      	movs	r2, #0
    4bfe:	701a      	strb	r2, [r3, #0]
bool b = false;
    4c00:	231a      	movs	r3, #26
    4c02:	18fb      	adds	r3, r7, r3
    4c04:	2200      	movs	r2, #0
    4c06:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		if(b != Board_MCUBTN_Get(1) && b == false)
    4c08:	2001      	movs	r0, #1
    4c0a:	f7ff fee9 	bl	49e0 <Board_MCUBTN_Get>
    4c0e:	0003      	movs	r3, r0
    4c10:	001a      	movs	r2, r3
    4c12:	231a      	movs	r3, #26
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	781b      	ldrb	r3, [r3, #0]
    4c18:	4293      	cmp	r3, r2
    4c1a:	d009      	beq.n	4c30 <main+0x80>
    4c1c:	231a      	movs	r3, #26
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	2201      	movs	r2, #1
    4c24:	4053      	eors	r3, r2
    4c26:	b2db      	uxtb	r3, r3
    4c28:	2b00      	cmp	r3, #0
    4c2a:	d001      	beq.n	4c30 <main+0x80>
		{
			rn131_test();
    4c2c:	f000 f916 	bl	4e5c <rn131_test>
		}


		b = Board_MCUBTN_Get(1);
    4c30:	231a      	movs	r3, #26
    4c32:	18fc      	adds	r4, r7, r3
    4c34:	2001      	movs	r0, #1
    4c36:	f7ff fed3 	bl	49e0 <Board_MCUBTN_Get>
    4c3a:	0003      	movs	r3, r0
    4c3c:	7023      	strb	r3, [r4, #0]
		Board_MCULED_Set(1, !b);
    4c3e:	231a      	movs	r3, #26
    4c40:	18fb      	adds	r3, r7, r3
    4c42:	781b      	ldrb	r3, [r3, #0]
    4c44:	1e5a      	subs	r2, r3, #1
    4c46:	4193      	sbcs	r3, r2
    4c48:	b2db      	uxtb	r3, r3
    4c4a:	2201      	movs	r2, #1
    4c4c:	4053      	eors	r3, r2
    4c4e:	b2db      	uxtb	r3, r3
    4c50:	1c1a      	adds	r2, r3, #0
    4c52:	2301      	movs	r3, #1
    4c54:	4013      	ands	r3, r2
    4c56:	b2db      	uxtb	r3, r3
    4c58:	0019      	movs	r1, r3
    4c5a:	2001      	movs	r0, #1
    4c5c:	f7ff fe92 	bl	4984 <Board_MCULED_Set>
		Board_MCULED_Set(2, !Board_MCUBTN_Get(2));
    4c60:	2002      	movs	r0, #2
    4c62:	f7ff febd 	bl	49e0 <Board_MCUBTN_Get>
    4c66:	0003      	movs	r3, r0
    4c68:	1e5a      	subs	r2, r3, #1
    4c6a:	4193      	sbcs	r3, r2
    4c6c:	b2db      	uxtb	r3, r3
    4c6e:	2201      	movs	r2, #1
    4c70:	4053      	eors	r3, r2
    4c72:	b2db      	uxtb	r3, r3
    4c74:	1c1a      	adds	r2, r3, #0
    4c76:	2301      	movs	r3, #1
    4c78:	4013      	ands	r3, r2
    4c7a:	b2db      	uxtb	r3, r3
    4c7c:	0019      	movs	r1, r3
    4c7e:	2002      	movs	r0, #2
    4c80:	f7ff fe80 	bl	4984 <Board_MCULED_Set>
		Board_MCULED_Set(3, !Board_MCUBTN_Get(3));
    4c84:	2003      	movs	r0, #3
    4c86:	f7ff feab 	bl	49e0 <Board_MCUBTN_Get>
    4c8a:	0003      	movs	r3, r0
    4c8c:	1e5a      	subs	r2, r3, #1
    4c8e:	4193      	sbcs	r3, r2
    4c90:	b2db      	uxtb	r3, r3
    4c92:	2201      	movs	r2, #1
    4c94:	4053      	eors	r3, r2
    4c96:	b2db      	uxtb	r3, r3
    4c98:	1c1a      	adds	r2, r3, #0
    4c9a:	2301      	movs	r3, #1
    4c9c:	4013      	ands	r3, r2
    4c9e:	b2db      	uxtb	r3, r3
    4ca0:	0019      	movs	r1, r3
    4ca2:	2003      	movs	r0, #3
    4ca4:	f7ff fe6e 	bl	4984 <Board_MCULED_Set>

		if(!Board_MCUBTN_Get(4))
    4ca8:	2004      	movs	r0, #4
    4caa:	f7ff fe99 	bl	49e0 <Board_MCUBTN_Get>
    4cae:	0003      	movs	r3, r0
    4cb0:	001a      	movs	r2, r3
    4cb2:	2301      	movs	r3, #1
    4cb4:	4053      	eors	r3, r2
    4cb6:	b2db      	uxtb	r3, r3
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d019      	beq.n	4cf0 <main+0x140>
		{
			if(i / 50000)
    4cbc:	69fb      	ldr	r3, [r7, #28]
    4cbe:	4a16      	ldr	r2, [pc, #88]	; (4d18 <main+0x168>)
    4cc0:	4293      	cmp	r3, r2
    4cc2:	d919      	bls.n	4cf8 <main+0x148>
			{
				a ^= true;
    4cc4:	231b      	movs	r3, #27
    4cc6:	18fb      	adds	r3, r7, r3
    4cc8:	781b      	ldrb	r3, [r3, #0]
    4cca:	2201      	movs	r2, #1
    4ccc:	4053      	eors	r3, r2
    4cce:	b2db      	uxtb	r3, r3
    4cd0:	001a      	movs	r2, r3
    4cd2:	231b      	movs	r3, #27
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	1e51      	subs	r1, r2, #1
    4cd8:	418a      	sbcs	r2, r1
    4cda:	701a      	strb	r2, [r3, #0]
				Board_MCULED_Set(4, a);
    4cdc:	231b      	movs	r3, #27
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	0019      	movs	r1, r3
    4ce4:	2004      	movs	r0, #4
    4ce6:	f7ff fe4d 	bl	4984 <Board_MCULED_Set>
				i = 0;
    4cea:	2300      	movs	r3, #0
    4cec:	61fb      	str	r3, [r7, #28]
    4cee:	e003      	b.n	4cf8 <main+0x148>
			}
		}
		else
		{
			Board_MCULED_Set(4, false);
    4cf0:	2100      	movs	r1, #0
    4cf2:	2004      	movs	r0, #4
    4cf4:	f7ff fe46 	bl	4984 <Board_MCULED_Set>
		}
		i++;
    4cf8:	69fb      	ldr	r3, [r7, #28]
    4cfa:	3301      	adds	r3, #1
    4cfc:	61fb      	str	r3, [r7, #28]

		USB_VCOM_Service();
    4cfe:	f7ff f891 	bl	3e24 <USB_VCOM_Service>

		wdog_refresh();
    4d02:	f7ff ff49 	bl	4b98 <wdog_refresh>
		if(b != Board_MCUBTN_Get(1) && b == false)
    4d06:	e77f      	b.n	4c08 <main+0x58>
    4d08:	00002710 	.word	0x00002710
    4d0c:	4007b000 	.word	0x4007b000
    4d10:	00004e90 	.word	0x00004e90
    4d14:	00004e98 	.word	0x00004e98
    4d18:	0000c34f 	.word	0x0000c34f

00004d1c <SYSTEM_Init>:
		LPUARTHandler_SendLine(LPUARTHandler_Chann_LPUART0, (void*)buff2);
	}
}

void SYSTEM_Init(void)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	b08a      	sub	sp, #40	; 0x28
    4d20:	af00      	add	r7, sp, #0
	PCC_PORTD = PCC_CLKCFG_CGC_MASK | PCC_CLKCFG_PCS(3);
    4d22:	4931      	ldr	r1, [pc, #196]	; (4de8 <SYSTEM_Init+0xcc>)
    4d24:	23ba      	movs	r3, #186	; 0xba
    4d26:	005b      	lsls	r3, r3, #1
    4d28:	2286      	movs	r2, #134	; 0x86
    4d2a:	05d2      	lsls	r2, r2, #23
    4d2c:	50ca      	str	r2, [r1, r3]

	Board_Init();
    4d2e:	f7ff fe0d 	bl	494c <Board_Init>

	rn131_Init();
    4d32:	f000 f85d 	bl	4df0 <rn131_Init>

	int osrTemp, sbrTemp, osr, sbr, tempDiff, calculatedBaud, baud = 9600;
    4d36:	2396      	movs	r3, #150	; 0x96
    4d38:	019b      	lsls	r3, r3, #6
    4d3a:	617b      	str	r3, [r7, #20]
	int srcClock_Hz = 4000000;
    4d3c:	4b2b      	ldr	r3, [pc, #172]	; (4dec <SYSTEM_Init+0xd0>)
    4d3e:	613b      	str	r3, [r7, #16]
	int baudDiff = baud;
    4d40:	697b      	ldr	r3, [r7, #20]
    4d42:	61bb      	str	r3, [r7, #24]

	for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    4d44:	2304      	movs	r3, #4
    4d46:	627b      	str	r3, [r7, #36]	; 0x24
    4d48:	e046      	b.n	4dd8 <SYSTEM_Init+0xbc>
	    {
	        /* calculate the temporary sbr value   */
	        sbrTemp = (srcClock_Hz / (baud * osrTemp));
    4d4a:	697b      	ldr	r3, [r7, #20]
    4d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d4e:	4353      	muls	r3, r2
    4d50:	0019      	movs	r1, r3
    4d52:	6938      	ldr	r0, [r7, #16]
    4d54:	f7fb fbe6 	bl	524 <__divsi3>
    4d58:	0003      	movs	r3, r0
    4d5a:	623b      	str	r3, [r7, #32]
	        /*set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate*/
	        if (sbrTemp == 0)
    4d5c:	6a3b      	ldr	r3, [r7, #32]
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d101      	bne.n	4d66 <SYSTEM_Init+0x4a>
	        {
	            sbrTemp = 1;
    4d62:	2301      	movs	r3, #1
    4d64:	623b      	str	r3, [r7, #32]
	        }
	        /* Calculate the baud rate based on the temporary OSR and SBR values */
	        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));
    4d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d68:	6a3a      	ldr	r2, [r7, #32]
    4d6a:	4353      	muls	r3, r2
    4d6c:	0019      	movs	r1, r3
    4d6e:	6938      	ldr	r0, [r7, #16]
    4d70:	f7fb fbd8 	bl	524 <__divsi3>
    4d74:	0003      	movs	r3, r0
    4d76:	60fb      	str	r3, [r7, #12]

	        tempDiff = calculatedBaud - baud;
    4d78:	68fa      	ldr	r2, [r7, #12]
    4d7a:	697b      	ldr	r3, [r7, #20]
    4d7c:	1ad3      	subs	r3, r2, r3
    4d7e:	61fb      	str	r3, [r7, #28]

	        /* Select the better value between srb and (sbr + 1) */
	        if (tempDiff > (baud - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    4d80:	6a3b      	ldr	r3, [r7, #32]
    4d82:	3301      	adds	r3, #1
    4d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d86:	4353      	muls	r3, r2
    4d88:	0019      	movs	r1, r3
    4d8a:	6938      	ldr	r0, [r7, #16]
    4d8c:	f7fb fbca 	bl	524 <__divsi3>
    4d90:	0003      	movs	r3, r0
    4d92:	001a      	movs	r2, r3
    4d94:	697b      	ldr	r3, [r7, #20]
    4d96:	1a9a      	subs	r2, r3, r2
    4d98:	69fb      	ldr	r3, [r7, #28]
    4d9a:	429a      	cmp	r2, r3
    4d9c:	da0f      	bge.n	4dbe <SYSTEM_Init+0xa2>
	        {
	            tempDiff = baud - (srcClock_Hz / (osrTemp * (sbrTemp + 1)));
    4d9e:	6a3b      	ldr	r3, [r7, #32]
    4da0:	3301      	adds	r3, #1
    4da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4da4:	4353      	muls	r3, r2
    4da6:	0019      	movs	r1, r3
    4da8:	6938      	ldr	r0, [r7, #16]
    4daa:	f7fb fbbb 	bl	524 <__divsi3>
    4dae:	0003      	movs	r3, r0
    4db0:	001a      	movs	r2, r3
    4db2:	697b      	ldr	r3, [r7, #20]
    4db4:	1a9b      	subs	r3, r3, r2
    4db6:	61fb      	str	r3, [r7, #28]
	            sbrTemp++;
    4db8:	6a3b      	ldr	r3, [r7, #32]
    4dba:	3301      	adds	r3, #1
    4dbc:	623b      	str	r3, [r7, #32]
	        }

	        if (tempDiff <= baudDiff)
    4dbe:	69fa      	ldr	r2, [r7, #28]
    4dc0:	69bb      	ldr	r3, [r7, #24]
    4dc2:	429a      	cmp	r2, r3
    4dc4:	dc05      	bgt.n	4dd2 <SYSTEM_Init+0xb6>
	        {
	            baudDiff = tempDiff;
    4dc6:	69fb      	ldr	r3, [r7, #28]
    4dc8:	61bb      	str	r3, [r7, #24]
	            osr = osrTemp; /* update and store the best OSR value calculated */
    4dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dcc:	60bb      	str	r3, [r7, #8]
	            sbr = sbrTemp; /* update store the best SBR value calculated */
    4dce:	6a3b      	ldr	r3, [r7, #32]
    4dd0:	607b      	str	r3, [r7, #4]
	for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    4dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dd4:	3301      	adds	r3, #1
    4dd6:	627b      	str	r3, [r7, #36]	; 0x24
    4dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dda:	2b20      	cmp	r3, #32
    4ddc:	ddb5      	ble.n	4d4a <SYSTEM_Init+0x2e>
	PORT_LPUART2->PCR[IOIND_LPUART2_RX] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_ALT3);

	PORTB->PCR[16] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_ALT3);
	PORTB->PCR[17] = PORT_PCR_MUX(PORT_PCR_MUX_VAL_ALT3);*/

}
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	46bd      	mov	sp, r7
    4de2:	b00a      	add	sp, #40	; 0x28
    4de4:	bd80      	pop	{r7, pc}
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	4007a000 	.word	0x4007a000
    4dec:	003d0900 	.word	0x003d0900

00004df0 <rn131_Init>:
static void UART_callback(LPUARTHandler_Event_t event);

static uint8_t buff[100];

void rn131_Init(void)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	b082      	sub	sp, #8
    4df4:	af02      	add	r7, sp, #8
	LPUARTHandler_Init(UART_chann, PCC_CKFG_PCS_VAL_SIRCLK, 32, 52, (void*)UART_callback);
    4df6:	2002      	movs	r0, #2
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <rn131_Init+0x1c>)
    4dfa:	9300      	str	r3, [sp, #0]
    4dfc:	2334      	movs	r3, #52	; 0x34
    4dfe:	2220      	movs	r2, #32
    4e00:	2102      	movs	r1, #2
    4e02:	f7ff f9bf 	bl	4184 <LPUARTHandler_Init>

}
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	46bd      	mov	sp, r7
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	00004e11 	.word	0x00004e11

00004e10 <UART_callback>:

void UART_callback(LPUARTHandler_Event_t event)
{
    4e10:	b580      	push	{r7, lr}
    4e12:	b082      	sub	sp, #8
    4e14:	af00      	add	r7, sp, #0
    4e16:	0002      	movs	r2, r0
    4e18:	1dfb      	adds	r3, r7, #7
    4e1a:	701a      	strb	r2, [r3, #0]
	if(event == LPUARTHandler_Event_ReceiveByte)
	{

	}
	if(event == LPUARTHandler_Event_ReceiveLine)
    4e1c:	1dfb      	adds	r3, r7, #7
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d113      	bne.n	4e4c <UART_callback+0x3c>
	{
		LPURTHandler_ReadLine(UART_chann, (void*)buff, 100, 5);
    4e24:	2002      	movs	r0, #2
    4e26:	490b      	ldr	r1, [pc, #44]	; (4e54 <UART_callback+0x44>)
    4e28:	2305      	movs	r3, #5
    4e2a:	2264      	movs	r2, #100	; 0x64
    4e2c:	f7ff fad2 	bl	43d4 <LPURTHandler_ReadLine>
		if(buff[0] == 'C' && buff[1] == 'M')
    4e30:	4b08      	ldr	r3, [pc, #32]	; (4e54 <UART_callback+0x44>)
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	2b43      	cmp	r3, #67	; 0x43
    4e36:	d109      	bne.n	4e4c <UART_callback+0x3c>
    4e38:	4b06      	ldr	r3, [pc, #24]	; (4e54 <UART_callback+0x44>)
    4e3a:	785b      	ldrb	r3, [r3, #1]
    4e3c:	2b4d      	cmp	r3, #77	; 0x4d
    4e3e:	d105      	bne.n	4e4c <UART_callback+0x3c>
		{
			LPUARTHandler_SendLine(UART_chann, "scan");
    4e40:	2202      	movs	r2, #2
    4e42:	4b05      	ldr	r3, [pc, #20]	; (4e58 <UART_callback+0x48>)
    4e44:	0019      	movs	r1, r3
    4e46:	0010      	movs	r0, r2
    4e48:	f7ff fa08 	bl	425c <LPUARTHandler_SendLine>
		}
	}
}
    4e4c:	46c0      	nop			; (mov r8, r8)
    4e4e:	46bd      	mov	sp, r7
    4e50:	b002      	add	sp, #8
    4e52:	bd80      	pop	{r7, pc}
    4e54:	1fff8c80 	.word	0x1fff8c80
    4e58:	00004ea0 	.word	0x00004ea0

00004e5c <rn131_test>:

void rn131_test(void)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b084      	sub	sp, #16
    4e60:	af00      	add	r7, sp, #0
	char str[] = "$$$\r";
    4e62:	1d3b      	adds	r3, r7, #4
    4e64:	4a08      	ldr	r2, [pc, #32]	; (4e88 <rn131_test+0x2c>)
    4e66:	6811      	ldr	r1, [r2, #0]
    4e68:	6019      	str	r1, [r3, #0]
    4e6a:	7912      	ldrb	r2, [r2, #4]
    4e6c:	711a      	strb	r2, [r3, #4]
	uint32_t aa = GPIOD->PDIR;
    4e6e:	4b07      	ldr	r3, [pc, #28]	; (4e8c <rn131_test+0x30>)
    4e70:	691b      	ldr	r3, [r3, #16]
    4e72:	60fb      	str	r3, [r7, #12]
	LPUARTHandler_SendData(UART_chann, (void*)str, 4);
    4e74:	2002      	movs	r0, #2
    4e76:	1d3b      	adds	r3, r7, #4
    4e78:	2204      	movs	r2, #4
    4e7a:	0019      	movs	r1, r3
    4e7c:	f7ff fa52 	bl	4324 <LPUARTHandler_SendData>
}
    4e80:	46c0      	nop			; (mov r8, r8)
    4e82:	46bd      	mov	sp, r7
    4e84:	b004      	add	sp, #16
    4e86:	bd80      	pop	{r7, pc}
    4e88:	00004ea8 	.word	0x00004ea8
    4e8c:	4000f0c0 	.word	0x4000f0c0
    4e90:	6a6f6841 	.word	0x6a6f6841
    4e94:	00000000 	.word	0x00000000
    4e98:	65767320 	.word	0x65767320
    4e9c:	00006574 	.word	0x00006574
    4ea0:	6e616373 	.word	0x6e616373
    4ea4:	00000000 	.word	0x00000000
    4ea8:	0d242424 	.word	0x0d242424
    4eac:	00000000 	.word	0x00000000
    4eb0:	00001d4e 	.word	0x00001d4e
    4eb4:	00001d98 	.word	0x00001d98
    4eb8:	00001dbe 	.word	0x00001dbe
    4ebc:	00001ddc 	.word	0x00001ddc
    4ec0:	00001e00 	.word	0x00001e00
    4ec4:	00001e24 	.word	0x00001e24
    4ec8:	00001e48 	.word	0x00001e48
    4ecc:	00001e64 	.word	0x00001e64
    4ed0:	00001eb6 	.word	0x00001eb6
    4ed4:	00001f4c 	.word	0x00001f4c
    4ed8:	00001f4c 	.word	0x00001f4c
    4edc:	00001f4c 	.word	0x00001f4c
    4ee0:	00001f4c 	.word	0x00001f4c
    4ee4:	00001f4c 	.word	0x00001f4c
    4ee8:	00001ed6 	.word	0x00001ed6
    4eec:	00001f32 	.word	0x00001f32
    4ef0:	00001f4c 	.word	0x00001f4c
    4ef4:	00001f4c 	.word	0x00001f4c
    4ef8:	00001f4c 	.word	0x00001f4c

00004efc <s_UsbDeviceKhciInterface>:
    4efc:	00001845 0000193d 000019ab 00001ae5     E...=...........
    4f0c:	00001c63 00001d11 00002a52 00002a52     c.......R*..R*..
    4f1c:	000029b4 000029ca 00002a10 00002a26     .)...)...*..&*..
    4f2c:	000029e0 000029f8 00002a3c 00002a98     .)...)..<*...*..
    4f3c:	00002b66 00002b66 00002aae 00002ac8     f+..f+...*...*..
    4f4c:	00002b66 00002b66 00002b3a 00002b50     f+..f+..:+..P+..
    4f5c:	00002b0e 00002b66 00002b24              .+..f+..$+..

00004f68 <s_UsbDeviceStandardRequest>:
    4f68:	00002bc1 00002cd1 00000000 00002cd1     .+...,.......,..
    4f78:	00000000 00002dcf 00002e91 00000000     .....-..........
    4f88:	00002ee5 00002f41 00002fc5 00003025     ....A/.../..%0..
    4f98:	0000306d 00003b54 00003b54 000039ba     m0..T;..T;...9..
    4fa8:	000039e2 00003b54 00003b54 00003b54     .9..T;..T;..T;..
    4fb8:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    4fc8:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    4fd8:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    4fe8:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    4ff8:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    5008:	00003b54 00003b54 00003b54 00003b54     T;..T;..T;..T;..
    5018:	00003b54 00003a2c 00003a16 00003a3c     T;..,:...:..<:..
    5028:	00003b54 00003f86 00003f8e 00003f96     T;...?...?...?..
    5038:	00003f9e 00003fa6 00003fae 00003fb6     .?...?...?...?..
    5048:	00003fbe 00003fc6                       .?...?..

00005050 <LF>:
    5050:	0000000a 000046ce 000046ce 000046ce     .....F...F...F..
    5060:	000046e2 000046e2 000046f8 000046f8     .F...F...F...F..
    5070:	000046f8 0000470e 0000470e 0000470e     .F...G...G...G..
    5080:	000047a4 000047a4 000047a4 000047b6     .G...G...G...G..
    5090:	000047b6 000047b6 000047b6 000047b6     .G...G...G...G..
    50a0:	000047b6 000047b6 000047b6              .G...G...G..

000050ac <MCULED>:
    50ac:	0000000a 00000009 00000008 00000007     ................

000050bc <MCUBTN>:
    50bc:	00000003 00000002 00000001 00000000     ................
